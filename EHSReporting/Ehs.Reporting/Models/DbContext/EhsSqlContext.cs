using Microsoft.EntityFrameworkCore;


namespace Ehs.Reporting.MR.Models
{
    public partial class EhsSqlContext : DbContext
    {
        public EhsSqlContext(DbContextOptions<EhsSqlContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AllAuditProtocolQuestions> AllAuditProtocolQuestions { get; set; }
        public virtual DbSet<AllCpBis> AllCpBis { get; set; }
        public virtual DbSet<AllCpIntro> AllCpIntro { get; set; }
        public virtual DbSet<AllRegsCala> AllRegsCala { get; set; }
        public virtual DbSet<AllRegulationLatinAmericaAndSppt> AllRegulationLatinAmericaAndSppt { get; set; }
        public virtual DbSet<AllRegulationsInEnglish> AllRegulationsInEnglish { get; set; }
        public virtual DbSet<Amendment> Amendment { get; set; }
        public virtual DbSet<Amendment1> Amendment1 { get; set; }
        public virtual DbSet<Amendment2> Amendment2 { get; set; }
        public virtual DbSet<Amendment3> Amendment3 { get; set; }
        public virtual DbSet<AmendmentMonitoringReport> AmendmentMonitoringReport { get; set; }
        public virtual DbSet<AmendmentMonitoringReport1> AmendmentMonitoringReport1 { get; set; }
        public virtual DbSet<AmendmentMonitoringReport2> AmendmentMonitoringReport2 { get; set; }
        public virtual DbSet<AmendmentMonitoringReport3> AmendmentMonitoringReport3 { get; set; }
        public virtual DbSet<AmendmentText> AmendmentText { get; set; }
        public virtual DbSet<AmendmentText1> AmendmentText1 { get; set; }
        public virtual DbSet<AmendmentText2> AmendmentText2 { get; set; }
        public virtual DbSet<AmendmentText3> AmendmentText3 { get; set; }
        public virtual DbSet<AnswerDtqBase> AnswerDtqBase { get; set; }
        public virtual DbSet<AnswerDtqText> AnswerDtqText { get; set; }
        public virtual DbSet<AnswerQnCounts> AnswerQnCounts { get; set; }
        public virtual DbSet<AnswerQnCountsOld> AnswerQnCountsOld { get; set; }
        public virtual DbSet<AnswerQnCountsSw> AnswerQnCountsSw { get; set; }
        public virtual DbSet<AnswerQnTopLevelHeadingCounts> AnswerQnTopLevelHeadingCounts { get; set; }
        public virtual DbSet<AnswerRegulationBase> AnswerRegulationBase { get; set; }
        public virtual DbSet<AnswerRegulationCounts> AnswerRegulationCounts { get; set; }
        public virtual DbSet<AnswerRegulationCountsOld> AnswerRegulationCountsOld { get; set; }
        public virtual DbSet<AnswerRegulationCountsSw> AnswerRegulationCountsSw { get; set; }
        public virtual DbSet<AnswerRegulationText> AnswerRegulationText { get; set; }
        public virtual DbSet<AnswerRegulationTopLevelHeadingCounts> AnswerRegulationTopLevelHeadingCounts { get; set; }
        public virtual DbSet<AnswerRr> AnswerRr { get; set; }
        public virtual DbSet<ApQuestions> ApQuestions { get; set; }
        public virtual DbSet<ApquestionsChangeReport> ApquestionsChangeReport { get; set; }
        public virtual DbSet<ApquestionsCountryRegionHeadingLanguage> ApquestionsCountryRegionHeadingLanguage { get; set; }
        public virtual DbSet<ApquestionsForEnvironmentForOffices> ApquestionsForEnvironmentForOffices { get; set; }
        public virtual DbSet<ApquestionsForProductAssessment> ApquestionsForProductAssessment { get; set; }
        public virtual DbSet<ApquestionsForProductAssessmentWithArchivedQns> ApquestionsForProductAssessmentWithArchivedQns { get; set; }
        public virtual DbSet<ApquestionsWithIndustrySector> ApquestionsWithIndustrySector { get; set; }
        public virtual DbSet<ApwordCounts> ApwordCounts { get; set; }
        public virtual DbSet<Area> Area { get; set; }
        public virtual DbSet<AreaNames> AreaNames { get; set; }
        public virtual DbSet<AsqLinkedToApquestionsUs> AsqLinkedToApquestionsUs { get; set; }
        public virtual DbSet<Asqtool> Asqtool { get; set; }
        public virtual DbSet<AuthoritiesLinkedToRegsWithoutRegId> AuthoritiesLinkedToRegsWithoutRegId { get; set; }
        public virtual DbSet<AuthoritieslinkedtoRegsWithRegId> AuthoritieslinkedtoRegsWithRegId { get; set; }
        public virtual DbSet<AvailableRegulations> AvailableRegulations { get; set; }
        public virtual DbSet<BiMrStatuses> BiMrStatuses { get; set; }
        public virtual DbSet<BusinessImpactText> BusinessImpactText { get; set; }
        public virtual DbSet<BusinessImpactText1> BusinessImpactText1 { get; set; }
        public virtual DbSet<BusinessImpactText2> BusinessImpactText2 { get; set; }
        public virtual DbSet<BusinessImpactText3> BusinessImpactText3 { get; set; }
        public virtual DbSet<BusinessimpactNf> BusinessimpactNf { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<CfsUpdates> CfsUpdates { get; set; }
        public virtual DbSet<CitationBase> CitationBase { get; set; }
        public virtual DbSet<CitationBase1> CitationBase1 { get; set; }
        public virtual DbSet<CitationBase2> CitationBase2 { get; set; }
        public virtual DbSet<CitationBase3> CitationBase3 { get; set; }
        public virtual DbSet<CitationMapSqlOracle> CitationMapSqlOracle { get; set; }
        public virtual DbSet<CitationQn> CitationQn { get; set; }
        public virtual DbSet<CitationQn1> CitationQn1 { get; set; }
        public virtual DbSet<CitationQn2> CitationQn2 { get; set; }
        public virtual DbSet<CitationQn3> CitationQn3 { get; set; }
        public virtual DbSet<CitationRegulationQnStatuses> CitationRegulationQnStatuses { get; set; }
        public virtual DbSet<CitationText> CitationText { get; set; }
        public virtual DbSet<CitationText1> CitationText1 { get; set; }
        public virtual DbSet<CitationText2> CitationText2 { get; set; }
        public virtual DbSet<CitationText3> CitationText3 { get; set; }
        public virtual DbSet<CitationsForIntel> CitationsForIntel { get; set; }
        public virtual DbSet<ClAllAnswerDtq> ClAllAnswerDtq { get; set; }
        public virtual DbSet<ClAllAnswerDtqWorkaround> ClAllAnswerDtqWorkaround { get; set; }
        public virtual DbSet<ClAllClientDocument> ClAllClientDocument { get; set; }
        public virtual DbSet<ClAllClientLink> ClAllClientLink { get; set; }
        public virtual DbSet<ClAllClientRegion> ClAllClientRegion { get; set; }
        public virtual DbSet<ClAllClientRegionIndustry> ClAllClientRegionIndustry { get; set; }
        public virtual DbSet<ClAllClientRegionLang> ClAllClientRegionLang { get; set; }
        public virtual DbSet<ClAllClientRegionLangOutput> ClAllClientRegionLangOutput { get; set; }
        public virtual DbSet<ClAllClientRegionProductType> ClAllClientRegionProductType { get; set; }
        public virtual DbSet<ClAllFacilityRegion> ClAllFacilityRegion { get; set; }
        public virtual DbSet<ClAllGeographicTreeList> ClAllGeographicTreeList { get; set; }
        public virtual DbSet<ClAllGeographicTreeList2> ClAllGeographicTreeList2 { get; set; }
        public virtual DbSet<ClAllHeadingMapBase> ClAllHeadingMapBase { get; set; }
        public virtual DbSet<ClAllHeadingMapText> ClAllHeadingMapText { get; set; }
        public virtual DbSet<ClAllOutputFormats> ClAllOutputFormats { get; set; }
        public virtual DbSet<ClAllUserInterestArea> ClAllUserInterestArea { get; set; }
        public virtual DbSet<ClAllUserInterestCountry> ClAllUserInterestCountry { get; set; }
        public virtual DbSet<ClAllUserInterestEmailAddress> ClAllUserInterestEmailAddress { get; set; }
        public virtual DbSet<ClAllUserInterestHeading> ClAllUserInterestHeading { get; set; }
        public virtual DbSet<ClAllUserInterestLanguage> ClAllUserInterestLanguage { get; set; }
        public virtual DbSet<ClAllUserInterestRegion> ClAllUserInterestRegion { get; set; }
        public virtual DbSet<ClAllUserInterestRole> ClAllUserInterestRole { get; set; }
        public virtual DbSet<ClAllUserInterestService> ClAllUserInterestService { get; set; }
        public virtual DbSet<ClAllUserRoleBase> ClAllUserRoleBase { get; set; }
        public virtual DbSet<ClAllUserRoleText> ClAllUserRoleText { get; set; }
        public virtual DbSet<ClApClientScoreCards> ClApClientScoreCards { get; set; }
        public virtual DbSet<ClApItems> ClApItems { get; set; }
        public virtual DbSet<ClApItemsPublished> ClApItemsPublished { get; set; }
        public virtual DbSet<ClApMapHedingCodes> ClApMapHedingCodes { get; set; }
        public virtual DbSet<ClApScoreCard> ClApScoreCard { get; set; }
        public virtual DbSet<ClApScoreCardBase> ClApScoreCardBase { get; set; }
        public virtual DbSet<ClApScoreCardClientAnswer> ClApScoreCardClientAnswer { get; set; }
        public virtual DbSet<ClApScoreCardClientBack> ClApScoreCardClientBack { get; set; }
        public virtual DbSet<ClApScoreCardText> ClApScoreCardText { get; set; }
        public virtual DbSet<ClApScreeningQuestionBase> ClApScreeningQuestionBase { get; set; }
        public virtual DbSet<ClApScreeningQuestionHeadings> ClApScreeningQuestionHeadings { get; set; }
        public virtual DbSet<ClApScreeningQuestionText> ClApScreeningQuestionText { get; set; }
        public virtual DbSet<ClClientRegionForCm> ClClientRegionForCm { get; set; }
        public virtual DbSet<ClCmRegulationExtracted> ClCmRegulationExtracted { get; set; }
        public virtual DbSet<ClCmRegulationExtractedSw> ClCmRegulationExtractedSw { get; set; }
        public virtual DbSet<ClCmRegulationExtractedZz> ClCmRegulationExtractedZz { get; set; }
        public virtual DbSet<ClCmRegulationExtractedZzSw> ClCmRegulationExtractedZzSw { get; set; }
        public virtual DbSet<ClCmRegulationList> ClCmRegulationList { get; set; }
        public virtual DbSet<ClCmRequirementExtracted> ClCmRequirementExtracted { get; set; }
        public virtual DbSet<ClCmRequirementExtractedSw> ClCmRequirementExtractedSw { get; set; }
        public virtual DbSet<ClCmRequirementExtractedZz> ClCmRequirementExtractedZz { get; set; }
        public virtual DbSet<ClCmRequirementExtractedZzSw> ClCmRequirementExtractedZzSw { get; set; }
        public virtual DbSet<ClCoEnhesaEuropeanQuiz> ClCoEnhesaEuropeanQuiz { get; set; }
        public virtual DbSet<ClDirepceRegion> ClDirepceRegion { get; set; }
        public virtual DbSet<ClFeedBackIdtopicList> ClFeedBackIdtopicList { get; set; }
        public virtual DbSet<ClFlashEmails> ClFlashEmails { get; set; }
        public virtual DbSet<ClHlHelpLinkBase> ClHlHelpLinkBase { get; set; }
        public virtual DbSet<ClHlHelpLinkCountryCodes> ClHlHelpLinkCountryCodes { get; set; }
        public virtual DbSet<ClHlHelpLinkText> ClHlHelpLinkText { get; set; }
        public virtual DbSet<ClLgDefSortEn> ClLgDefSortEn { get; set; }
        public virtual DbSet<ClMrAuthorities> ClMrAuthorities { get; set; }
        public virtual DbSet<ClMrCommentText> ClMrCommentText { get; set; }
        public virtual DbSet<ClMrFeedBackActionItemsCount> ClMrFeedBackActionItemsCount { get; set; }
        public virtual DbSet<ClMrFeedBackActionItemsTopicsValid> ClMrFeedBackActionItemsTopicsValid { get; set; }
        public virtual DbSet<ClMrFeedBackClosedItems> ClMrFeedBackClosedItems { get; set; }
        public virtual DbSet<ClMrFeedBackEmailList> ClMrFeedBackEmailList { get; set; }
        public virtual DbSet<ClMrFeedBackEmailList1> ClMrFeedBackEmailList1 { get; set; }
        public virtual DbSet<ClMrFeedBackHeadingCorrespondanceList> ClMrFeedBackHeadingCorrespondanceList { get; set; }
        public virtual DbSet<ClMrFeedBackInvistaMrList> ClMrFeedBackInvistaMrList { get; set; }
        public virtual DbSet<ClMrFeedBackMailingListNotvalid> ClMrFeedBackMailingListNotvalid { get; set; }
        public virtual DbSet<ClMrFeedBackMailingListValid> ClMrFeedBackMailingListValid { get; set; }
        public virtual DbSet<ClMrFeedBackMainHeadingsList> ClMrFeedBackMainHeadingsList { get; set; }
        public virtual DbSet<ClMrFeedBackMainHeadingsListWithoutMappedHeading> ClMrFeedBackMainHeadingsListWithoutMappedHeading { get; set; }
        public virtual DbSet<ClMrFeedBackMaxVersion> ClMrFeedBackMaxVersion { get; set; }
        public virtual DbSet<ClMrFeedBackMaxVersionAllMrs> ClMrFeedBackMaxVersionAllMrs { get; set; }
        public virtual DbSet<ClMrFeedBackMaxVersionList> ClMrFeedBackMaxVersionList { get; set; }
        public virtual DbSet<ClMrFeedBackMrissueOwnerCount> ClMrFeedBackMrissueOwnerCount { get; set; }
        public virtual DbSet<ClMrFeedBackNotrankedCount> ClMrFeedBackNotrankedCount { get; set; }
        public virtual DbSet<ClMrFeedBackSqlIssuesperUser> ClMrFeedBackSqlIssuesperUser { get; set; }
        public virtual DbSet<ClMrFeedBackUpdate1> ClMrFeedBackUpdate1 { get; set; }
        public virtual DbSet<ClMrFeedBacknotInMailingListTopicsValid> ClMrFeedBacknotInMailingListTopicsValid { get; set; }
        public virtual DbSet<ClMrHeadingFeedBackText> ClMrHeadingFeedBackText { get; set; }
        public virtual DbSet<ClMrIssueOwnerCounterList> ClMrIssueOwnerCounterList { get; set; }
        public virtual DbSet<ClMrMonitoringReportsBase> ClMrMonitoringReportsBase { get; set; }
        public virtual DbSet<ClMrMonitoringReportsBaseTest> ClMrMonitoringReportsBaseTest { get; set; }
        public virtual DbSet<ClMrNewsArea> ClMrNewsArea { get; set; }
        public virtual DbSet<ClMrNewsByArea> ClMrNewsByArea { get; set; }
        public virtual DbSet<ClMrNewsCc> ClMrNewsCc { get; set; }
        public virtual DbSet<ClMrNewsContracted> ClMrNewsContracted { get; set; }
        public virtual DbSet<ClMrNewsHeadings> ClMrNewsHeadings { get; set; }
        public virtual DbSet<ClMrProcesses> ClMrProcesses { get; set; }
        public virtual DbSet<ClMrSelectListforIssueOwnerValid> ClMrSelectListforIssueOwnerValid { get; set; }
        public virtual DbSet<ClMrTipoftheMonthEmailText> ClMrTipoftheMonthEmailText { get; set; }
        public virtual DbSet<ClMrTipoftheMonthText> ClMrTipoftheMonthText { get; set; }
        public virtual DbSet<ClMrTopicFacilities> ClMrTopicFacilities { get; set; }
        public virtual DbSet<ClPaProductTypeBase> ClPaProductTypeBase { get; set; }
        public virtual DbSet<ClPaProductTypeClientRegion> ClPaProductTypeClientRegion { get; set; }
        public virtual DbSet<ClPaProductTypeQn> ClPaProductTypeQn { get; set; }
        public virtual DbSet<ClPaProductTypeText> ClPaProductTypeText { get; set; }
        public virtual DbSet<ClPaTopicAreaBase> ClPaTopicAreaBase { get; set; }
        public virtual DbSet<ClPaTopicAreaQn> ClPaTopicAreaQn { get; set; }
        public virtual DbSet<ClPaTopicAreaText> ClPaTopicAreaText { get; set; }
        public virtual DbSet<ClRrAnswerQn> ClRrAnswerQn { get; set; }
        public virtual DbSet<ClRrAnswerRegulation> ClRrAnswerRegulation { get; set; }
        public virtual DbSet<ClRrCutOffDates> ClRrCutOffDates { get; set; }
        public virtual DbSet<ClRrDecTreeHierarchy> ClRrDecTreeHierarchy { get; set; }
        public virtual DbSet<ClRrDtq1Valid> ClRrDtq1Valid { get; set; }
        public virtual DbSet<ClRrDtqInfoText> ClRrDtqInfoText { get; set; }
        public virtual DbSet<ClRrDtqParentList> ClRrDtqParentList { get; set; }
        public virtual DbSet<ClRrDtqValid> ClRrDtqValid { get; set; }
        public virtual DbSet<ClRrDtqanswersAll> ClRrDtqanswersAll { get; set; }
        public virtual DbSet<ClRrDtqanswersValid> ClRrDtqanswersValid { get; set; }
        public virtual DbSet<ClRrDtqchildsValid> ClRrDtqchildsValid { get; set; }
        public virtual DbSet<ClRrDtqregValid> ClRrDtqregValid { get; set; }
        public virtual DbSet<ClRrReg1Inactive> ClRrReg1Inactive { get; set; }
        public virtual DbSet<ClRrReg1Valid> ClRrReg1Valid { get; set; }
        public virtual DbSet<ClRrRegAnswersValid> ClRrRegAnswersValid { get; set; }
        public virtual DbSet<ClRrRegInactive> ClRrRegInactive { get; set; }
        public virtual DbSet<ClRrRegValid> ClRrRegValid { get; set; }
        public virtual DbSet<ClRrRegulation> ClRrRegulation { get; set; }
        public virtual DbSet<ClRrRegulationOld> ClRrRegulationOld { get; set; }
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<ClientContractExtraction> ClientContractExtraction { get; set; }
        public virtual DbSet<ClientContractPerRrfacility> ClientContractPerRrfacility { get; set; }
        public virtual DbSet<ClientContracts> ClientContracts { get; set; }
        public virtual DbSet<ClientDistributionList> ClientDistributionList { get; set; }
        public virtual DbSet<ClientFacilityList> ClientFacilityList { get; set; }
        public virtual DbSet<ClientGroup> ClientGroup { get; set; }
        public virtual DbSet<ClientHeading> ClientHeading { get; set; }
        public virtual DbSet<ClientList> ClientList { get; set; }
        public virtual DbSet<ClientLoginLog> ClientLoginLog { get; set; }
        public virtual DbSet<CloseBoxLifeCycleForOperationManager> CloseBoxLifeCycleForOperationManager { get; set; }
        public virtual DbSet<CmRegAnswers> CmRegAnswers { get; set; }
        public virtual DbSet<CoAllAuthoritiesAuthoritiesTypes> CoAllAuthoritiesAuthoritiesTypes { get; set; }
        public virtual DbSet<CoAllAuthoritiesBase> CoAllAuthoritiesBase { get; set; }
        public virtual DbSet<CoAllAuthoritiesCountryRegion> CoAllAuthoritiesCountryRegion { get; set; }
        public virtual DbSet<CoAllAuthoritiesHeadings> CoAllAuthoritiesHeadings { get; set; }
        public virtual DbSet<CoAllAuthoritiesRegulation> CoAllAuthoritiesRegulation { get; set; }
        public virtual DbSet<CoAllAuthoritiesRegulationWorkaround> CoAllAuthoritiesRegulationWorkaround { get; set; }
        public virtual DbSet<CoAllAuthoritiesText> CoAllAuthoritiesText { get; set; }
        public virtual DbSet<CoAllAuthoritiesTopics> CoAllAuthoritiesTopics { get; set; }
        public virtual DbSet<CoAllAuthoritiesTopicsWorkaround> CoAllAuthoritiesTopicsWorkaround { get; set; }
        public virtual DbSet<CoAllAuthoritiesType> CoAllAuthoritiesType { get; set; }
        public virtual DbSet<CoAllClientReportDates> CoAllClientReportDates { get; set; }
        public virtual DbSet<CoAllGeneralTextSet> CoAllGeneralTextSet { get; set; }
        public virtual DbSet<CoAllGeneralTextSetGeneralText> CoAllGeneralTextSetGeneralText { get; set; }
        public virtual DbSet<CoAllMyActionItems> CoAllMyActionItems { get; set; }
        public virtual DbSet<CoAllRegulationIssuingAuthorities> CoAllRegulationIssuingAuthorities { get; set; }
        public virtual DbSet<CoAllServiceVersion> CoAllServiceVersion { get; set; }
        public virtual DbSet<CoAllServiceVersion1> CoAllServiceVersion1 { get; set; }
        public virtual DbSet<CoAllServiceVersion2> CoAllServiceVersion2 { get; set; }
        public virtual DbSet<CoAllServiceVersion3> CoAllServiceVersion3 { get; set; }
        public virtual DbSet<CoAllUpdateType> CoAllUpdateType { get; set; }
        public virtual DbSet<CoAllWorkflowStatus> CoAllWorkflowStatus { get; set; }
        public virtual DbSet<CoApAllUsedQnForOffices> CoApAllUsedQnForOffices { get; set; }
        public virtual DbSet<CoApDerivationType> CoApDerivationType { get; set; }
        public virtual DbSet<CoApDerivationTypeText> CoApDerivationTypeText { get; set; }
        public virtual DbSet<CoApDerivedQuestion> CoApDerivedQuestion { get; set; }
        public virtual DbSet<CoApDerivedQuestion1> CoApDerivedQuestion1 { get; set; }
        public virtual DbSet<CoApDerivedQuestion2> CoApDerivedQuestion2 { get; set; }
        public virtual DbSet<CoApDerivedQuestion3> CoApDerivedQuestion3 { get; set; }
        public virtual DbSet<CoApGeCutOffDatesView> CoApGeCutOffDatesView { get; set; }
        public virtual DbSet<CoApGeModuleMap> CoApGeModuleMap { get; set; }
        public virtual DbSet<CoApItemsBase> CoApItemsBase { get; set; }
        public virtual DbSet<CoApItemsText> CoApItemsText { get; set; }
        public virtual DbSet<CoApNumberOfQnToAllocateToWarehouses> CoApNumberOfQnToAllocateToWarehouses { get; set; }
        public virtual DbSet<CoApNumberOfQnToWarehousesPerCountry> CoApNumberOfQnToWarehousesPerCountry { get; set; }
        public virtual DbSet<CoApNumberofQnNottoOfficesperCountryView> CoApNumberofQnNottoOfficesperCountryView { get; set; }
        public virtual DbSet<CoApNumberofQnNullOfficesperCountryView> CoApNumberofQnNullOfficesperCountryView { get; set; }
        public virtual DbSet<CoApNumberofQntoOfficesperCountryView> CoApNumberofQntoOfficesperCountryView { get; set; }
        public virtual DbSet<CoApOfficesHeadingMapping> CoApOfficesHeadingMapping { get; set; }
        public virtual DbSet<CoApOfficesQn> CoApOfficesQn { get; set; }
        public virtual DbSet<CoApQnOffices> CoApQnOffices { get; set; }
        public virtual DbSet<CoAxaptaFeed> CoAxaptaFeed { get; set; }
        public virtual DbSet<CoClientBlacknight> CoClientBlacknight { get; set; }
        public virtual DbSet<CoClientStatus> CoClientStatus { get; set; }
        public virtual DbSet<CoConsultantFocusTeamsRole> CoConsultantFocusTeamsRole { get; set; }
        public virtual DbSet<CoConsultantRoleLevels> CoConsultantRoleLevels { get; set; }
        public virtual DbSet<CoConsultantsList> CoConsultantsList { get; set; }
        public virtual DbSet<CoConsultantsRole> CoConsultantsRole { get; set; }
        public virtual DbSet<CoContactManagerList> CoContactManagerList { get; set; }
        public virtual DbSet<CoCountriesByConsultantList> CoCountriesByConsultantList { get; set; }
        public virtual DbSet<CoCountriesList> CoCountriesList { get; set; }
        public virtual DbSet<CoCountryConsultantRole> CoCountryConsultantRole { get; set; }
        public virtual DbSet<CoEdiGeneralText> CoEdiGeneralText { get; set; }
        public virtual DbSet<CoFocusCountries> CoFocusCountries { get; set; }
        public virtual DbSet<CoIdtopicRegId> CoIdtopicRegId { get; set; }
        public virtual DbSet<CoIdtopicwithOneRegIdList> CoIdtopicwithOneRegIdList { get; set; }
        public virtual DbSet<CoIndustry> CoIndustry { get; set; }
        public virtual DbSet<CoIndustryRegulation> CoIndustryRegulation { get; set; }
        public virtual DbSet<CoIndustryRegulation1> CoIndustryRegulation1 { get; set; }
        public virtual DbSet<CoIndustryRegulation2> CoIndustryRegulation2 { get; set; }
        public virtual DbSet<CoIndustryRegulation3> CoIndustryRegulation3 { get; set; }
        public virtual DbSet<CoMrMrsByContactList> CoMrMrsByContactList { get; set; }
        public virtual DbSet<CoMrNotLinkedMrstoRegs> CoMrNotLinkedMrstoRegs { get; set; }
        public virtual DbSet<CoOfficesCutOffDatesList> CoOfficesCutOffDatesList { get; set; }
        public virtual DbSet<CoUrlAmendmentsList> CoUrlAmendmentsList { get; set; }
        public virtual DbSet<CoUrlCountryProfilesList> CoUrlCountryProfilesList { get; set; }
        public virtual DbSet<CoUrlInUseByCountryRegion> CoUrlInUseByCountryRegion { get; set; }
        public virtual DbSet<CoUrlInUseByCountryRegionBeta> CoUrlInUseByCountryRegionBeta { get; set; }
        public virtual DbSet<CoUrlMonitoringReportsList> CoUrlMonitoringReportsList { get; set; }
        public virtual DbSet<CoUrlQuestionsList> CoUrlQuestionsList { get; set; }
        public virtual DbSet<CoUrlRegulationsList> CoUrlRegulationsList { get; set; }
        public virtual DbSet<CoUrlUrlInuse> CoUrlUrlInuse { get; set; }
        public virtual DbSet<ConsultantLanguage> ConsultantLanguage { get; set; }
        public virtual DbSet<ConsultantsLogon> ConsultantsLogon { get; set; }
        public virtual DbSet<ContractedCountries> ContractedCountries { get; set; }
        public virtual DbSet<ContractedCountriesLanguage> ContractedCountriesLanguage { get; set; }
        public virtual DbSet<ContribApDtqaux> ContribApDtqaux { get; set; }
        public virtual DbSet<ContribApLinktoRegs> ContribApLinktoRegs { get; set; }
        public virtual DbSet<ContribApMaxchangeddate> ContribApMaxchangeddate { get; set; }
        public virtual DbSet<ContribApMaxchangeddatenoEn> ContribApMaxchangeddatenoEn { get; set; }
        public virtual DbSet<ContribApMaxresearchdate> ContribApMaxresearchdate { get; set; }
        public virtual DbSet<ContribApMaxresearchdatenoEn> ContribApMaxresearchdatenoEn { get; set; }
        public virtual DbSet<ContribApMinresearchdate> ContribApMinresearchdate { get; set; }
        public virtual DbSet<ContribApMinresearchdatenoEn> ContribApMinresearchdatenoEn { get; set; }
        public virtual DbSet<ContribApNFedQn> ContribApNFedQn { get; set; }
        public virtual DbSet<ContribApNLinktoDtqs> ContribApNLinktoDtqs { get; set; }
        public virtual DbSet<ContribApNQninEnglish> ContribApNQninEnglish { get; set; }
        public virtual DbSet<ContribApNQninNoEnglish> ContribApNQninNoEnglish { get; set; }
        public virtual DbSet<ContribApNRegQn> ContribApNRegQn { get; set; }
        public virtual DbSet<ContribApPeople> ContribApPeople { get; set; }
        public virtual DbSet<ContribApRegAux> ContribApRegAux { get; set; }
        public virtual DbSet<ContribUpdateProcess> ContribUpdateProcess { get; set; }
        public virtual DbSet<Countries> Countries { get; set; }
        public virtual DbSet<CountriesByConsultant> CountriesByConsultant { get; set; }
        public virtual DbSet<CountriesByConsultantLead> CountriesByConsultantLead { get; set; }
        public virtual DbSet<CountriesforTranslation> CountriesforTranslation { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<CountryArea> CountryArea { get; set; }
        public virtual DbSet<CountryAreaForTopicStats> CountryAreaForTopicStats { get; set; }
        public virtual DbSet<CountryInformation> CountryInformation { get; set; }
        public virtual DbSet<CountryLanguage> CountryLanguage { get; set; }
        public virtual DbSet<CountryText> CountryText { get; set; }
        public virtual DbSet<CpFrozen> CpFrozen { get; set; }
        public virtual DbSet<CpFrozenDate> CpFrozenDate { get; set; }
        public virtual DbSet<CpFrozenDateNew> CpFrozenDateNew { get; set; }
        public virtual DbSet<DecTree> DecTree { get; set; }
        public virtual DbSet<DecTree1> DecTree1 { get; set; }
        public virtual DbSet<DecTree2> DecTree2 { get; set; }
        public virtual DbSet<DecTree3> DecTree3 { get; set; }
        public virtual DbSet<DecTreeCodeDecTreeCode> DecTreeCodeDecTreeCode { get; set; }
        public virtual DbSet<DecTreeCodeDecTreeCode1> DecTreeCodeDecTreeCode1 { get; set; }
        public virtual DbSet<DecTreeCodeDecTreeCode2> DecTreeCodeDecTreeCode2 { get; set; }
        public virtual DbSet<DecTreeCodeDecTreeCode3> DecTreeCodeDecTreeCode3 { get; set; }
        public virtual DbSet<DecTreeQnHeading> DecTreeQnHeading { get; set; }
        public virtual DbSet<DecTreeQnHeading1> DecTreeQnHeading1 { get; set; }
        public virtual DbSet<DecTreeQnHeading2> DecTreeQnHeading2 { get; set; }
        public virtual DbSet<DecTreeQnHeading3> DecTreeQnHeading3 { get; set; }
        public virtual DbSet<DecTreeText> DecTreeText { get; set; }
        public virtual DbSet<DecTreeText1> DecTreeText1 { get; set; }
        public virtual DbSet<DecTreeText2> DecTreeText2 { get; set; }
        public virtual DbSet<DecTreeText3> DecTreeText3 { get; set; }
        public virtual DbSet<DectreeLinkedToQn> DectreeLinkedToQn { get; set; }
        public virtual DbSet<DectreeLinkedToRegulation> DectreeLinkedToRegulation { get; set; }
        public virtual DbSet<DectreeTextLinkedToQn> DectreeTextLinkedToQn { get; set; }
        public virtual DbSet<Definition> Definition { get; set; }
        public virtual DbSet<Definition1> Definition1 { get; set; }
        public virtual DbSet<Definition2> Definition2 { get; set; }
        public virtual DbSet<Definition3> Definition3 { get; set; }
        public virtual DbSet<DefinitionText> DefinitionText { get; set; }
        public virtual DbSet<DefinitionText1> DefinitionText1 { get; set; }
        public virtual DbSet<DefinitionText2> DefinitionText2 { get; set; }
        public virtual DbSet<DefinitionText3> DefinitionText3 { get; set; }
        public virtual DbSet<Direpce> Direpce { get; set; }
        public virtual DbSet<DomainName> DomainName { get; set; }
        public virtual DbSet<DomainNameUserPermission> DomainNameUserPermission { get; set; }
        public virtual DbSet<Dtqapquestions> Dtqapquestions { get; set; }
        public virtual DbSet<DtqapquestionsUs> DtqapquestionsUs { get; set; }
        public virtual DbSet<DtqapquestionsUsPublished> DtqapquestionsUsPublished { get; set; }
        public virtual DbSet<DtqapquestionsWithGuideNotes> DtqapquestionsWithGuideNotes { get; set; }
        public virtual DbSet<DtqapquestionsWithIndustrySector> DtqapquestionsWithIndustrySector { get; set; }
        public virtual DbSet<DtqchildrenAnsweredYes> DtqchildrenAnsweredYes { get; set; }
        public virtual DbSet<DtqcountsPerCountryRegion> DtqcountsPerCountryRegion { get; set; }
        public virtual DbSet<DtqsLinkedRegsDetails> DtqsLinkedRegsDetails { get; set; }
        public virtual DbSet<DtqsLinkedToRegulations> DtqsLinkedToRegulations { get; set; }
        public virtual DbSet<EdiProperties> EdiProperties { get; set; }
        public virtual DbSet<EeePanasonicSummary> EeePanasonicSummary { get; set; }
        public virtual DbSet<EeeTopicSummary> EeeTopicSummary { get; set; }
        public virtual DbSet<EhsRegulatoryTrends> EhsRegulatoryTrends { get; set; }
        public virtual DbSet<EhsStats> EhsStats { get; set; }
        public virtual DbSet<EmailAlertsListOfUsersWithUserInterests> EmailAlertsListOfUsersWithUserInterests { get; set; }
        public virtual DbSet<EmailTracker> EmailTracker { get; set; }
        public virtual DbSet<EnablonGeographyPrefix> EnablonGeographyPrefix { get; set; }
        public virtual DbSet<EnhesaActiveClients> EnhesaActiveClients { get; set; }
        public virtual DbSet<EnhesaClientLogsFromFeb2015> EnhesaClientLogsFromFeb2015 { get; set; }
        public virtual DbSet<EnhesaClientUserLog> EnhesaClientUserLog { get; set; }
        public virtual DbSet<EnhesaFlash> EnhesaFlash { get; set; }
        public virtual DbSet<EnhesaTeamRolesPerCountryRegionLanguage> EnhesaTeamRolesPerCountryRegionLanguage { get; set; }
        public virtual DbSet<ErrorHandling> ErrorHandling { get; set; }
        public virtual DbSet<FacilityDomainName> FacilityDomainName { get; set; }
        public virtual DbSet<FacilityResponseModels> FacilityResponseModels { get; set; }
        public virtual DbSet<Facilty> Facilty { get; set; }
        public virtual DbSet<FeedBackComments> FeedBackComments { get; set; }
        public virtual DbSet<FeedBackCustomList> FeedBackCustomList { get; set; }
        public virtual DbSet<FeedBackCustomListValues> FeedBackCustomListValues { get; set; }
        public virtual DbSet<FeedBackIssueOwners> FeedBackIssueOwners { get; set; }
        public virtual DbSet<FeedBackReminder> FeedBackReminder { get; set; }
        public virtual DbSet<FeedBackVersions> FeedBackVersions { get; set; }
        public virtual DbSet<FiltronaNo> FiltronaNo { get; set; }
        public virtual DbSet<FiltronaNodtqs> FiltronaNodtqs { get; set; }
        public virtual DbSet<FiltronaNoregs> FiltronaNoregs { get; set; }
        public virtual DbSet<FiltronaYesdtqs> FiltronaYesdtqs { get; set; }
        public virtual DbSet<FiltronaYesregs> FiltronaYesregs { get; set; }
        public virtual DbSet<FlashEmails> FlashEmails { get; set; }
        public virtual DbSet<FlashMailMerge> FlashMailMerge { get; set; }
        public virtual DbSet<FlashMailerDo> FlashMailerDo { get; set; }
        public virtual DbSet<FoundationAmendmentMapSqlOracle> FoundationAmendmentMapSqlOracle { get; set; }
        public virtual DbSet<GeApAuditQn1> GeApAuditQn1 { get; set; }
        public virtual DbSet<GeApHeadingsMsc> GeApHeadingsMsc { get; set; }
        public virtual DbSet<GeCutoffDates2005> GeCutoffDates2005 { get; set; }
        public virtual DbSet<GeneralBase> GeneralBase { get; set; }
        public virtual DbSet<GeneralText> GeneralText { get; set; }
        public virtual DbSet<Groups> Groups { get; set; }
        public virtual DbSet<Heading> Heading { get; set; }
        public virtual DbSet<HeadingMain> HeadingMain { get; set; }
        public virtual DbSet<HeadingSet> HeadingSet { get; set; }
        public virtual DbSet<HeadingSetCode> HeadingSetCode { get; set; }
        public virtual DbSet<HeadingSetCode1> HeadingSetCode1 { get; set; }
        public virtual DbSet<HeadingSetCode2> HeadingSetCode2 { get; set; }
        public virtual DbSet<HeadingSetCode3> HeadingSetCode3 { get; set; }
        public virtual DbSet<HeadingSetText> HeadingSetText { get; set; }
        public virtual DbSet<HeadingSetsSupersets> HeadingSetsSupersets { get; set; }
        public virtual DbSet<HeadingSub> HeadingSub { get; set; }
        public virtual DbSet<HeadingSubSub> HeadingSubSub { get; set; }
        public virtual DbSet<HeadingText> HeadingText { get; set; }
        public virtual DbSet<HistoryAmendment> HistoryAmendment { get; set; }
        public virtual DbSet<HistoryAmendmentMonitoringReport> HistoryAmendmentMonitoringReport { get; set; }
        public virtual DbSet<HistoryAmendmentText> HistoryAmendmentText { get; set; }
        public virtual DbSet<HistoryBusinessImpactText> HistoryBusinessImpactText { get; set; }
        public virtual DbSet<HistoryCitationBase> HistoryCitationBase { get; set; }
        public virtual DbSet<HistoryCitationQn> HistoryCitationQn { get; set; }
        public virtual DbSet<HistoryCitationText> HistoryCitationText { get; set; }
        public virtual DbSet<HistoryCoAllServiceVersion> HistoryCoAllServiceVersion { get; set; }
        public virtual DbSet<HistoryCoApDerivedQuestion> HistoryCoApDerivedQuestion { get; set; }
        public virtual DbSet<HistoryCoIndustryRegulation> HistoryCoIndustryRegulation { get; set; }
        public virtual DbSet<HistoryDecTree> HistoryDecTree { get; set; }
        public virtual DbSet<HistoryDecTreeCodeDecTreeCode> HistoryDecTreeCodeDecTreeCode { get; set; }
        public virtual DbSet<HistoryDecTreeQnHeading> HistoryDecTreeQnHeading { get; set; }
        public virtual DbSet<HistoryDecTreeText> HistoryDecTreeText { get; set; }
        public virtual DbSet<HistoryDefinition> HistoryDefinition { get; set; }
        public virtual DbSet<HistoryDefinitionText> HistoryDefinitionText { get; set; }
        public virtual DbSet<HistoryHeadingSetCode> HistoryHeadingSetCode { get; set; }
        public virtual DbSet<HistoryIntro> HistoryIntro { get; set; }
        public virtual DbSet<HistoryIntroText> HistoryIntroText { get; set; }
        public virtual DbSet<HistoryLgRegulationCountryRegion> HistoryLgRegulationCountryRegion { get; set; }
        public virtual DbSet<HistoryQn> HistoryQn { get; set; }
        public virtual DbSet<HistoryQnImage> HistoryQnImage { get; set; }
        public virtual DbSet<HistoryQnItems> HistoryQnItems { get; set; }
        public virtual DbSet<HistoryQnText> HistoryQnText { get; set; }
        public virtual DbSet<HistoryRegulation> HistoryRegulation { get; set; }
        public virtual DbSet<HistoryRegulationDecTreeQn> HistoryRegulationDecTreeQn { get; set; }
        public virtual DbSet<HistoryRegulationHeading> HistoryRegulationHeading { get; set; }
        public virtual DbSet<HistoryRegulationMonitoringReport> HistoryRegulationMonitoringReport { get; set; }
        public virtual DbSet<HistoryRegulationRegulation> HistoryRegulationRegulation { get; set; }
        public virtual DbSet<HistoryRegulationRegulationInternational> HistoryRegulationRegulationInternational { get; set; }
        public virtual DbSet<HistoryRegulationRepeal> HistoryRegulationRepeal { get; set; }
        public virtual DbSet<HistoryRegulationText> HistoryRegulationText { get; set; }
        public virtual DbSet<HistoryRequiredAnswer> HistoryRequiredAnswer { get; set; }
        public virtual DbSet<HistoryTopicHeading> HistoryTopicHeading { get; set; }
        public virtual DbSet<HistoryTopicKeyword> HistoryTopicKeyword { get; set; }
        public virtual DbSet<HistoryV2CountryFactSheetBase> HistoryV2CountryFactSheetBase { get; set; }
        public virtual DbSet<HistoryV2CountryFactSheetText> HistoryV2CountryFactSheetText { get; set; }
        public virtual DbSet<HistoryV2ImplementationBase> HistoryV2ImplementationBase { get; set; }
        public virtual DbSet<HistoryV2ImplementationText> HistoryV2ImplementationText { get; set; }
        public virtual DbSet<HistoryV2MrBusinessImpactBase> HistoryV2MrBusinessImpactBase { get; set; }
        public virtual DbSet<HistoryV2MrBusinessImpactText> HistoryV2MrBusinessImpactText { get; set; }
        public virtual DbSet<HistoryV2TopicBase> HistoryV2TopicBase { get; set; }
        public virtual DbSet<HistoryV2TopicRegion> HistoryV2TopicRegion { get; set; }
        public virtual DbSet<HistoryV2TopicText> HistoryV2TopicText { get; set; }
        public virtual DbSet<HospiraUsidtopics> HospiraUsidtopics { get; set; }
        public virtual DbSet<Iislog> Iislog { get; set; }
        public virtual DbSet<IislogMonitoringReport> IislogMonitoringReport { get; set; }
        public virtual DbSet<IislogRegulation> IislogRegulation { get; set; }
        public virtual DbSet<Implementation> Implementation { get; set; }
        public virtual DbSet<IndustrySector> IndustrySector { get; set; }
        public virtual DbSet<IndustrySectorBase> IndustrySectorBase { get; set; }
        public virtual DbSet<IndustrySectorText> IndustrySectorText { get; set; }
        public virtual DbSet<Intro> Intro { get; set; }
        public virtual DbSet<Intro1> Intro1 { get; set; }
        public virtual DbSet<Intro2> Intro2 { get; set; }
        public virtual DbSet<Intro3> Intro3 { get; set; }
        public virtual DbSet<IntroText> IntroText { get; set; }
        public virtual DbSet<IntroText1> IntroText1 { get; set; }
        public virtual DbSet<IntroText2> IntroText2 { get; set; }
        public virtual DbSet<IntroText3> IntroText3 { get; set; }
        public virtual DbSet<IntroWordCounts> IntroWordCounts { get; set; }
        public virtual DbSet<IsCloseBoxCountryRegionList> IsCloseBoxCountryRegionList { get; set; }
        public virtual DbSet<IsCountryRegionList> IsCountryRegionList { get; set; }
        public virtual DbSet<IvoryCostLanguageIssue> IvoryCostLanguageIssue { get; set; }
        public virtual DbSet<Keyword> Keyword { get; set; }
        public virtual DbSet<Lang> Lang { get; set; }
        public virtual DbSet<LanguageText> LanguageText { get; set; }
        public virtual DbSet<LastPublishedTopics> LastPublishedTopics { get; set; }
        public virtual DbSet<LeadSector> LeadSector { get; set; }
        public virtual DbSet<LgRegulationCountryRegion> LgRegulationCountryRegion { get; set; }
        public virtual DbSet<LgRegulationCountryRegion1> LgRegulationCountryRegion1 { get; set; }
        public virtual DbSet<LgRegulationCountryRegion2> LgRegulationCountryRegion2 { get; set; }
        public virtual DbSet<LgRegulationCountryRegion3> LgRegulationCountryRegion3 { get; set; }
        public virtual DbSet<LgRegulationCountryRegionIncludeFederal> LgRegulationCountryRegionIncludeFederal { get; set; }
        public virtual DbSet<Links> Links { get; set; }
        public virtual DbSet<LinksCountry> LinksCountry { get; set; }
        public virtual DbSet<LinksHeading> LinksHeading { get; set; }
        public virtual DbSet<LinksKeyword> LinksKeyword { get; set; }
        public virtual DbSet<LinksLanguage> LinksLanguage { get; set; }
        public virtual DbSet<LinksText> LinksText { get; set; }
        public virtual DbSet<ListHeadingMainNames> ListHeadingMainNames { get; set; }
        public virtual DbSet<ListHeadingSubNames> ListHeadingSubNames { get; set; }
        public virtual DbSet<ListHeadingSubSubNames> ListHeadingSubSubNames { get; set; }
        public virtual DbSet<LsViewCoConsultantLanguageSkills> LsViewCoConsultantLanguageSkills { get; set; }
        public virtual DbSet<LsViewCoConsultantsRoleFocusCountries> LsViewCoConsultantsRoleFocusCountries { get; set; }
        public virtual DbSet<LsViewCoCountryConsultantRole> LsViewCoCountryConsultantRole { get; set; }
        public virtual DbSet<LsViewWorkFlowRolesSorted> LsViewWorkFlowRolesSorted { get; set; }
        public virtual DbSet<MailList> MailList { get; set; }
        public virtual DbSet<MainFeedBackHeadingCodes> MainFeedBackHeadingCodes { get; set; }
        public virtual DbSet<MigrationHistory> MigrationHistory { get; set; }
        public virtual DbSet<MissingIssuingAuthoritiesForIntel> MissingIssuingAuthoritiesForIntel { get; set; }
        public virtual DbSet<MissingIssuingAuthoritiesForIntelX> MissingIssuingAuthoritiesForIntelX { get; set; }
        public virtual DbSet<ModulesGe> ModulesGe { get; set; }
        public virtual DbSet<MonitoringReport> MonitoringReport { get; set; }
        public virtual DbSet<MonitoringReports> MonitoringReports { get; set; }
        public virtual DbSet<MrA> MrA { get; set; }
        public virtual DbSet<MrB> MrB { get; set; }
        public virtual DbSet<MrBiImportance> MrBiImportance { get; set; }
        public virtual DbSet<MrCalaStatsGabriela> MrCalaStatsGabriela { get; set; }
        public virtual DbSet<MrOutdatedProposals> MrOutdatedProposals { get; set; }
        public virtual DbSet<MrPerCountryRegionStatusReportdate> MrPerCountryRegionStatusReportdate { get; set; }
        public virtual DbSet<MrPerHeadingAndCountry> MrPerHeadingAndCountry { get; set; }
        public virtual DbSet<MrTotalsOfSummaryAndRapidNbrOfChars> MrTotalsOfSummaryAndRapidNbrOfChars { get; set; }
        public virtual DbSet<MrTotalsPerCountryRegionLanguageAndReportDate> MrTotalsPerCountryRegionLanguageAndReportDate { get; set; }
        public virtual DbSet<MrWithLongSummary> MrWithLongSummary { get; set; }
        public virtual DbSet<MrdetailsForStats> MrdetailsForStats { get; set; }
        public virtual DbSet<MrperCountryRegionLanguageStats> MrperCountryRegionLanguageStats { get; set; }
        public virtual DbSet<Mrs> Mrs { get; set; }
        public virtual DbSet<MrsUnpublished> MrsUnpublished { get; set; }
        public virtual DbSet<MrstatsForBdandMrteam> MrstatsForBdandMrteam { get; set; }
        public virtual DbSet<MwCitationBaseNonDnnUser> MwCitationBaseNonDnnUser { get; set; }
        public virtual DbSet<MwCitationQnNonDnnUser> MwCitationQnNonDnnUser { get; set; }
        public virtual DbSet<MwCitationTextNonDnnUser> MwCitationTextNonDnnUser { get; set; }
        public virtual DbSet<MwDecTreeNonDnnUser> MwDecTreeNonDnnUser { get; set; }
        public virtual DbSet<MwDecTreeTextNonDnnUser> MwDecTreeTextNonDnnUser { get; set; }
        public virtual DbSet<MwLgRegulationCountryRegionNonDnnUser> MwLgRegulationCountryRegionNonDnnUser { get; set; }
        public virtual DbSet<MwQnItemsNonDnnUser> MwQnItemsNonDnnUser { get; set; }
        public virtual DbSet<MwQnNonDnnUser> MwQnNonDnnUser { get; set; }
        public virtual DbSet<MwQnQnTextDnnUser> MwQnQnTextDnnUser { get; set; }
        public virtual DbSet<MwQnTextNonDnnUser> MwQnTextNonDnnUser { get; set; }
        public virtual DbSet<MwRegulationHeadingNonDnnUser> MwRegulationHeadingNonDnnUser { get; set; }
        public virtual DbSet<MwRegulationNonDnnUser> MwRegulationNonDnnUser { get; set; }
        public virtual DbSet<MwRegulationRegulationTextDnnUser> MwRegulationRegulationTextDnnUser { get; set; }
        public virtual DbSet<MwRegulationTextNonDnnUser> MwRegulationTextNonDnnUser { get; set; }
        public virtual DbSet<MyCountriesView> MyCountriesView { get; set; }
        public virtual DbSet<NotContractedInvista> NotContractedInvista { get; set; }
        public virtual DbSet<NumberOfQnToAllocateToWareHouses> NumberOfQnToAllocateToWareHouses { get; set; }
        public virtual DbSet<OtherLegislation> OtherLegislation { get; set; }
        public virtual DbSet<PbGeneralText> PbGeneralText { get; set; }
        public virtual DbSet<People> People { get; set; }
        public virtual DbSet<PkAmendment> PkAmendment { get; set; }
        public virtual DbSet<PkAmendmentMonitoringReport> PkAmendmentMonitoringReport { get; set; }
        public virtual DbSet<PkAmendmentText> PkAmendmentText { get; set; }
        public virtual DbSet<PkBusinessImpactText> PkBusinessImpactText { get; set; }
        public virtual DbSet<PkCitationBase> PkCitationBase { get; set; }
        public virtual DbSet<PkCitationQn> PkCitationQn { get; set; }
        public virtual DbSet<PkCitationText> PkCitationText { get; set; }
        public virtual DbSet<PkCoAllServiceVersion> PkCoAllServiceVersion { get; set; }
        public virtual DbSet<PkCoApDerivedQuestion> PkCoApDerivedQuestion { get; set; }
        public virtual DbSet<PkCoIndustryRegulation> PkCoIndustryRegulation { get; set; }
        public virtual DbSet<PkDecTree> PkDecTree { get; set; }
        public virtual DbSet<PkDecTreeCodeDecTreeCode> PkDecTreeCodeDecTreeCode { get; set; }
        public virtual DbSet<PkDecTreeQnHeading> PkDecTreeQnHeading { get; set; }
        public virtual DbSet<PkDecTreeText> PkDecTreeText { get; set; }
        public virtual DbSet<PkDefinition> PkDefinition { get; set; }
        public virtual DbSet<PkDefinitionText> PkDefinitionText { get; set; }
        public virtual DbSet<PkHeadingSetCode> PkHeadingSetCode { get; set; }
        public virtual DbSet<PkIntro> PkIntro { get; set; }
        public virtual DbSet<PkIntroText> PkIntroText { get; set; }
        public virtual DbSet<PkLgRegulationCountryRegion> PkLgRegulationCountryRegion { get; set; }
        public virtual DbSet<PkQn> PkQn { get; set; }
        public virtual DbSet<PkQnImage> PkQnImage { get; set; }
        public virtual DbSet<PkQnItems> PkQnItems { get; set; }
        public virtual DbSet<PkQnText> PkQnText { get; set; }
        public virtual DbSet<PkRegulation> PkRegulation { get; set; }
        public virtual DbSet<PkRegulationDecTreeQn> PkRegulationDecTreeQn { get; set; }
        public virtual DbSet<PkRegulationHeading> PkRegulationHeading { get; set; }
        public virtual DbSet<PkRegulationMonitoringReport> PkRegulationMonitoringReport { get; set; }
        public virtual DbSet<PkRegulationRegulation> PkRegulationRegulation { get; set; }
        public virtual DbSet<PkRegulationRegulationInternational> PkRegulationRegulationInternational { get; set; }
        public virtual DbSet<PkRegulationRepeal> PkRegulationRepeal { get; set; }
        public virtual DbSet<PkRegulationText> PkRegulationText { get; set; }
        public virtual DbSet<PkRequiredAnswer> PkRequiredAnswer { get; set; }
        public virtual DbSet<PkTopicHeading> PkTopicHeading { get; set; }
        public virtual DbSet<PkTopicKeyword> PkTopicKeyword { get; set; }
        public virtual DbSet<PkV2CountryFactSheetBase> PkV2CountryFactSheetBase { get; set; }
        public virtual DbSet<PkV2CountryFactSheetText> PkV2CountryFactSheetText { get; set; }
        public virtual DbSet<PkV2ImplementationBase> PkV2ImplementationBase { get; set; }
        public virtual DbSet<PkV2ImplementationText> PkV2ImplementationText { get; set; }
        public virtual DbSet<PkV2MrBusinessImpactBase> PkV2MrBusinessImpactBase { get; set; }
        public virtual DbSet<PkV2MrBusinessImpactText> PkV2MrBusinessImpactText { get; set; }
        public virtual DbSet<PkV2TopicBase> PkV2TopicBase { get; set; }
        public virtual DbSet<PkV2TopicRegion> PkV2TopicRegion { get; set; }
        public virtual DbSet<PkV2TopicText> PkV2TopicText { get; set; }
        public virtual DbSet<ProductAssessementAsqlinkedToQns> ProductAssessementAsqlinkedToQns { get; set; }
        public virtual DbSet<ProductAssessmentQuestionStatus> ProductAssessmentQuestionStatus { get; set; }
        public virtual DbSet<PublicSiteFeed> PublicSiteFeed { get; set; }
        public virtual DbSet<Qn> Qn { get; set; }
        public virtual DbSet<Qn1> Qn1 { get; set; }
        public virtual DbSet<Qn2> Qn2 { get; set; }
        public virtual DbSet<Qn3> Qn3 { get; set; }
        public virtual DbSet<QnImage> QnImage { get; set; }
        public virtual DbSet<QnImage1> QnImage1 { get; set; }
        public virtual DbSet<QnImage2> QnImage2 { get; set; }
        public virtual DbSet<QnImage3> QnImage3 { get; set; }
        public virtual DbSet<QnItems> QnItems { get; set; }
        public virtual DbSet<QnItems1> QnItems1 { get; set; }
        public virtual DbSet<QnItems2> QnItems2 { get; set; }
        public virtual DbSet<QnItems3> QnItems3 { get; set; }
        public virtual DbSet<QnPerFedAndState> QnPerFedAndState { get; set; }
        public virtual DbSet<QnText> QnText { get; set; }
        public virtual DbSet<QnText1> QnText1 { get; set; }
        public virtual DbSet<QnText2> QnText2 { get; set; }
        public virtual DbSet<QnText3> QnText3 { get; set; }
        public virtual DbSet<QryConsultantsCountry> QryConsultantsCountry { get; set; }
        public virtual DbSet<QryCountriesRegions> QryCountriesRegions { get; set; }
        public virtual DbSet<QryCountryEnglish> QryCountryEnglish { get; set; }
        public virtual DbSet<QryLanguageEnglish> QryLanguageEnglish { get; set; }
        public virtual DbSet<QryLatestValidityDate> QryLatestValidityDate { get; set; }
        public virtual DbSet<QryLatestValidityDateVw> QryLatestValidityDateVw { get; set; }
        public virtual DbSet<QryListOfLegislationstatsvw> QryListOfLegislationstatsvw { get; set; }
        public virtual DbSet<QryListofLegislationcountwithnoamend> QryListofLegislationcountwithnoamend { get; set; }
        public virtual DbSet<QryListofLegislationdate> QryListofLegislationdate { get; set; }
        public virtual DbSet<QryListofLegislationstatswithnoamend> QryListofLegislationstatswithnoamend { get; set; }
        public virtual DbSet<QryNbrDiffValDatePr> QryNbrDiffValDatePr { get; set; }
        public virtual DbSet<QryNbrHeadingNoEn> QryNbrHeadingNoEn { get; set; }
        public virtual DbSet<QryNbrHeadingWithIntro> QryNbrHeadingWithIntro { get; set; }
        public virtual DbSet<QryNbrNe> QryNbrNe { get; set; }
        public virtual DbSet<QryNbrNotProofedDate> QryNbrNotProofedDate { get; set; }
        public virtual DbSet<QryNbrNotValidityDate> QryNbrNotValidityDate { get; set; }
        public virtual DbSet<QryNombreHeadingNoEnglish> QryNombreHeadingNoEnglish { get; set; }
        public virtual DbSet<QryRegsNotLinkHeading> QryRegsNotLinkHeading { get; set; }
        public virtual DbSet<QryUsers> QryUsers { get; set; }
        public virtual DbSet<QryWithoutProofDate> QryWithoutProofDate { get; set; }
        public virtual DbSet<QryWithoutValidityDate> QryWithoutValidityDate { get; set; }
        public virtual DbSet<QryWithoutValidityDateProduction> QryWithoutValidityDateProduction { get; set; }
        public virtual DbSet<Qrylistoflegislationadoptiondate> Qrylistoflegislationadoptiondate { get; set; }
        public virtual DbSet<Qrylistoflegislationcountadopt> Qrylistoflegislationcountadopt { get; set; }
        public virtual DbSet<QunionHeadings> QunionHeadings { get; set; }
        public virtual DbSet<RegCitationPerQn> RegCitationPerQn { get; set; }
        public virtual DbSet<RegCountryRegionNamesForStats> RegCountryRegionNamesForStats { get; set; }
        public virtual DbSet<RegRegStatWithIndustrySector> RegRegStatWithIndustrySector { get; set; }
        public virtual DbSet<RegRegStats> RegRegStats { get; set; }
        public virtual DbSet<Region> Region { get; set; }
        public virtual DbSet<RegionNewCodes> RegionNewCodes { get; set; }
        public virtual DbSet<RegionText> RegionText { get; set; }
        public virtual DbSet<Regulation> Regulation { get; set; }
        public virtual DbSet<Regulation1> Regulation1 { get; set; }
        public virtual DbSet<Regulation2> Regulation2 { get; set; }
        public virtual DbSet<Regulation3> Regulation3 { get; set; }
        public virtual DbSet<RegulationCitationQnCodeList> RegulationCitationQnCodeList { get; set; }
        public virtual DbSet<RegulationCountsPercCountryRegionLanguage> RegulationCountsPercCountryRegionLanguage { get; set; }
        public virtual DbSet<RegulationCoverageType> RegulationCoverageType { get; set; }
        public virtual DbSet<RegulationDecTreeQn> RegulationDecTreeQn { get; set; }
        public virtual DbSet<RegulationDecTreeQn1> RegulationDecTreeQn1 { get; set; }
        public virtual DbSet<RegulationDecTreeQn2> RegulationDecTreeQn2 { get; set; }
        public virtual DbSet<RegulationDecTreeQn3> RegulationDecTreeQn3 { get; set; }
        public virtual DbSet<RegulationDtqcounts> RegulationDtqcounts { get; set; }
        public virtual DbSet<RegulationDtqdata> RegulationDtqdata { get; set; }
        public virtual DbSet<RegulationHeading> RegulationHeading { get; set; }
        public virtual DbSet<RegulationHeading1> RegulationHeading1 { get; set; }
        public virtual DbSet<RegulationHeading2> RegulationHeading2 { get; set; }
        public virtual DbSet<RegulationHeading3> RegulationHeading3 { get; set; }
        public virtual DbSet<RegulationMonitoringReport> RegulationMonitoringReport { get; set; }
        public virtual DbSet<RegulationMonitoringReport1> RegulationMonitoringReport1 { get; set; }
        public virtual DbSet<RegulationMonitoringReport2> RegulationMonitoringReport2 { get; set; }
        public virtual DbSet<RegulationMonitoringReport3> RegulationMonitoringReport3 { get; set; }
        public virtual DbSet<RegulationNotLinkedToQn> RegulationNotLinkedToQn { get; set; }
        public virtual DbSet<RegulationQn> RegulationQn { get; set; }
        public virtual DbSet<RegulationQnCitation> RegulationQnCitation { get; set; }
        public virtual DbSet<RegulationQnCitationNew> RegulationQnCitationNew { get; set; }
        public virtual DbSet<RegulationRegulation> RegulationRegulation { get; set; }
        public virtual DbSet<RegulationRegulation1> RegulationRegulation1 { get; set; }
        public virtual DbSet<RegulationRegulation2> RegulationRegulation2 { get; set; }
        public virtual DbSet<RegulationRegulation3> RegulationRegulation3 { get; set; }
        public virtual DbSet<RegulationRegulationInternational> RegulationRegulationInternational { get; set; }
        public virtual DbSet<RegulationRegulationInternational1> RegulationRegulationInternational1 { get; set; }
        public virtual DbSet<RegulationRegulationInternational2> RegulationRegulationInternational2 { get; set; }
        public virtual DbSet<RegulationRegulationInternational3> RegulationRegulationInternational3 { get; set; }
        public virtual DbSet<RegulationRepeal> RegulationRepeal { get; set; }
        public virtual DbSet<RegulationRepeal1> RegulationRepeal1 { get; set; }
        public virtual DbSet<RegulationRepeal2> RegulationRepeal2 { get; set; }
        public virtual DbSet<RegulationRepeal3> RegulationRepeal3 { get; set; }
        public virtual DbSet<RegulationText> RegulationText { get; set; }
        public virtual DbSet<RegulationText1> RegulationText1 { get; set; }
        public virtual DbSet<RegulationText2> RegulationText2 { get; set; }
        public virtual DbSet<RegulationText3> RegulationText3 { get; set; }
        public virtual DbSet<RegulationWithHeadingsLinkedToQn> RegulationWithHeadingsLinkedToQn { get; set; }
        public virtual DbSet<RegulationWordCounts> RegulationWordCounts { get; set; }
        public virtual DbSet<RegulationsForIntel> RegulationsForIntel { get; set; }
        public virtual DbSet<RepetitionBase> RepetitionBase { get; set; }
        public virtual DbSet<RequiredAnswer> RequiredAnswer { get; set; }
        public virtual DbSet<RequiredAnswer1> RequiredAnswer1 { get; set; }
        public virtual DbSet<RequiredAnswer2> RequiredAnswer2 { get; set; }
        public virtual DbSet<RequiredAnswer3> RequiredAnswer3 { get; set; }
        public virtual DbSet<RequirementLinkTypeSqlOracle> RequirementLinkTypeSqlOracle { get; set; }
        public virtual DbSet<RequirementsForIntel> RequirementsForIntel { get; set; }
        public virtual DbSet<RestrictedUsers> RestrictedUsers { get; set; }
        public virtual DbSet<RoleArea> RoleArea { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<RrToCm> RrToCm { get; set; }
        public virtual DbSet<RrfilteredQuestions> RrfilteredQuestions { get; set; }
        public virtual DbSet<RrfilteredQuestions1> RrfilteredQuestions1 { get; set; }
        public virtual DbSet<RrfindAnswerforRegs> RrfindAnswerforRegs { get; set; }
        public virtual DbSet<RrlistofAssumptions> RrlistofAssumptions { get; set; }
        public virtual DbSet<RrmorethanoneReg> RrmorethanoneReg { get; set; }
        public virtual DbSet<RrregbyDtq> RrregbyDtq { get; set; }
        public virtual DbSet<RrregbyDtqnoEn> RrregbyDtqnoEn { get; set; }
        public virtual DbSet<RrregsAnswers> RrregsAnswers { get; set; }
        public virtual DbSet<RrrelatedDtqforRegs> RrrelatedDtqforRegs { get; set; }
        public virtual DbSet<Rrrelatedheadings> Rrrelatedheadings { get; set; }
        public virtual DbSet<Scope> Scope { get; set; }
        public virtual DbSet<ScorecardResponseModels> ScorecardResponseModels { get; set; }
        public virtual DbSet<ScreeningQuestionsDistributor> ScreeningQuestionsDistributor { get; set; }
        public virtual DbSet<Service> Service { get; set; }
        public virtual DbSet<ServiceDatesByCountry> ServiceDatesByCountry { get; set; }
        public virtual DbSet<ServicePackage> ServicePackage { get; set; }
        public virtual DbSet<ServiceVersionQueue> ServiceVersionQueue { get; set; }
        public virtual DbSet<ServiceVersionTrackTable> ServiceVersionTrackTable { get; set; }
        public virtual DbSet<ServiceVersionWareHouse> ServiceVersionWareHouse { get; set; }
        public virtual DbSet<ServiceVersionWareHouseFullDetails> ServiceVersionWareHouseFullDetails { get; set; }
        public virtual DbSet<SkillDescription> SkillDescription { get; set; }
        public virtual DbSet<SkillDescriptionRole> SkillDescriptionRole { get; set; }
        public virtual DbSet<SpecificPreferredMappedHeading> SpecificPreferredMappedHeading { get; set; }
        public virtual DbSet<SqlUsed> SqlUsed { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<StatusDescription> StatusDescription { get; set; }
        public virtual DbSet<TblClientField> TblClientField { get; set; }
        public virtual DbSet<TblDeliverableConsultants> TblDeliverableConsultants { get; set; }
        public virtual DbSet<TblDeliverables> TblDeliverables { get; set; }
        public virtual DbSet<TblDirepce> TblDirepce { get; set; }
        public virtual DbSet<TblPoComponents> TblPoComponents { get; set; }
        public virtual DbSet<TblPurchaseOrders> TblPurchaseOrders { get; set; }
        public virtual DbSet<TblUrl> TblUrl { get; set; }
        public virtual DbSet<TblUrlList> TblUrlList { get; set; }
        public virtual DbSet<TblUrlamendmentCodeLanguageCode> TblUrlamendmentCodeLanguageCode { get; set; }
        public virtual DbSet<TblUrlidtopicLanguageCode> TblUrlidtopicLanguageCode { get; set; }
        public virtual DbSet<TblUrlignoreDomain> TblUrlignoreDomain { get; set; }
        public virtual DbSet<TblUrlintroIdlanguageCode> TblUrlintroIdlanguageCode { get; set; }
        public virtual DbSet<TblUrlitsOk> TblUrlitsOk { get; set; }
        public virtual DbSet<TblUrlqnCodeLanguageCode> TblUrlqnCodeLanguageCode { get; set; }
        public virtual DbSet<TblUrlregIdlanguageCode> TblUrlregIdlanguageCode { get; set; }
        public virtual DbSet<TlManagement> TlManagement { get; set; }
        public virtual DbSet<TmpBadDectreeCodes> TmpBadDectreeCodes { get; set; }
        public virtual DbSet<TmpBadDectreeCodes2> TmpBadDectreeCodes2 { get; set; }
        public virtual DbSet<Topic> Topic { get; set; }
        public virtual DbSet<TopicHeading> TopicHeading { get; set; }
        public virtual DbSet<TopicHeading1> TopicHeading1 { get; set; }
        public virtual DbSet<TopicHeading2> TopicHeading2 { get; set; }
        public virtual DbSet<TopicHeading3> TopicHeading3 { get; set; }
        public virtual DbSet<TopicKeyword> TopicKeyword { get; set; }
        public virtual DbSet<TopicKeyword1> TopicKeyword1 { get; set; }
        public virtual DbSet<TopicKeyword2> TopicKeyword2 { get; set; }
        public virtual DbSet<TopicKeyword3> TopicKeyword3 { get; set; }
        public virtual DbSet<TopicPerCountryRecurrentStatsForTranslation> TopicPerCountryRecurrentStatsForTranslation { get; set; }
        public virtual DbSet<TopicSummaryAndRapidRecurrentStatsForTranslation> TopicSummaryAndRapidRecurrentStatsForTranslation { get; set; }
        public virtual DbSet<TopicsLastPublishedItems> TopicsLastPublishedItems { get; set; }
        public virtual DbSet<TotalQnCounts> TotalQnCounts { get; set; }
        public virtual DbSet<TotalQnCountsSw> TotalQnCountsSw { get; set; }
        public virtual DbSet<TotalQnTopLevelHeadingCounts> TotalQnTopLevelHeadingCounts { get; set; }
        public virtual DbSet<TotalRegulationCounts> TotalRegulationCounts { get; set; }
        public virtual DbSet<TotalRegulationCountsSw> TotalRegulationCountsSw { get; set; }
        public virtual DbSet<TotalRegulationTopLevelHeadingCounts> TotalRegulationTopLevelHeadingCounts { get; set; }
        public virtual DbSet<TrackingAmendment> TrackingAmendment { get; set; }
        public virtual DbSet<TrackingAmendmentMonitoringReport> TrackingAmendmentMonitoringReport { get; set; }
        public virtual DbSet<TrackingAmendmentText> TrackingAmendmentText { get; set; }
        public virtual DbSet<TrackingBusinessImpactText> TrackingBusinessImpactText { get; set; }
        public virtual DbSet<TrackingCitationBase> TrackingCitationBase { get; set; }
        public virtual DbSet<TrackingCitationQn> TrackingCitationQn { get; set; }
        public virtual DbSet<TrackingCitationQnCopy> TrackingCitationQnCopy { get; set; }
        public virtual DbSet<TrackingCitationText> TrackingCitationText { get; set; }
        public virtual DbSet<TrackingCoAllServiceVersion> TrackingCoAllServiceVersion { get; set; }
        public virtual DbSet<TrackingCoApDerivedQuestion> TrackingCoApDerivedQuestion { get; set; }
        public virtual DbSet<TrackingCoIndustryRegulation> TrackingCoIndustryRegulation { get; set; }
        public virtual DbSet<TrackingDecTree> TrackingDecTree { get; set; }
        public virtual DbSet<TrackingDecTreeCodeDecTreeCode> TrackingDecTreeCodeDecTreeCode { get; set; }
        public virtual DbSet<TrackingDecTreeQnHeading> TrackingDecTreeQnHeading { get; set; }
        public virtual DbSet<TrackingDecTreeText> TrackingDecTreeText { get; set; }
        public virtual DbSet<TrackingDefinition> TrackingDefinition { get; set; }
        public virtual DbSet<TrackingDefinitionText> TrackingDefinitionText { get; set; }
        public virtual DbSet<TrackingHeadingSetCode> TrackingHeadingSetCode { get; set; }
        public virtual DbSet<TrackingIntro> TrackingIntro { get; set; }
        public virtual DbSet<TrackingIntroText> TrackingIntroText { get; set; }
        public virtual DbSet<TrackingLgRegulationCountryRegion> TrackingLgRegulationCountryRegion { get; set; }
        public virtual DbSet<TrackingQn> TrackingQn { get; set; }
        public virtual DbSet<TrackingQnImage> TrackingQnImage { get; set; }
        public virtual DbSet<TrackingQnItems> TrackingQnItems { get; set; }
        public virtual DbSet<TrackingQnText> TrackingQnText { get; set; }
        public virtual DbSet<TrackingRegulation> TrackingRegulation { get; set; }
        public virtual DbSet<TrackingRegulationDecTreeQn> TrackingRegulationDecTreeQn { get; set; }
        public virtual DbSet<TrackingRegulationHeading> TrackingRegulationHeading { get; set; }
        public virtual DbSet<TrackingRegulationMonitoringReport> TrackingRegulationMonitoringReport { get; set; }
        public virtual DbSet<TrackingRegulationRegulation> TrackingRegulationRegulation { get; set; }
        public virtual DbSet<TrackingRegulationRegulationInternational> TrackingRegulationRegulationInternational { get; set; }
        public virtual DbSet<TrackingRegulationRepeal> TrackingRegulationRepeal { get; set; }
        public virtual DbSet<TrackingRegulationText> TrackingRegulationText { get; set; }
        public virtual DbSet<TrackingRequiredAnswer> TrackingRequiredAnswer { get; set; }
        public virtual DbSet<TrackingTopicHeading> TrackingTopicHeading { get; set; }
        public virtual DbSet<TrackingTopicKeyword> TrackingTopicKeyword { get; set; }
        public virtual DbSet<TrackingV2CountryFactSheetBase> TrackingV2CountryFactSheetBase { get; set; }
        public virtual DbSet<TrackingV2CountryFactSheetText> TrackingV2CountryFactSheetText { get; set; }
        public virtual DbSet<TrackingV2ImplementationBase> TrackingV2ImplementationBase { get; set; }
        public virtual DbSet<TrackingV2ImplementationText> TrackingV2ImplementationText { get; set; }
        public virtual DbSet<TrackingV2MrBusinessImpactBase> TrackingV2MrBusinessImpactBase { get; set; }
        public virtual DbSet<TrackingV2MrBusinessImpactText> TrackingV2MrBusinessImpactText { get; set; }
        public virtual DbSet<TrackingV2TopicBase> TrackingV2TopicBase { get; set; }
        public virtual DbSet<TrackingV2TopicRegion> TrackingV2TopicRegion { get; set; }
        public virtual DbSet<TrackingV2TopicText> TrackingV2TopicText { get; set; }
        public virtual DbSet<TranslatedQnText> TranslatedQnText { get; set; }
        public virtual DbSet<TranslatedV2ImplementationText> TranslatedV2ImplementationText { get; set; }
        public virtual DbSet<TranslatedV2MrBusinessImpactText> TranslatedV2MrBusinessImpactText { get; set; }
        public virtual DbSet<TranslatedV2TopicText> TranslatedV2TopicText { get; set; }
        public virtual DbSet<UpdatesContracts> UpdatesContracts { get; set; }
        public virtual DbSet<UserInterestPreferences> UserInterestPreferences { get; set; }
        public virtual DbSet<UserInterestsCountryRegionPreferences> UserInterestsCountryRegionPreferences { get; set; }
        public virtual DbSet<UserInterestsHeadingData> UserInterestsHeadingData { get; set; }
        public virtual DbSet<UserInterestsRoles> UserInterestsRoles { get; set; }
        public virtual DbSet<UserInterestsdataContracts> UserInterestsdataContracts { get; set; }
        public virtual DbSet<UserPermission> UserPermission { get; set; }
        public virtual DbSet<UserResponseModels> UserResponseModels { get; set; }
        public virtual DbSet<V2ClientScopeBase> V2ClientScopeBase { get; set; }
        public virtual DbSet<V2ClientScopeText> V2ClientScopeText { get; set; }
        public virtual DbSet<V2CountryFactSheetBase> V2CountryFactSheetBase { get; set; }
        public virtual DbSet<V2CountryFactSheetBase1> V2CountryFactSheetBase1 { get; set; }
        public virtual DbSet<V2CountryFactSheetBase2> V2CountryFactSheetBase2 { get; set; }
        public virtual DbSet<V2CountryFactSheetBase3> V2CountryFactSheetBase3 { get; set; }
        public virtual DbSet<V2CountryFactSheetText> V2CountryFactSheetText { get; set; }
        public virtual DbSet<V2CountryFactSheetText1> V2CountryFactSheetText1 { get; set; }
        public virtual DbSet<V2CountryFactSheetText2> V2CountryFactSheetText2 { get; set; }
        public virtual DbSet<V2CountryFactSheetText3> V2CountryFactSheetText3 { get; set; }
        public virtual DbSet<V2ImplementationBase> V2ImplementationBase { get; set; }
        public virtual DbSet<V2ImplementationBase1> V2ImplementationBase1 { get; set; }
        public virtual DbSet<V2ImplementationBase2> V2ImplementationBase2 { get; set; }
        public virtual DbSet<V2ImplementationBase3> V2ImplementationBase3 { get; set; }
        public virtual DbSet<V2ImplementationText> V2ImplementationText { get; set; }
        public virtual DbSet<V2ImplementationText1> V2ImplementationText1 { get; set; }
        public virtual DbSet<V2ImplementationText2> V2ImplementationText2 { get; set; }
        public virtual DbSet<V2ImplementationText3> V2ImplementationText3 { get; set; }
        public virtual DbSet<V2KeywordBase> V2KeywordBase { get; set; }
        public virtual DbSet<V2KeywordText> V2KeywordText { get; set; }
        public virtual DbSet<V2LanguageLink> V2LanguageLink { get; set; }
        public virtual DbSet<V2LanguageList> V2LanguageList { get; set; }
        public virtual DbSet<V2LinkCategoryBase> V2LinkCategoryBase { get; set; }
        public virtual DbSet<V2LinkCategoryText> V2LinkCategoryText { get; set; }
        public virtual DbSet<V2LookupAuthors> V2LookupAuthors { get; set; }
        public virtual DbSet<V2LookupCountryFactSheets> V2LookupCountryFactSheets { get; set; }
        public virtual DbSet<V2LookupServicesByClient> V2LookupServicesByClient { get; set; }
        public virtual DbSet<V2MrBusinessImpactBase> V2MrBusinessImpactBase { get; set; }
        public virtual DbSet<V2MrBusinessImpactBase1> V2MrBusinessImpactBase1 { get; set; }
        public virtual DbSet<V2MrBusinessImpactBase2> V2MrBusinessImpactBase2 { get; set; }
        public virtual DbSet<V2MrBusinessImpactBase3> V2MrBusinessImpactBase3 { get; set; }
        public virtual DbSet<V2MrBusinessImpactText> V2MrBusinessImpactText { get; set; }
        public virtual DbSet<V2MrBusinessImpactText1> V2MrBusinessImpactText1 { get; set; }
        public virtual DbSet<V2MrBusinessImpactText2> V2MrBusinessImpactText2 { get; set; }
        public virtual DbSet<V2MrBusinessImpactText3> V2MrBusinessImpactText3 { get; set; }
        public virtual DbSet<V2NewOnSiteBase> V2NewOnSiteBase { get; set; }
        public virtual DbSet<V2NewOnSiteText> V2NewOnSiteText { get; set; }
        public virtual DbSet<V2PImplementationDateMin> V2PImplementationDateMin { get; set; }
        public virtual DbSet<V2QryHeadingExpanded> V2QryHeadingExpanded { get; set; }
        public virtual DbSet<V2QryHeadingsExpandedTopLevel> V2QryHeadingsExpandedTopLevel { get; set; }
        public virtual DbSet<V2QryParentHeadingCode> V2QryParentHeadingCode { get; set; }
        public virtual DbSet<V2Rep> V2Rep { get; set; }
        public virtual DbSet<V2ServiceBase> V2ServiceBase { get; set; }
        public virtual DbSet<V2ServiceText> V2ServiceText { get; set; }
        public virtual DbSet<V2StatusBase> V2StatusBase { get; set; }
        public virtual DbSet<V2StatusText> V2StatusText { get; set; }
        public virtual DbSet<V2TopicBase> V2TopicBase { get; set; }
        public virtual DbSet<V2TopicBase1> V2TopicBase1 { get; set; }
        public virtual DbSet<V2TopicBase2> V2TopicBase2 { get; set; }
        public virtual DbSet<V2TopicBase3> V2TopicBase3 { get; set; }
        public virtual DbSet<V2TopicRegion> V2TopicRegion { get; set; }
        public virtual DbSet<V2TopicRegion1> V2TopicRegion1 { get; set; }
        public virtual DbSet<V2TopicRegion2> V2TopicRegion2 { get; set; }
        public virtual DbSet<V2TopicRegion3> V2TopicRegion3 { get; set; }
        public virtual DbSet<V2TopicText> V2TopicText { get; set; }
        public virtual DbSet<V2TopicText1> V2TopicText1 { get; set; }
        public virtual DbSet<V2TopicText2> V2TopicText2 { get; set; }
        public virtual DbSet<V2TopicText3> V2TopicText3 { get; set; }
        public virtual DbSet<V2UrlsAllBroken> V2UrlsAllBroken { get; set; }
        public virtual DbSet<V2UrlsAllTotals> V2UrlsAllTotals { get; set; }
        public virtual DbSet<V2UrlsAllTotalsConsultants> V2UrlsAllTotalsConsultants { get; set; }
        public virtual DbSet<V2UrlsApUsed> V2UrlsApUsed { get; set; }
        public virtual DbSet<V2UrlsCpUsed> V2UrlsCpUsed { get; set; }
        public virtual DbSet<V2UrlsLgAUsed> V2UrlsLgAUsed { get; set; }
        public virtual DbSet<V2UrlsLgUsed> V2UrlsLgUsed { get; set; }
        public virtual DbSet<V2UrlsMrUsed> V2UrlsMrUsed { get; set; }
        public virtual DbSet<V2ViewHeadings> V2ViewHeadings { get; set; }
        public virtual DbSet<V2ViewHeadingsAll> V2ViewHeadingsAll { get; set; }
        public virtual DbSet<V2ViewImplementationDates> V2ViewImplementationDates { get; set; }
        public virtual DbSet<V2ViewKeywords> V2ViewKeywords { get; set; }
        public virtual DbSet<V2ViewLatestClientReportDate> V2ViewLatestClientReportDate { get; set; }
        public virtual DbSet<V2ViewMrBiAllTopics> V2ViewMrBiAllTopics { get; set; }
        public virtual DbSet<V2ViewMrBusinessImpactsClient> V2ViewMrBusinessImpactsClient { get; set; }
        public virtual DbSet<V2ViewRegions> V2ViewRegions { get; set; }
        public virtual DbSet<V3LegislationA> V3LegislationA { get; set; }
        public virtual DbSet<V3LegislationAbc> V3LegislationAbc { get; set; }
        public virtual DbSet<V3LegislationB> V3LegislationB { get; set; }
        public virtual DbSet<V3LegislationC> V3LegislationC { get; set; }
        public virtual DbSet<V3LegislationD> V3LegislationD { get; set; }
        public virtual DbSet<ViewAllHeadings> ViewAllHeadings { get; set; }
        public virtual DbSet<ViewHeadingMain> ViewHeadingMain { get; set; }
        public virtual DbSet<ViewHeadingSub> ViewHeadingSub { get; set; }
        public virtual DbSet<ViewHeadingSubSub> ViewHeadingSubSub { get; set; }
        public virtual DbSet<ViewLinks> ViewLinks { get; set; }
        public virtual DbSet<ViewLinksTextInEnglish> ViewLinksTextInEnglish { get; set; }
        public virtual DbSet<VwCountry> VwCountry { get; set; }
        public virtual DbSet<VwInformationSourcesReviewedCount> VwInformationSourcesReviewedCount { get; set; }
        public virtual DbSet<WalesAnswers> WalesAnswers { get; set; }
        public virtual DbSet<WorkflowRole> WorkflowRole { get; set; }
        public virtual DbSet<WorkingDaysPerMonth> WorkingDaysPerMonth { get; set; }
        public virtual DbSet<WorldAreas> WorldAreas { get; set; }
        public virtual DbSet<WorldAreasText> WorldAreasText { get; set; }

       // protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
       // {
            //if (!optionsBuilder.IsConfigured)
            //{
            //    throw new InvalidOperationException("Database configuration is not set in app settings file.");
            //}
        //}

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AllAuditProtocolQuestions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AllAuditProtocolQuestions", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LastModifiedDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Region).HasMaxLength(25);
            });

            modelBuilder.Entity<AllCpBis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("All_CP_BIs", "dbo");

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CpBiLanguageCode)
                    .IsRequired()
                    .HasColumnName("CP BI LanguageCode")
                    .HasMaxLength(50);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasColumnName("Heading Code")
                    .HasMaxLength(16);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasColumnName("Heading Name")
                    .HasMaxLength(255);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<AllCpIntro>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("All_CP_intro", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CreateDate)
                    .HasColumnName("Create Date")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasColumnName("Heading Code")
                    .HasMaxLength(16);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasColumnName("Heading Name")
                    .HasMaxLength(255);

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnName("Last Modified Date")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.Notes).HasColumnName("notes");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ValidityDate)
                    .HasColumnName("Validity Date")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<AllRegsCala>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AllRegsCALA", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangeType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsolidatedHyperlink).HasMaxLength(255);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.IndName)
                    .HasColumnName("indName")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.ReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.RegHyperlink).HasMaxLength(255);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegSummary).HasMaxLength(4000);

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ResearchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AllRegulationLatinAmericaAndSppt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AllRegulationLatinAmericaAndSPPT", "dbo");

                entity.Property(e => e.ConsolidatedHyperlink).HasMaxLength(255);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Effective).HasColumnName("effective");

                entity.Property(e => e.IndustrySector)
                    .HasColumnName("Industry Sector")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegHyperlink).HasMaxLength(255);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegSummary).HasMaxLength(4000);

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Region).HasMaxLength(25);
            });

            modelBuilder.Entity<AllRegulationsInEnglish>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AllRegulationsInEnglish", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LastModifiedDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Region).HasMaxLength(25);
            });

            modelBuilder.Entity<Amendment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Amendment", "dbo");

                entity.Property(e => e.AmendmentCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.AmendmentDate).HasColumnType("datetime");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SortCode).HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Amendment1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Amendment", "published");

                entity.Property(e => e.AmendmentCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.AmendmentDate).HasColumnType("datetime");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SortCode).HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Amendment2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Amendment", "temporal");

                entity.Property(e => e.AmendmentCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.AmendmentDate).HasColumnType("datetime");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SortCode).HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Amendment3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Amendment", "workflow");

                entity.Property(e => e.AmendmentCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.AmendmentDate).HasColumnType("datetime");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SortCode).HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmendmentMonitoringReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AmendmentMonitoringReport", "dbo");

                entity.Property(e => e.AmendmentCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateAmendmentCode)
                    .HasColumnName("startDate_AmendmentCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIdtopic)
                    .HasColumnName("startDate_IDTopic")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmendmentMonitoringReport1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AmendmentMonitoringReport", "published");

                entity.Property(e => e.AmendmentCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateAmendmentCode)
                    .HasColumnName("startDate_AmendmentCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIdtopic)
                    .HasColumnName("startDate_IDTopic")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmendmentMonitoringReport2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AmendmentMonitoringReport", "temporal");

                entity.Property(e => e.AmendmentCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateAmendmentCode)
                    .HasColumnName("startDate_AmendmentCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIdtopic)
                    .HasColumnName("startDate_IDTopic")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmendmentMonitoringReport3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AmendmentMonitoringReport", "workflow");

                entity.Property(e => e.AmendmentCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateAmendmentCode)
                    .HasColumnName("startDate_AmendmentCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIdtopic)
                    .HasColumnName("startDate_IDTopic")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmendmentText>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AmendmentText", "dbo");

                entity.Property(e => e.AmendmentCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.AmendmentRef).HasMaxLength(500);

                entity.Property(e => e.AmendmentTitle)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Hyperlink).HasMaxLength(255);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmendmentText1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AmendmentText", "published");

                entity.Property(e => e.AmendmentCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.AmendmentRef).HasMaxLength(500);

                entity.Property(e => e.AmendmentTitle)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Hyperlink).HasMaxLength(255);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmendmentText2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AmendmentText", "temporal");

                entity.Property(e => e.AmendmentCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.AmendmentRef).HasMaxLength(500);

                entity.Property(e => e.AmendmentTitle)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Hyperlink).HasMaxLength(255);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmendmentText3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AmendmentText", "workflow");

                entity.Property(e => e.AmendmentCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.AmendmentRef).HasMaxLength(500);

                entity.Property(e => e.AmendmentTitle)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Hyperlink).HasMaxLength(255);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AnswerDtqBase>(entity =>
            {
                entity.HasKey(e => e.Idanswer)
                    .HasName("PK_Answer_DTQ_Base_1");

                entity.ToTable("Answer_DTQ_Base", "dbo");

                entity.HasIndex(e => new { e.Idanswer, e.Answer })
                    .HasName("IX_Answer_DTQ_Base")
                    .IsUnique();

                entity.Property(e => e.Idanswer)
                    .HasColumnName("IDAnswer")
                    .ValueGeneratedNever();

                entity.Property(e => e.Answer).HasMaxLength(10);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<AnswerDtqText>(entity =>
            {
                entity.HasKey(e => new { e.Idanswer, e.LanguageCode })
                    .HasName("PK_Answer_DTQ_Text_1");

                entity.ToTable("Answer_DTQ_Text", "dbo");

                entity.Property(e => e.Idanswer).HasColumnName("IDAnswer");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.Comment).IsRequired();

                entity.Property(e => e.CreateDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<AnswerQnCounts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AnswerQnCounts", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AnswerQnCountsOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AnswerQnCounts_old", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AnswerQnCountsSw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AnswerQnCounts_sw", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AnswerQnTopLevelHeadingCounts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AnswerQnTopLevelHeadingCounts", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TopLevelHeadingCode).HasMaxLength(15);
            });

            modelBuilder.Entity<AnswerRegulationBase>(entity =>
            {
                entity.HasKey(e => e.Idanswer)
                    .HasName("PK_Answer_Regulation_Base_1");

                entity.ToTable("Answer_Regulation_Base", "dbo");

                entity.Property(e => e.Idanswer)
                    .HasColumnName("IDAnswer")
                    .ValueGeneratedNever();

                entity.Property(e => e.Answer).HasMaxLength(10);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<AnswerRegulationCounts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AnswerRegulationCounts", "dbo");

                entity.Property(e => e.Countrycode)
                    .IsRequired()
                    .HasColumnName("countrycode")
                    .HasMaxLength(2);

                entity.Property(e => e.Facilitycode)
                    .IsRequired()
                    .HasColumnName("facilitycode")
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("idclient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Regioncode)
                    .IsRequired()
                    .HasColumnName("regioncode")
                    .HasMaxLength(50);

                entity.Property(e => e.Servicecode)
                    .IsRequired()
                    .HasColumnName("servicecode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AnswerRegulationCountsOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AnswerRegulationCounts_old", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AnswerRegulationCountsSw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AnswerRegulationCounts_sw", "dbo");

                entity.Property(e => e.Countrycode)
                    .IsRequired()
                    .HasColumnName("countrycode")
                    .HasMaxLength(2);

                entity.Property(e => e.Facilitycode)
                    .IsRequired()
                    .HasColumnName("facilitycode")
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("idclient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Regioncode)
                    .IsRequired()
                    .HasColumnName("regioncode")
                    .HasMaxLength(50);

                entity.Property(e => e.Servicecode)
                    .IsRequired()
                    .HasColumnName("servicecode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AnswerRegulationText>(entity =>
            {
                entity.HasKey(e => new { e.Idanswer, e.LanguageCode })
                    .HasName("PK_Answer_Regulation_Text_1");

                entity.ToTable("Answer_Regulation_Text", "dbo");

                entity.HasIndex(e => e.Idanswer)
                    .HasName("IDAnswer");

                entity.HasIndex(e => new { e.Idanswer, e.CreateDate })
                    .HasName("{B8EBC89F-07DF-46B4-AF5C-6000823D712D}");

                entity.Property(e => e.Idanswer).HasColumnName("IDAnswer");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<AnswerRegulationTopLevelHeadingCounts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AnswerRegulationTopLevelHeadingCounts", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TopLevelHeadingCode).HasMaxLength(15);
            });

            modelBuilder.Entity<AnswerRr>(entity =>
            {
                entity.HasKey(e => e.Idanswer)
                    .HasName("aaaaaAnswer_RR_PK");

                entity.ToTable("Answer_RR", "dbo");

                entity.HasIndex(e => e.Dtqcode)
                    .HasName("DTQCode");

                entity.HasIndex(e => e.FacilityCode)
                    .HasName("FacilityCode");

                entity.HasIndex(e => e.Idclient)
                    .HasName("IDClient");

                entity.HasIndex(e => new { e.RegId, e.FacilityCode, e.Idclient, e.Dtqcode })
                    .HasName("RegIDDTQ")
                    .IsUnique();

                entity.Property(e => e.Idanswer).HasColumnName("IDAnswer");

                entity.Property(e => e.AnswerMajorVersion).HasDefaultValueSql("((1))");

                entity.Property(e => e.Dtqcode)
                    .HasColumnName("DTQCode")
                    .HasMaxLength(15);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcontact)
                    .IsRequired()
                    .HasColumnName("IDContact")
                    .HasMaxLength(255);

                entity.Property(e => e.RegId)
                    .HasColumnName("RegID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ValidityDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ApQuestions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AP_Questions", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasColumnName("Country Name")
                    .HasMaxLength(100);

                entity.Property(e => e.CqnCode)
                    .IsRequired()
                    .HasColumnName("CQnCode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CqnText).HasColumnName("CQnText");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasColumnName("Heading Name")
                    .HasMaxLength(255);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LinkNotes)
                    .HasColumnName("Link Notes")
                    .HasMaxLength(300);

                entity.Property(e => e.LinkType)
                    .HasColumnName("Link Type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MqnCode)
                    .HasColumnName("MQnCode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasColumnName("Region Name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ApquestionsChangeReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("APQuestionsChangeReport", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("End Date")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.HeadingCod)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnName("Last Modified Date")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("New ResearchDate")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnTitle).HasMaxLength(1000);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start Date")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ApquestionsCountryRegionHeadingLanguage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("APQuestionsCountryRegionHeadingLanguage", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Region).HasMaxLength(25);
            });

            modelBuilder.Entity<ApquestionsForEnvironmentForOffices>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("APQuestionsFor EnvironmentFor Offices", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ApquestionsForProductAssessment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("APQuestionsForProductAssessment", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.Citation).HasMaxLength(255);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasColumnName("Country Name")
                    .HasMaxLength(100);

                entity.Property(e => e.CqnCode)
                    .IsRequired()
                    .HasColumnName("CQnCode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CqnText).HasColumnName("CQnText");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.HeadingCodeText)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasColumnName("Heading Name")
                    .HasMaxLength(255);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LinkNotes)
                    .HasColumnName("Link Notes")
                    .HasMaxLength(300);

                entity.Property(e => e.LinkType)
                    .HasColumnName("Link Type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MqnCode)
                    .HasColumnName("MQnCode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.ProductTypeCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.QnTitle).HasMaxLength(1000);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegTitle).HasMaxLength(1000);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasColumnName("Region Name")
                    .HasMaxLength(100);

                entity.Property(e => e.ReleaseComment).IsUnicode(false);

                entity.Property(e => e.ReleaseNote)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TopicAreaText).HasMaxLength(100);

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ApquestionsForProductAssessmentWithArchivedQns>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("APQuestionsForProductAssessmentWithArchivedQNs", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasColumnName("Country Name")
                    .HasMaxLength(100);

                entity.Property(e => e.CqnCode)
                    .IsRequired()
                    .HasColumnName("CQnCode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CqnText).HasColumnName("CQnText");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.HeadingCodeText)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasColumnName("Heading Name")
                    .HasMaxLength(255);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LinkNotes)
                    .HasColumnName("Link Notes")
                    .HasMaxLength(300);

                entity.Property(e => e.LinkType)
                    .HasColumnName("Link Type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MqnCode)
                    .HasColumnName("MQnCode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ProductTypeCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasColumnName("Region Name")
                    .HasMaxLength(100);

                entity.Property(e => e.ReleaseComment).IsUnicode(false);

                entity.Property(e => e.ReleaseNote)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TopicAreaText).HasMaxLength(100);

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ApquestionsWithIndustrySector>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("APQuestionsWithIndustrySector", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.Citation).HasMaxLength(255);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasColumnName("Country Name")
                    .HasMaxLength(100);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasColumnName("Heading Name")
                    .HasMaxLength(255);

                entity.Property(e => e.IndustrySector).HasColumnName("Industry Sector");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegTitle).HasMaxLength(1000);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasColumnName("Region Name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ApwordCounts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("APWordCounts", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Region).HasMaxLength(25);
            });

            modelBuilder.Entity<Area>(entity =>
            {
                entity.HasKey(e => e.Idarea)
                    .HasName("aaaaaAREA_PK");

                entity.ToTable("AREA", "dbo");

                entity.HasIndex(e => e.AreaCode)
                    .HasName("IX_AREA_1");

                entity.HasIndex(e => e.ContinentalArea)
                    .HasName("IX_AREA_2");

                entity.Property(e => e.Idarea)
                    .HasColumnName("IDArea")
                    .ValueGeneratedNever();

                entity.Property(e => e.Area1)
                    .IsRequired()
                    .HasColumnName("Area")
                    .HasMaxLength(30);

                entity.Property(e => e.ImagePath).HasMaxLength(50);
            });

            modelBuilder.Entity<AreaNames>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AreaNames", "dbo");

                entity.Property(e => e.Area)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Idarea).HasColumnName("IDArea");

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.RegionName).HasMaxLength(100);
            });

            modelBuilder.Entity<AsqLinkedToApquestionsUs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ASQ_LinkedToAPQuestions_US", "dbo");

                entity.Property(e => e.Asq)
                    .IsRequired()
                    .HasColumnName("ASQ")
                    .HasMaxLength(15);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DtqNewResearchDate)
                    .HasColumnName("DTQ_newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.DtqRegionCode)
                    .IsRequired()
                    .HasColumnName("DTQ_RegionCode")
                    .HasMaxLength(50);

                entity.Property(e => e.DtqRowStatus)
                    .IsRequired()
                    .HasColumnName("DTQ_rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnRegionCode)
                    .IsRequired()
                    .HasColumnName("QN_RegionCode")
                    .HasMaxLength(50);

                entity.Property(e => e.QnTextNewResearchDate)
                    .HasColumnName("QnText_newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.QnTextRowStatus)
                    .IsRequired()
                    .HasColumnName("QnText_rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QnUpdateTypeId).HasColumnName("QN_UpdateTypeId");

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Asqtool>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ASQTool", "dbo");

                entity.Property(e => e.ApTitle).HasColumnName("AP Title");

                entity.Property(e => e.Apcountry)
                    .IsRequired()
                    .HasColumnName("APCountry")
                    .HasMaxLength(50);

                entity.Property(e => e.Apregion)
                    .HasColumnName("APRegion")
                    .HasMaxLength(25);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<AuthoritiesLinkedToRegsWithoutRegId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AuthoritiesLinkedToRegsWithoutRegId", "dbo");

                entity.Property(e => e.AuthorityName)
                    .HasColumnName("Authority Name")
                    .HasMaxLength(200);

                entity.Property(e => e.City).HasMaxLength(100);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Hyperlink).HasMaxLength(200);

                entity.Property(e => e.Num)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.Street).HasMaxLength(200);

                entity.Property(e => e.ZipCode).HasMaxLength(20);
            });

            modelBuilder.Entity<AuthoritieslinkedtoRegsWithRegId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AuthoritieslinkedtoRegsWithRegID", "dbo");

                entity.Property(e => e.AuthorityName)
                    .HasColumnName("Authority Name")
                    .HasMaxLength(200);

                entity.Property(e => e.City).HasMaxLength(100);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Hyperlink).HasMaxLength(200);

                entity.Property(e => e.Num)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.Street).HasMaxLength(200);

                entity.Property(e => e.ZipCode).HasMaxLength(20);
            });

            modelBuilder.Entity<AvailableRegulations>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AvailableRegulations", "dbo");

                entity.Property(e => e.RegId).HasColumnName("RegID");
            });

            modelBuilder.Entity<BiMrStatuses>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BI_MR_Statuses", "dbo");

                entity.Property(e => e.BicreateDate)
                    .HasColumnName("BICreateDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.BidateLastModified)
                    .HasColumnName("BIDateLastModified")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.BilanguageCode)
                    .IsRequired()
                    .HasColumnName("BILanguageCode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.BinewResearchDate)
                    .HasColumnName("BInewResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.BirowStatus)
                    .IsRequired()
                    .HasColumnName("BIRowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClientReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.MrreportDate)
                    .HasColumnName("MRReportDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.MrrowStatus)
                    .IsRequired()
                    .HasColumnName("MRRowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BusinessImpactText>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BusinessImpactText", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ProofedBy).HasMaxLength(50);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIntroId)
                    .HasColumnName("startDate_IntroID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BusinessImpactText1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BusinessImpactText", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ProofedBy).HasMaxLength(50);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIntroId)
                    .HasColumnName("startDate_IntroID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BusinessImpactText2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BusinessImpactText", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ProofedBy).HasMaxLength(50);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIntroId)
                    .HasColumnName("startDate_IntroID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BusinessImpactText3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BusinessImpactText", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ProofedBy).HasMaxLength(50);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIntroId)
                    .HasColumnName("startDate_IntroID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BusinessimpactNf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BUSINESSIMPACT_NF", "dbo");

                entity.Property(e => e.AnalysisBusinessImpact).HasMaxLength(4000);

                entity.Property(e => e.ClientReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateLastModified).HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.Importance)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.HasKey(e => e.Category1)
                    .HasName("aaaaaCategory_PK");

                entity.ToTable("Category", "dbo");

                entity.Property(e => e.Category1)
                    .HasColumnName("category")
                    .HasMaxLength(50);

                entity.Property(e => e.Sortorder)
                    .HasColumnName("sortorder")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CfsUpdates>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CfsUpdates", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CitationBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CitationBase", "dbo");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SortOrder)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CitationBase1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CitationBase", "published");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SortOrder)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CitationBase2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CitationBase", "temporal");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SortOrder)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CitationBase3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CitationBase", "workflow");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SortOrder)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CitationMapSqlOracle>(entity =>
            {
                entity.HasKey(e => e.Idcitation)
                    .HasName("PK_IDCitationMapSqlOracle");

                entity.ToTable("CitationMapSqlOracle", "dbo");

                entity.Property(e => e.Idcitation)
                    .HasColumnName("IDCitation")
                    .ValueGeneratedNever();

                entity.Property(e => e.FoundationCe)
                    .IsRequired()
                    .HasColumnName("FoundationCE")
                    .HasMaxLength(32);

                entity.Property(e => e.StructureElementCe)
                    .IsRequired()
                    .HasColumnName("StructureElementCE")
                    .HasMaxLength(32);

                entity.Property(e => e.TracingDt).HasColumnName("TracingDT");
            });

            modelBuilder.Entity<CitationQn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CitationQn", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIdcitation)
                    .HasColumnName("startDate_IDCitation")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCode)
                    .HasColumnName("startDate_QnCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CitationQn1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CitationQn", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIdcitation)
                    .HasColumnName("startDate_IDCitation")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCode)
                    .HasColumnName("startDate_QnCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CitationQn2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CitationQn", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIdcitation)
                    .HasColumnName("startDate_IDCitation")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCode)
                    .HasColumnName("startDate_QnCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CitationQn3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CitationQn", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIdcitation)
                    .HasColumnName("startDate_IDCitation")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCode)
                    .HasColumnName("startDate_QnCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CitationRegulationQnStatuses>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CitationRegulationQnStatuses", "dbo");

                entity.Property(e => e.CitationRowStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnCountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.QnHeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.QnRegioncoe)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QnRowStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegRowStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CitationText>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CitationText", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.Citation)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Text).HasMaxLength(4000);

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CitationText1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CitationText", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.Citation)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Text).HasMaxLength(4000);

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CitationText2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CitationText", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.Citation)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Text).HasMaxLength(4000);

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CitationText3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CitationText", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.Citation)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Text).HasMaxLength(4000);

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CitationsForIntel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CitationsForIntel", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ClAllAnswerDtq>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.DecTreeCode, e.FacilityCode })
                    .HasName("PK_cl_all_AnswerDTQ_new");

                entity.ToTable("cl_all_AnswerDTQ", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.FacilityCode).HasMaxLength(50);

                entity.Property(e => e.Answer)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AnswerCreateBy).HasMaxLength(255);

                entity.Property(e => e.AnswerCreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AnswerLastModifiedBy).HasMaxLength(255);

                entity.Property(e => e.AnswerLastModifiedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CommentCreateBy).HasMaxLength(255);

                entity.Property(e => e.CommentCreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CommentLastModifiedBy).HasMaxLength(255);

                entity.Property(e => e.CommentLastModifiedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DtqlastModifiedDate)
                    .HasColumnName("DTQLastModifiedDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion)
                    .HasColumnName("majorVersion")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ClAllAnswerDtqWorkaround>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_all_AnswerDTQ_workaround", "dbo");

                entity.Property(e => e.Answer)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AnswerCreateBy).HasMaxLength(255);

                entity.Property(e => e.AnswerCreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AnswerLastModifiedBy).HasMaxLength(255);

                entity.Property(e => e.AnswerLastModifiedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CommentCreateBy).HasMaxLength(255);

                entity.Property(e => e.CommentCreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CommentLastModifiedBy).HasMaxLength(255);

                entity.Property(e => e.CommentLastModifiedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.DtqlastModifiedDate)
                    .HasColumnName("DTQLastModifiedDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ClAllClientDocument>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.Documenttitle })
                    .HasName("PK_cl_all_ClientDocuments");

                entity.ToTable("cl_all_ClientDocument", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Documenttitle)
                    .HasColumnName("documenttitle")
                    .HasMaxLength(50);

                entity.Property(e => e.Documenthyperlink)
                    .IsRequired()
                    .HasColumnName("documenthyperlink")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<ClAllClientLink>(entity =>
            {
                entity.ToTable("cl_all_ClientLink", "dbo");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Hyperlink)
                    .IsRequired()
                    .HasMaxLength(4000);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Linktitle)
                    .IsRequired()
                    .HasColumnName("linktitle")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<ClAllClientRegion>(entity =>
            {
                entity.HasKey(e => new { e.ServiceCode, e.Idclient, e.CountryCode, e.RegionCode });

                entity.ToTable("cl_all_ClientRegion", "dbo");

                entity.HasIndex(e => new { e.Idclient, e.CountryCode, e.RegionCode, e.SetCode, e.ServiceCode })
                    .HasName("IX_cl_all_ClientRegion")
                    .IsUnique();

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.IncludeFederal)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IndustrySector).HasDefaultValueSql("((1))");

                entity.Property(e => e.MasterCountryCode).HasMaxLength(2);

                entity.Property(e => e.MasterRegionCode).HasMaxLength(50);

                entity.Property(e => e.SetCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ClAllClientRegionIndustry>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.CountryCode, e.RegionCode, e.ServiceCode, e.IndCode });

                entity.ToTable("cl_all_ClientRegion_Industry", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.IndCode)
                    .HasColumnName("indCode")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ClAllClientRegionLang>(entity =>
            {
                entity.HasKey(e => new { e.ServiceCode, e.Idclient, e.CountryCode, e.RegionCode, e.LanguageCode });

                entity.ToTable("cl_all_ClientRegion_lang", "dbo");

                entity.HasIndex(e => new { e.Idclient, e.RegionCode, e.CountryCode, e.ServiceCode, e.LanguageCode })
                    .HasName("ix_CountryCodeServiceCodeLanguageCode");

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EndOfDelivery).HasColumnType("date");

                entity.Property(e => e.FroozenCpdate)
                    .HasColumnName("FroozenCPDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FrozenRrdate)
                    .HasColumnName("FrozenRRDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IncludeFields)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsRrupdate).HasColumnName("IsRRUpdate");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ServiceReportDate).HasColumnType("datetime");

                entity.Property(e => e.SnapShotToUse)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartOfDelivery).HasColumnType("date");

                entity.Property(e => e.TakeLatestCp).HasColumnName("TakeLatestCP");

                entity.Property(e => e.WebDelivery)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ClAllClientRegionLangOutput>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.CountryCode, e.RegionCode, e.ServiceCode, e.LanguageCode, e.FormatId });

                entity.ToTable("cl_all_ClientRegion_Lang_Output", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.OutPutFileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OutPutLink)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClAllClientRegionProductType>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.CountryCode, e.RegionCode, e.ServiceCode, e.ProductTypeCode })
                    .HasName("PK_cl_all_ClientRegion_ProductType_1");

                entity.ToTable("cl_all_ClientRegion_ProductType", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.ProductTypeCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Lub')");
            });

            modelBuilder.Entity<ClAllFacilityRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_all_FacilityRegion", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ClAllGeographicTreeList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_all_GeographicTree_list", "dbo");

                entity.Property(e => e.Child).HasMaxLength(50);

                entity.Property(e => e.GeographicType)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Parent).HasMaxLength(50);
            });

            modelBuilder.Entity<ClAllGeographicTreeList2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_all_GeographicTree_list_2", "dbo");

                entity.Property(e => e.Child).HasMaxLength(102);

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.Idarea).HasColumnName("IDArea");

                entity.Property(e => e.Parent).HasMaxLength(52);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.ResourceClass)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.ResourceKey).HasMaxLength(52);

                entity.Property(e => e.ResourceValue).HasMaxLength(300);
            });

            modelBuilder.Entity<ClAllHeadingMapBase>(entity =>
            {
                entity.HasKey(e => new { e.ClientHeadingCode, e.Idclient });

                entity.ToTable("cl_all_HeadingMap_Base", "dbo");

                entity.Property(e => e.ClientHeadingCode).HasMaxLength(200);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.ParentClientHeadingCode).HasMaxLength(200);
            });

            modelBuilder.Entity<ClAllHeadingMapText>(entity =>
            {
                entity.HasKey(e => new { e.ClientHeadingCode, e.Idclient, e.LanguageCode });

                entity.ToTable("cl_all_HeadingMap_Text", "dbo");

                entity.Property(e => e.ClientHeadingCode).HasMaxLength(200);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ClientHeadingText).HasMaxLength(300);
            });

            modelBuilder.Entity<ClAllOutputFormats>(entity =>
            {
                entity.HasKey(e => e.FormatId);

                entity.ToTable("cl_all_OutputFormats", "dbo");

                entity.Property(e => e.DocumentFormat)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClAllUserInterestArea>(entity =>
            {
                entity.HasKey(e => new { e.EmailAddress, e.Idarea });

                entity.ToTable("cl_all_UserInterestArea", "dbo");

                entity.Property(e => e.EmailAddress).HasMaxLength(200);

                entity.Property(e => e.Idarea).HasColumnName("IDArea");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");
            });

            modelBuilder.Entity<ClAllUserInterestCountry>(entity =>
            {
                entity.HasKey(e => new { e.EmailAddress, e.CountryCode });

                entity.ToTable("cl_all_UserInterestCountry", "dbo");

                entity.Property(e => e.EmailAddress).HasMaxLength(200);

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");
            });

            modelBuilder.Entity<ClAllUserInterestEmailAddress>(entity =>
            {
                entity.HasKey(e => e.EmailAddress);

                entity.ToTable("cl_all_UserInterestEmailAddress", "dbo");

                entity.Property(e => e.EmailAddress).HasMaxLength(200);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<ClAllUserInterestHeading>(entity =>
            {
                entity.HasKey(e => new { e.EmailAddress, e.HeadingCode });

                entity.ToTable("cl_all_UserInterestHeading", "dbo");

                entity.Property(e => e.EmailAddress).HasMaxLength(200);

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");
            });

            modelBuilder.Entity<ClAllUserInterestLanguage>(entity =>
            {
                entity.HasKey(e => new { e.EmailAddress, e.ContentLanguageCode, e.OrderOfPreference });

                entity.ToTable("cl_all_UserInterestLanguage", "dbo");

                entity.Property(e => e.EmailAddress).HasMaxLength(200);

                entity.Property(e => e.ContentLanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.OrderOfPreference).HasDefaultValueSql("((1))");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");
            });

            modelBuilder.Entity<ClAllUserInterestRegion>(entity =>
            {
                entity.HasKey(e => new { e.EmailAddress, e.CountryCode, e.RegionCode });

                entity.ToTable("cl_all_UserInterestRegion", "dbo");

                entity.Property(e => e.EmailAddress).HasMaxLength(200);

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");
            });

            modelBuilder.Entity<ClAllUserInterestRole>(entity =>
            {
                entity.HasKey(e => new { e.EmailAddress, e.RoleCode });

                entity.ToTable("cl_all_UserInterestRole", "dbo");

                entity.Property(e => e.EmailAddress).HasMaxLength(200);

                entity.Property(e => e.RoleCode)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");
            });

            modelBuilder.Entity<ClAllUserInterestService>(entity =>
            {
                entity.HasKey(e => new { e.EmailAddress, e.ServiceCode });

                entity.ToTable("cl_all_UserInterestService", "dbo");

                entity.Property(e => e.EmailAddress).HasMaxLength(200);

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");
            });

            modelBuilder.Entity<ClAllUserRoleBase>(entity =>
            {
                entity.HasKey(e => e.RoleCode)
                    .HasName("PK_cl_all_UserRole");

                entity.ToTable("cl_all_UserRole_base", "dbo");

                entity.Property(e => e.RoleCode)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Enter a description')");

                entity.Property(e => e.SortOrder)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClAllUserRoleText>(entity =>
            {
                entity.HasKey(e => new { e.RoleCode, e.LanguageCode });

                entity.ToTable("cl_all_UserRole_text", "dbo");

                entity.Property(e => e.RoleCode)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RoleName).HasMaxLength(100);
            });

            modelBuilder.Entity<ClApClientScoreCards>(entity =>
            {
                entity.HasKey(e => e.ClientId);

                entity.ToTable("cl_ap_ClientScoreCards", "dbo");

                entity.Property(e => e.ClientId).ValueGeneratedNever();

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastLineRange)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClApItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_ap_Items", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ClApItemsPublished>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_ap_Items_Published", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ClApMapHedingCodes>(entity =>
            {
                entity.HasKey(e => new { e.ClientHeadingCode, e.HeadingCode, e.ClientId });

                entity.ToTable("cl_ap_mapHedingCodes", "dbo");

                entity.Property(e => e.ClientHeadingCode).HasMaxLength(200);

                entity.Property(e => e.HeadingCode).HasMaxLength(15);
            });

            modelBuilder.Entity<ClApScoreCard>(entity =>
            {
                entity.HasKey(e => e.ScoreCardId)
                    .HasName("PK_cl_ap_ScoreCardFindings_1");

                entity.ToTable("cl_ap_ScoreCard", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CutOffDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DualLanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.HeadingSet).HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.ResearchDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ClApScoreCardBase>(entity =>
            {
                entity.HasKey(e => new { e.ScoreCardId, e.QnCode });

                entity.ToTable("cl_ap_ScoreCard_Base", "dbo");

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Changed)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.LastReviewedDate).HasColumnType("datetime");

                entity.Property(e => e.LinkedQnCodes)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LinkedRegions)
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OriginalIndustrySector).HasDefaultValueSql("((1))");

                entity.Property(e => e.OriginalQnHeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.OriginalQnRegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OriginalSortCode).HasDefaultValueSql("((1))");

                entity.Property(e => e.ReviewedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ClApScoreCardClientAnswer>(entity =>
            {
                entity.HasKey(e => new { e.ScoreCardId, e.QnCode, e.SubmitDate, e.FacilityCode, e.Idclient });

                entity.ToTable("cl_ap_ScoreCard_Client_Answer", "dbo");

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SubmitDate).HasColumnType("date");

                entity.Property(e => e.FacilityCode).HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.ActionItem)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Answer)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.Consequance)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Effect)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FindingTitle)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Likelihood)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PercentageCompleted)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Recommendation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RequiredCloseOutDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ResponseCost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ResposiblePerson).HasMaxLength(200);

                entity.Property(e => e.RiskExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RiskFactor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SystemFactor)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClApScoreCardClientBack>(entity =>
            {
                entity.HasKey(e => new { e.ScoreCardId, e.SubmitDate, e.Idclient, e.FacilityCode })
                    .HasName("PK_cl_ap_ScoreCard_Client_Back_1");

                entity.ToTable("cl_ap_ScoreCard_Client_Back", "dbo");

                entity.Property(e => e.SubmitDate).HasColumnType("date");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.FacilityCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ClApScoreCardText>(entity =>
            {
                entity.HasKey(e => new { e.ScoreCardId, e.QnCode, e.LanguageCode })
                    .HasName("PK_cl_ap_ScoreCardFinding_Text_1");

                entity.ToTable("cl_ap_ScoreCard_Text", "dbo");

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.OriginalCitationLink).HasMaxLength(250);
            });

            modelBuilder.Entity<ClApScreeningQuestionBase>(entity =>
            {
                entity.HasKey(e => e.ScreeningQuestionId)
                    .HasName("PK_cl_ap_ScreeningQuestionBase_new");

                entity.ToTable("cl_ap_ScreeningQuestionBase", "dbo");

                entity.Property(e => e.BaseHeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<ClApScreeningQuestionHeadings>(entity =>
            {
                entity.HasKey(e => new { e.ScreeningQuestionId, e.HeadingCode })
                    .HasName("PK_cl_ap_ScreeningQuestion_Headings_new");

                entity.ToTable("cl_ap_ScreeningQuestion_Headings", "dbo");

                entity.Property(e => e.HeadingCode).HasMaxLength(15);
            });

            modelBuilder.Entity<ClApScreeningQuestionText>(entity =>
            {
                entity.HasKey(e => new { e.ScreeningQuestionId, e.LanguageCode })
                    .HasName("PK_cl_ap_ScreeningQuestionText_new");

                entity.ToTable("cl_ap_ScreeningQuestionText", "dbo");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ScreeningQuestion)
                    .IsRequired()
                    .HasMaxLength(350);
            });

            modelBuilder.Entity<ClClientRegionForCm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_ClientRegion_ForCM", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SetCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ClCmRegulationExtracted>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.CountryCode, e.RegionCode, e.ServiceCode, e.RegId, e.LanguageCode });

                entity.ToTable("cl_cm_Regulation_extracted", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.SnapshotToUse)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(N'enhesaSQL')");
            });

            modelBuilder.Entity<ClCmRegulationExtractedSw>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.CountryCode, e.RegionCode, e.ServiceCode, e.RegId, e.LanguageCode })
                    .HasName("PK_cl_cm_Regulation_extracted_sw_2");

                entity.ToTable("cl_cm_Regulation_extracted_sw", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.SnapshotToUse).HasMaxLength(128);
            });

            modelBuilder.Entity<ClCmRegulationExtractedZz>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.CountryCode, e.RegionCode, e.ServiceCode, e.RegId, e.LanguageCode })
                    .HasName("PK_cl_cm_Regulation_extracted_1");

                entity.ToTable("cl_cm_Regulation_extracted_zz", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.SnapshotToUse)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(N'enhesaSQL')");
            });

            modelBuilder.Entity<ClCmRegulationExtractedZzSw>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.CountryCode, e.RegionCode, e.ServiceCode, e.RegId, e.LanguageCode })
                    .HasName("PK_cl_cm_Regulation_extracted_zz_sw_1");

                entity.ToTable("cl_cm_Regulation_extracted_zz_sw", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.SnapshotToUse)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(N'enhesaSQL')");
            });

            modelBuilder.Entity<ClCmRegulationList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_cm_Regulation_list", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SnapshotToUse).HasMaxLength(128);
            });

            modelBuilder.Entity<ClCmRequirementExtracted>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.CountryCode, e.RegionCode, e.ServiceCode, e.QnCode, e.LanguageCode })
                    .HasName("PK_cl_cm_Requirement_extracted_zz");

                entity.ToTable("cl_cm_Requirement_extracted", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.SnapshotToUse)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(N'enhesaSQL')");
            });

            modelBuilder.Entity<ClCmRequirementExtractedSw>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.CountryCode, e.RegionCode, e.ServiceCode, e.QnCode, e.LanguageCode })
                    .HasName("PK_cl_cm_Requirement_extracted_zz_sw");

                entity.ToTable("cl_cm_Requirement_extracted_sw", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.ResearchDate).HasColumnType("datetime");

                entity.Property(e => e.SnapshotToUse)
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(N'enhesaSQL')");
            });

            modelBuilder.Entity<ClCmRequirementExtractedZz>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.CountryCode, e.RegionCode, e.ServiceCode, e.QnCode, e.LanguageCode })
                    .HasName("PK_cl_cm_Requirement_extracted_2");

                entity.ToTable("cl_cm_Requirement_extracted_zz", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.SnapshotToUse).HasMaxLength(128);
            });

            modelBuilder.Entity<ClCmRequirementExtractedZzSw>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.CountryCode, e.RegionCode, e.ServiceCode, e.QnCode, e.LanguageCode })
                    .HasName("PK_cl_cm_Requirement_extracted_sw_2");

                entity.ToTable("cl_cm_Requirement_extracted_zz_sw", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.ResearchDate).HasColumnType("datetime");

                entity.Property(e => e.SnapshotToUse).HasMaxLength(128);
            });

            modelBuilder.Entity<ClCoEnhesaEuropeanQuiz>(entity =>
            {
                entity.HasKey(e => new { e.CompleteName, e.TimeStamp });

                entity.ToTable("cl_co_EnhesaEuropeanQuiz", "dbo");

                entity.Property(e => e.CompleteName).HasMaxLength(255);

                entity.Property(e => e.TimeStamp)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.Question1).HasMaxLength(50);

                entity.Property(e => e.Question10).HasMaxLength(50);

                entity.Property(e => e.Question2).HasMaxLength(50);

                entity.Property(e => e.Question3).HasMaxLength(50);

                entity.Property(e => e.Question4).HasMaxLength(50);

                entity.Property(e => e.Question5).HasMaxLength(50);

                entity.Property(e => e.Question6).HasMaxLength(50);

                entity.Property(e => e.Question7).HasMaxLength(50);

                entity.Property(e => e.Question8).HasMaxLength(50);

                entity.Property(e => e.Question9).HasMaxLength(50);

                entity.Property(e => e.Tel).HasMaxLength(50);
            });

            modelBuilder.Entity<ClDirepceRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("cl_DIREPCE_Region", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ClFeedBackIdtopicList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_FeedBackIDTopic_list", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");
            });

            modelBuilder.Entity<ClFlashEmails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_FlashEmails", "dbo");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.SIndex)
                    .IsRequired()
                    .HasColumnName("sIndex")
                    .HasMaxLength(2);
            });

            modelBuilder.Entity<ClHlHelpLinkBase>(entity =>
            {
                entity.HasKey(e => e.IdhelpLink)
                    .HasName("PK_cl_all_HelpLink_Base");

                entity.ToTable("cl_hl_HelpLink_Base", "dbo");

                entity.Property(e => e.IdhelpLink)
                    .HasColumnName("IDHelpLink")
                    .ValueGeneratedNever();

                entity.Property(e => e.ContactingUsername).HasMaxLength(50);

                entity.Property(e => e.DateOfAnswer).HasColumnType("date");

                entity.Property(e => e.Hyperlink)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.RequestingUsername).HasMaxLength(50);
            });

            modelBuilder.Entity<ClHlHelpLinkCountryCodes>(entity =>
            {
                entity.HasKey(e => new { e.IdhelpLink, e.CountryCode })
                    .HasName("PK_cl_all_HelpLink_CountryCodes");

                entity.ToTable("cl_hl_HelpLink_CountryCodes", "dbo");

                entity.Property(e => e.IdhelpLink).HasColumnName("IDHelpLink");

                entity.Property(e => e.CountryCode).HasMaxLength(2);
            });

            modelBuilder.Entity<ClHlHelpLinkText>(entity =>
            {
                entity.HasKey(e => new { e.IdhelpLink, e.LanguageCode })
                    .HasName("PK_cl_all_HelpLink_Text");

                entity.ToTable("cl_hl_HelpLink_Text", "dbo");

                entity.Property(e => e.IdhelpLink).HasColumnName("IDHelpLink");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(100);
            });

            modelBuilder.Entity<ClLgDefSortEn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_lg_DefSort_en", "dbo");

                entity.Property(e => e.RegId).HasColumnName("RegID");
            });

            modelBuilder.Entity<ClMrAuthorities>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_Authorities", "dbo");

                entity.Property(e => e.City).HasMaxLength(100);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Hyperlink).HasMaxLength(200);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Street).HasMaxLength(200);

                entity.Property(e => e.ZipCode).HasMaxLength(20);
            });

            modelBuilder.Entity<ClMrCommentText>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.Idtopic })
                    .HasName("PK_cl_mr_Comment_text_new");

                entity.ToTable("cl_mr_Comment_text", "dbo");

                entity.HasIndex(e => e.RowId)
                    .HasName("IX_cl_mr_Comment_text")
                    .IsUnique();

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.Biranking)
                    .HasColumnName("BIRanking")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowId)
                    .HasColumnName("rowId")
                    .HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ClMrFeedBackActionItemsCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_FeedBackActionItemsCount", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.IssueOwnerCounter).HasMaxLength(10);
            });

            modelBuilder.Entity<ClMrFeedBackActionItemsTopicsValid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_FeedBackActionItemsTopics_valid", "dbo");

                entity.Property(e => e.ActionStatus).HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.ImpactRanking)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<ClMrFeedBackClosedItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_FeedBack_ClosedItems", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");
            });

            modelBuilder.Entity<ClMrFeedBackEmailList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_FeedBack_Email_list", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.FnamePerson)
                    .HasColumnName("FNamePerson")
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCodeCountry)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeTopic)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModified).HasColumnType("datetime");

                entity.Property(e => e.LnamePerson)
                    .HasColumnName("LNamePerson")
                    .HasMaxLength(60);

                entity.Property(e => e.Rapid).HasMaxLength(4000);

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<ClMrFeedBackEmailList1>(entity =>
            {
                entity.HasKey(e => new { e.Email, e.FeedBackHeadingCode });

                entity.ToTable("cl_mr_FeedBackEmailList", "dbo");

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.FeedBackHeadingCode).HasMaxLength(10);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");
            });

            modelBuilder.Entity<ClMrFeedBackHeadingCorrespondanceList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_FeedBackHeadingCorrespondance_list", "dbo");

                entity.Property(e => e.ChildHeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.HeadingCode).HasMaxLength(2);
            });

            modelBuilder.Entity<ClMrFeedBackInvistaMrList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_FeedBackInvista_mr_list", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");
            });

            modelBuilder.Entity<ClMrFeedBackMailingListNotvalid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_FeedBackMailingList_notvalid", "dbo");

                entity.Property(e => e.Countries).HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Ehs)
                    .HasColumnName("EHS")
                    .HasMaxLength(255);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.EnhesaFlash).HasColumnName("ENHESA_Flash");

                entity.Property(e => e.FnamePerson)
                    .HasColumnName("FNamePerson")
                    .HasMaxLength(50);

                entity.Property(e => e.Glb).HasColumnName("GLB");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");

                entity.Property(e => e.LanguagesOfPreference).HasMaxLength(255);

                entity.Property(e => e.LnamePerson)
                    .HasColumnName("LNamePerson")
                    .HasMaxLength(60);

                entity.Property(e => e.Op)
                    .HasColumnName("OP")
                    .HasMaxLength(50);

                entity.Property(e => e.Organisation).HasMaxLength(180);
            });

            modelBuilder.Entity<ClMrFeedBackMailingListValid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_FeedBackMailingList_valid", "dbo");

                entity.Property(e => e.Countries).HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Ehs)
                    .HasColumnName("EHS")
                    .HasMaxLength(255);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.EnhesaFlash).HasColumnName("ENHESA_Flash");

                entity.Property(e => e.FnamePerson)
                    .HasColumnName("FNamePerson")
                    .HasMaxLength(50);

                entity.Property(e => e.Glb).HasColumnName("GLB");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");

                entity.Property(e => e.LanguagesOfPreference).HasMaxLength(255);

                entity.Property(e => e.LnamePerson)
                    .HasColumnName("LNamePerson")
                    .HasMaxLength(60);

                entity.Property(e => e.Op)
                    .HasColumnName("OP")
                    .HasMaxLength(50);

                entity.Property(e => e.Organisation).HasMaxLength(180);
            });

            modelBuilder.Entity<ClMrFeedBackMainHeadingsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_FeedBackMainHeadings_list", "dbo");

                entity.Property(e => e.FeedBackHeadingCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.MainCategory)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SortOrder)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClMrFeedBackMainHeadingsListWithoutMappedHeading>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_FeedBackMainHeadings_list_WithoutMappedHeading", "dbo");

                entity.Property(e => e.FeedBackHeadingCode).HasMaxLength(10);

                entity.Property(e => e.MainCategory)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SortOrder)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClMrFeedBackMaxVersion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_FeedBackMaxVersion", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");
            });

            modelBuilder.Entity<ClMrFeedBackMaxVersionAllMrs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_FeedBack_MaxVersionAllMRs", "dbo");

                entity.Property(e => e.ActionStatus).HasMaxLength(50);

                entity.Property(e => e.ComplianceRanking).HasMaxLength(10);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.ImpactRanking)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.IssueOwnerCounter).HasMaxLength(10);
            });

            modelBuilder.Entity<ClMrFeedBackMaxVersionList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_FeedBackMaxVersion_list", "dbo");

                entity.Property(e => e.ActionStatus).HasMaxLength(50);

                entity.Property(e => e.ComplianceRanking).HasMaxLength(10);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.FeedBackHeadingCode).HasMaxLength(10);

                entity.Property(e => e.GroupNa)
                    .HasColumnName("GroupNA")
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.ImpactRanking)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.IssueOwner).HasMaxLength(100);

                entity.Property(e => e.IssueOwnerCounter).HasMaxLength(10);

                entity.Property(e => e.LastModified).HasColumnType("datetime");
            });

            modelBuilder.Entity<ClMrFeedBackMrissueOwnerCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_FeedBackMRIssueOwnerCount", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.IssueOwnerCounter).HasMaxLength(10);

                entity.Property(e => e.MrissueOwner).HasColumnName("MRIssueOwner");
            });

            modelBuilder.Entity<ClMrFeedBackNotrankedCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_FeedBackNotrankedCount", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.IssueOwnerCounter).HasMaxLength(10);
            });

            modelBuilder.Entity<ClMrFeedBackSqlIssuesperUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_FeedBack_SqlIssuesperUser", "dbo");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FeedBackHeadingCode).HasMaxLength(10);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.MainCategory)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ClMrFeedBackUpdate1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_FeedBack_update1", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");
            });

            modelBuilder.Entity<ClMrFeedBacknotInMailingListTopicsValid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_FeedBacknotInMailingListTopics_valid", "dbo");

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");
            });

            modelBuilder.Entity<ClMrHeadingFeedBackText>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.HeadingCode, e.LanguageCode })
                    .HasName("PK_cl_mr_HeadingFeedBack_text_new");

                entity.ToTable("cl_mr_HeadingFeedBack_text", "dbo");

                entity.HasIndex(e => new { e.Idclient, e.HeadingCode })
                    .HasName("IX_Non_cl_mr_HeadingFeedBack_text ")
                    .HasFilter("([LanguageCode]='en')");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.FeedBackHeadingCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.MainCategory)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SecondaryCategory).HasMaxLength(150);

                entity.Property(e => e.SortOrder)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('a')");
            });

            modelBuilder.Entity<ClMrIssueOwnerCounterList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_IssueOwnerCounter_list", "dbo");

                entity.Property(e => e.FnamePerson)
                    .HasColumnName("FNamePerson")
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.IssueOwnerCounter).HasMaxLength(10);

                entity.Property(e => e.LnamePerson)
                    .HasColumnName("LNamePerson")
                    .HasMaxLength(60);
            });

            modelBuilder.Entity<ClMrMonitoringReportsBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_MonitoringReports_base", "dbo");

                entity.Property(e => e.AdoptionDate).HasColumnType("datetime");

                entity.Property(e => e.ClientReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ContactType)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcontact).HasColumnName("IDContact");

                entity.Property(e => e.IdcontentProxy).HasColumnName("IDContentProxy");

                entity.Property(e => e.Idproduct)
                    .HasColumnName("IDProduct")
                    .HasMaxLength(10);

                entity.Property(e => e.IdservicesProxy).HasColumnName("IDServicesProxy");

                entity.Property(e => e.Idstatus).HasColumnName("IDStatus");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.Importance)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InternalCode).HasMaxLength(50);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.SetCode).HasMaxLength(50);

                entity.Property(e => e.StatusGroup).HasMaxLength(12);
            });

            modelBuilder.Entity<ClMrMonitoringReportsBaseTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_MonitoringReports_base_test", "dbo");

                entity.Property(e => e.AdoptionDate).HasColumnType("datetime");

                entity.Property(e => e.ClientReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ContactType)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcontact).HasColumnName("IDContact");

                entity.Property(e => e.IdcontentProxy).HasColumnName("IDContentProxy");

                entity.Property(e => e.Idproduct)
                    .HasColumnName("IDProduct")
                    .HasMaxLength(10);

                entity.Property(e => e.IdservicesProxy).HasColumnName("IDServicesProxy");

                entity.Property(e => e.Idstatus).HasColumnName("IDStatus");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.Importance)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InternalCode).HasMaxLength(50);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.SetCode).HasMaxLength(50);

                entity.Property(e => e.StatusGroup).HasMaxLength(12);
            });

            modelBuilder.Entity<ClMrNewsArea>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_NewsArea", "dbo");

                entity.Property(e => e.Area)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Idarea).HasColumnName("IDArea");
            });

            modelBuilder.Entity<ClMrNewsByArea>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_NewsByArea", "dbo");

                entity.Property(e => e.Area)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Idarea).HasColumnName("IDArea");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.Rapid).HasMaxLength(4000);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<ClMrNewsCc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_NewsCC", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.ImplementationDate).HasColumnType("datetime");

                entity.Property(e => e.Remarks).HasMaxLength(4000);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ClMrNewsContracted>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_NewsContracted", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MaxReportDate).HasColumnType("datetime");

                entity.Property(e => e.MinReportDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ClMrNewsHeadings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_NewsHeadings", "dbo");

                entity.Property(e => e.Area)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.Msc)
                    .HasColumnName("MSC")
                    .HasMaxLength(2);

                entity.Property(e => e.Rapid).HasMaxLength(4000);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<ClMrProcesses>(entity =>
            {
                entity.HasKey(e => e.FacilityCode);

                entity.ToTable("cl_mr_Processes", "dbo");

                entity.Property(e => e.FacilityCode).HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ClMrSelectListforIssueOwnerValid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_mr_SelectListforIssueOwner_valid", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.FeedBackHeadingCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.FnamePerson)
                    .HasColumnName("FNamePerson")
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LnamePerson)
                    .HasColumnName("LNamePerson")
                    .HasMaxLength(60);

                entity.Property(e => e.MrreportAlert).HasColumnName("MRReportAlert");

                entity.Property(e => e.Name).HasMaxLength(111);
            });

            modelBuilder.Entity<ClMrTipoftheMonthEmailText>(entity =>
            {
                entity.HasKey(e => new { e.Month, e.Year, e.LanguageCode })
                    .HasName("PK_cl_mr_TipoftheMonthEmail_text_1");

                entity.ToTable("cl_mr_TipoftheMonthEmail_text", "dbo");

                entity.Property(e => e.LanguageCode).HasMaxLength(6);
            });

            modelBuilder.Entity<ClMrTipoftheMonthText>(entity =>
            {
                entity.HasKey(e => new { e.Month, e.Year });

                entity.ToTable("cl_mr_TipoftheMonth_text", "dbo");
            });

            modelBuilder.Entity<ClMrTopicFacilities>(entity =>
            {
                entity.HasKey(e => new { e.IdClient, e.IdTopic, e.FacilityCode });

                entity.ToTable("cl_mr_TopicFacilities", "dbo");

                entity.Property(e => e.FacilityCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ClPaProductTypeBase>(entity =>
            {
                entity.HasKey(e => e.ProductTypeCode);

                entity.ToTable("cl_pa_ProductTypeBase", "dbo");

                entity.Property(e => e.ProductTypeCode)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClPaProductTypeClientRegion>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.CountryCode, e.RegionCode, e.ServiceCode, e.ProductTypeCode });

                entity.ToTable("cl_pa_ProductType_ClientRegion", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.ProductTypeCode)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClPaProductTypeQn>(entity =>
            {
                entity.HasKey(e => new { e.ProductTypeCode, e.QnCode });

                entity.ToTable("cl_pa_ProductTypeQn", "dbo");

                entity.Property(e => e.ProductTypeCode)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ClPaProductTypeText>(entity =>
            {
                entity.HasKey(e => new { e.ProductTypeCode, e.LanguageCode });

                entity.ToTable("cl_pa_ProductTypeText", "dbo");

                entity.Property(e => e.ProductTypeCode)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ProductTypeText).HasMaxLength(50);
            });

            modelBuilder.Entity<ClPaTopicAreaBase>(entity =>
            {
                entity.HasKey(e => e.TopicAreaId);

                entity.ToTable("cl_pa_TopicAreaBase", "dbo");

                entity.Property(e => e.Archived).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ClPaTopicAreaQn>(entity =>
            {
                entity.HasKey(e => new { e.TopicAreaId, e.QnCode });

                entity.ToTable("cl_pa_TopicAreaQn", "dbo");

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ClPaTopicAreaText>(entity =>
            {
                entity.HasKey(e => new { e.TopicAreaId, e.LanguageCode });

                entity.ToTable("cl_pa_TopicAreaText", "dbo");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.TopicAreaText).HasMaxLength(100);
            });

            modelBuilder.Entity<ClRrAnswerQn>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.QnCode, e.FacilityCode })
                    .HasName("PK_cl_rr_AnswerQn_new");

                entity.ToTable("cl_rr_AnswerQn", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FacilityCode).HasMaxLength(50);

                entity.Property(e => e.Answer)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AnswerCreateBy).HasMaxLength(255);

                entity.Property(e => e.AnswerCreateDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AnswerLastModifiedBy).HasMaxLength(255);

                entity.Property(e => e.AnswerLastModifiedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Comment).HasMaxLength(2000);

                entity.Property(e => e.CommentCreateBy).HasMaxLength(255);

                entity.Property(e => e.CommentCreateDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CommentLastModifiedBy).HasMaxLength(255);

                entity.Property(e => e.CommentLastModifiedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MajorVersion)
                    .HasColumnName("majorVersion")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.QnLastModifiedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ReferenceMaterial).HasMaxLength(255);
            });

            modelBuilder.Entity<ClRrAnswerRegulation>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.RegId, e.FacilityCode })
                    .HasName("PK_cl_rr_AnswerRegulation_new");

                entity.ToTable("cl_rr_AnswerRegulation", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.FacilityCode).HasMaxLength(50);

                entity.Property(e => e.Answer)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AnswerCreateBy).HasMaxLength(255);

                entity.Property(e => e.AnswerCreateDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AnswerLastModifiedBy).HasMaxLength(255);

                entity.Property(e => e.AnswerLastModifiedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Comment).HasMaxLength(2000);

                entity.Property(e => e.CommentCreateBy).HasMaxLength(255);

                entity.Property(e => e.CommentCreateDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CommentLastModifiedBy).HasMaxLength(255);

                entity.Property(e => e.CommentLastModifiedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MajorVersion)
                    .HasColumnName("majorVersion")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ClRrCutOffDates>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.FacilityCode })
                    .HasName("PK_cl_rr_CutOffDates_1");

                entity.ToTable("cl_rr_CutOffDates", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.FacilityCode).HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CutOffDate).HasColumnType("datetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ClRrDecTreeHierarchy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_rr_DecTreeHierarchy", "dbo");

                entity.Property(e => e.DecTreeCodeChild)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.DecTreeCodeParent)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<ClRrDtq1Valid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_rr_DTQ1_valid", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryCodeDtq)
                    .HasColumnName("CountryCodeDTQ")
                    .HasMaxLength(2);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.DtqmajorVersion).HasColumnName("DTQMajorVersion");

                entity.Property(e => e.DtqregionCode)
                    .IsRequired()
                    .HasColumnName("DTQRegionCode")
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ClRrDtqInfoText>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_rr_DTQ_info_text", "dbo");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.DtqmajorVersion).HasColumnName("DTQMajorVersion");

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeDtq)
                    .IsRequired()
                    .HasColumnName("LanguageCodeDTQ")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeRegulations)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ClRrDtqParentList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_RR_DTQ_ParentList", "dbo");

                entity.Property(e => e.CountryCodeDtq)
                    .HasColumnName("CountryCodeDTQ")
                    .HasMaxLength(2);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.DecTreeCodeParent)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.DtqmajorVersion).HasColumnName("DTQMajorVersion");

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCodeDtqs)
                    .IsRequired()
                    .HasColumnName("languageCodeDTQs")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeHeadings)
                    .IsRequired()
                    .HasColumnName("languageCodeHeadings")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ClRrDtqValid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_rr_DTQ_valid", "dbo");

                entity.Property(e => e.CountryCodeDtq)
                    .HasColumnName("CountryCodeDTQ")
                    .HasMaxLength(2);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.DtqlastModifiedDate)
                    .HasColumnName("DTQLastModifiedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtqmajorVersion).HasColumnName("DTQMajorVersion");

                entity.Property(e => e.DtqregionCode)
                    .IsRequired()
                    .HasColumnName("DTQRegionCode")
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCodeDtqs)
                    .IsRequired()
                    .HasColumnName("languageCodeDTQs")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeHeadings)
                    .IsRequired()
                    .HasColumnName("languageCodeHeadings")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ClRrDtqanswersAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_rr_DTQAnswers_all", "dbo");

                entity.Property(e => e.Answer).HasMaxLength(10);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ClRrDtqanswersValid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_rr_DTQAnswers_valid", "dbo");

                entity.Property(e => e.Answer).HasMaxLength(10);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Dtqcode)
                    .HasColumnName("DTQCode")
                    .HasMaxLength(15);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idanswer).HasColumnName("IDAnswer");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcontact)
                    .IsRequired()
                    .HasColumnName("IDContact")
                    .HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.ValidityDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ClRrDtqchildsValid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_rr_DTQChilds_valid", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DecTreeCodeChild)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.DecTreeCodeParent)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.DtqmajorVersion).HasColumnName("DTQMajorVersion");

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ClRrDtqregValid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_rr_DTQReg_valid", "dbo");

                entity.Property(e => e.CountryCodeDtq)
                    .HasColumnName("CountryCodeDTQ")
                    .HasMaxLength(2);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.DtqmajorVersion).HasColumnName("DTQMajorVersion");

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCodeDtqs)
                    .IsRequired()
                    .HasColumnName("languageCodeDTQs")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeHeadings)
                    .IsRequired()
                    .HasColumnName("languageCodeHeadings")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ClRrReg1Inactive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_rr_Reg1_inactive", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCodeRegs)
                    .IsRequired()
                    .HasColumnName("languageCodeRegs")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ClRrReg1Valid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_rr_Reg1_valid", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCodeRegs)
                    .IsRequired()
                    .HasColumnName("languageCodeRegs")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ClRrRegAnswersValid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_rr_RegAnswers_valid", "dbo");

                entity.Property(e => e.Answer).HasMaxLength(10);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Dtqcode)
                    .HasColumnName("DTQCode")
                    .HasMaxLength(15);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idanswer).HasColumnName("IDAnswer");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcontact)
                    .IsRequired()
                    .HasColumnName("IDContact")
                    .HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.ValidityDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ClRrRegInactive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_rr_Reg_inactive", "dbo");

                entity.Property(e => e.ConsolidatedHyperlink).HasMaxLength(255);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCodeHeadings)
                    .IsRequired()
                    .HasColumnName("languageCodeHeadings")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeRegulations)
                    .IsRequired()
                    .HasColumnName("languageCodeRegulations")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegHyperlink).HasMaxLength(255);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegSummary).HasMaxLength(4000);

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ClRrRegValid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_rr_Reg_valid", "dbo");

                entity.Property(e => e.ConsolidatedHyperlink).HasMaxLength(255);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCodeHeadings)
                    .IsRequired()
                    .HasColumnName("languageCodeHeadings")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeRegulations)
                    .IsRequired()
                    .HasColumnName("languageCodeRegulations")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegHyperlink).HasMaxLength(255);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegSummary).HasMaxLength(4000);

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegulationLastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegulationValidityDate).HasColumnType("datetime");

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ClRrRegulation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_rr_Regulation", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.IndCode).HasColumnName("indCode");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClRrRegulationOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cl_rr_Regulation_old", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.IndCode).HasColumnName("indCode");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.HasKey(e => e.Idclient)
                    .HasName("aaaaaCLIENT_PK");

                entity.ToTable("CLIENT", "dbo");

                entity.HasIndex(e => e.ClientName);

                entity.HasIndex(e => e.IdcontentProxy)
                    .HasName("IX_CLIENT_1");

                entity.HasIndex(e => e.IdservicesProxy)
                    .HasName("IX_CLIENT");

                entity.Property(e => e.Idclient)
                    .HasColumnName("IDClient")
                    .ValueGeneratedNever();

                entity.Property(e => e.AccountManager).HasDefaultValueSql("((43))");

                entity.Property(e => e.AuthS3bucketName)
                    .HasColumnName("AuthS3BucketName")
                    .HasMaxLength(100);

                entity.Property(e => e.BifroozenDate)
                    .HasColumnName("BIFroozenDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.BounceFrom)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BounceTo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ClientIndustrySector).HasDefaultValueSql("((1))");

                entity.Property(e => e.ClientLogoUrl)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('http://www.ehsmonitor.com/demo/images/Enhesa_Boule.gif')");

                entity.Property(e => e.ClientLongName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientManager).HasDefaultValueSql("((43))");

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DistributionNote)
                    .HasMaxLength(1500)
                    .IsUnicode(false);

                entity.Property(e => e.EarliestReportDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(((1995)-(1))-(1))");

                entity.Property(e => e.FieldOp)
                    .HasColumnName("FieldOP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Frontpage)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GuidanceLink).HasMaxLength(80);

                entity.Property(e => e.IdcontentProxy).HasColumnName("IDContentProxy");

                entity.Property(e => e.IdcontentProxyCpBi).HasColumnName("IDContentProxyCpBi");

                entity.Property(e => e.IdservicesProxy).HasColumnName("IDServicesProxy");

                entity.Property(e => e.Ipnumbers)
                    .HasColumnName("IPNumbers")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.IsAbagClient).HasColumnName("IsABagClient");

                entity.Property(e => e.IsAfeedBackClient).HasColumnName("IsAFeedBackClient");

                entity.Property(e => e.IsApespecialClient).HasColumnName("IsAPEspecialClient");

                entity.Property(e => e.IsArrseparatedRegions).HasColumnName("IsARRSeparatedRegions");

                entity.Property(e => e.IsTakingCommentsMr)
                    .HasColumnName("IsTakingCommentsMR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LatestReportDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('31 dec 2020')");

                entity.Property(e => e.Login)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MonthsInPeriod).HasDefaultValueSql("((2))");

                entity.Property(e => e.NewTemplate)
                    .IsRequired()
                    .HasColumnName("newTemplate")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlatformProvider)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Scope)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('EHS')");

                entity.Property(e => e.Status).HasDefaultValueSql("((2))");

                entity.Property(e => e.TakeLatestBi)
                    .IsRequired()
                    .HasColumnName("TakeLatestBI")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TrustedIp)
                    .IsRequired()
                    .HasColumnName("TrustedIP")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UseServerInstance)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UseSnapshotDb)
                    .HasColumnName("UseSnapshotDB")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WebSiteVariations)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClientContractExtraction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ClientContractExtraction", "dbo");

                entity.Property(e => e.ClientLongName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClientResearchDate).HasColumnType("datetime");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DistributionNote)
                    .HasMaxLength(1500)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentFormat)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndOfDelivery).HasColumnType("date");

                entity.Property(e => e.FnamePerson)
                    .HasColumnName("FNamePerson")
                    .HasMaxLength(50);

                entity.Property(e => e.HeadingSetName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.IncludeBusinessImpact).HasColumnName("Include Business Impact");

                entity.Property(e => e.IndCode).HasColumnName("indCode");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LnamePerson)
                    .HasColumnName("LNamePerson")
                    .HasMaxLength(60);

                entity.Property(e => e.MasterCountryCode).HasMaxLength(2);

                entity.Property(e => e.MasterRegionCode).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SnapShotToUse)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartOfDelivery).HasColumnType("date");

                entity.Property(e => e.UseSnapshotDb)
                    .HasColumnName("UseSnapshotDB")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClientContractPerRrfacility>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ClientContractPerRRFacility", "dbo");

                entity.Property(e => e.ClientLongName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContractedForService)
                    .IsRequired()
                    .HasColumnName("Contracted for Service")
                    .HasMaxLength(50);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DistributionNote)
                    .HasMaxLength(1500)
                    .IsUnicode(false);

                entity.Property(e => e.EndOfDelivery).HasColumnType("date");

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityCreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FacilityLastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.FnamePerson)
                    .HasColumnName("FNamePerson")
                    .HasMaxLength(50);

                entity.Property(e => e.HeadingSetName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LnamePerson)
                    .HasColumnName("LNamePerson")
                    .HasMaxLength(60);

                entity.Property(e => e.MasterCountryCode).HasMaxLength(2);

                entity.Property(e => e.MasterRegionCode).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartOfDelivery).HasColumnType("date");

                entity.Property(e => e.UseSnapshotDb)
                    .HasColumnName("UseSnapshotDB")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClientContracts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ClientContracts", "dbo");

                entity.Property(e => e.ClientAccount)
                    .HasColumnName("Client Account")
                    .HasMaxLength(112);

                entity.Property(e => e.ClientLongName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClientStatus).HasMaxLength(50);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EndOfDelivery).HasColumnType("date");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartOfDelivery).HasColumnType("date");
            });

            modelBuilder.Entity<ClientDistributionList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ClientDistributionList", "dbo");

                entity.Property(e => e.ClientLongName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.FirstName)
                    .HasColumnName("First Name")
                    .HasMaxLength(60);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");

                entity.Property(e => e.LastName)
                    .HasColumnName("Last Name")
                    .HasMaxLength(50);

                entity.Property(e => e.MrreportAlert).HasColumnName("MRReportAlert");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.WebSite)
                    .IsRequired()
                    .HasColumnName("Web site")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClientFacilityList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ClientFacilityList", "dbo");

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityName)
                    .HasColumnName("Facility Name")
                    .HasMaxLength(100);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Region).HasMaxLength(25);
            });

            modelBuilder.Entity<ClientGroup>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.Idgroup })
                    .HasName("PK_ClientParent");

                entity.ToTable("ClientGroup", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idgroup).HasColumnName("IDGroup");
            });

            modelBuilder.Entity<ClientHeading>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ClientHeading", "dbo");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");
            });

            modelBuilder.Entity<ClientList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ClientList", "dbo");

                entity.Property(e => e.AccountEmail)
                    .HasColumnName("Account Email")
                    .HasMaxLength(100);

                entity.Property(e => e.AccountManager).HasMaxLength(111);

                entity.Property(e => e.ClientLongName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClientStatus)
                    .HasColumnName("Client Status")
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.FnamePerson)
                    .HasColumnName("FNamePerson")
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LnamePerson)
                    .HasColumnName("LNamePerson")
                    .HasMaxLength(60);

                entity.Property(e => e.Profession).HasMaxLength(60);

                entity.Property(e => e.Website)
                    .IsRequired()
                    .HasColumnName("website")
                    .HasMaxLength(69)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClientLoginLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ClientLoginLog", "dbo");

                entity.Property(e => e.ClientUrl)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasColumnName("ip")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'127.0.0.1')");

                entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<CloseBoxLifeCycleForOperationManager>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CloseBoxLifeCycleForOperationManager", "dbo");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ExpectedPublicationDate).HasColumnType("date");

                entity.Property(e => e.IndCode).HasColumnName("indCode");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SetCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TeamLeader)
                    .HasColumnName("Team Leader")
                    .HasMaxLength(50);

                entity.Property(e => e.TlEmail)
                    .HasColumnName("Tl email")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<CmRegAnswers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CM_RegAnswers", "dbo");

                entity.Property(e => e.Answer)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AnswerCreateBy).HasMaxLength(255);

                entity.Property(e => e.AnswerCreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.RegId).HasColumnName("RegID");
            });

            modelBuilder.Entity<CoAllAuthoritiesAuthoritiesTypes>(entity =>
            {
                entity.HasKey(e => new { e.AuthorityId, e.AuthorityTypeId });

                entity.ToTable("co_all_Authorities_AuthoritiesTypes", "dbo");
            });

            modelBuilder.Entity<CoAllAuthoritiesBase>(entity =>
            {
                entity.HasKey(e => e.AuthorityId)
                    .HasName("PK_AuthoritiesBase");

                entity.ToTable("co_all_AuthoritiesBase", "dbo");

                entity.Property(e => e.AuthorityId).ValueGeneratedNever();

                entity.Property(e => e.Archived).HasDefaultValueSql("((0))");

                entity.Property(e => e.City).HasMaxLength(100);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('AA')");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Hyperlink).HasMaxLength(200);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.Num)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('_countrywide')");

                entity.Property(e => e.Street).HasMaxLength(200);

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.ZipCode).HasMaxLength(20);
            });

            modelBuilder.Entity<CoAllAuthoritiesCountryRegion>(entity =>
            {
                entity.HasKey(e => new { e.AuthorityId, e.CountryCode, e.RegionCode })
                    .HasName("PK_co_all_AuthoritiesCountryRegion_new");

                entity.ToTable("co_all_AuthoritiesCountryRegion", "dbo");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CoAllAuthoritiesHeadings>(entity =>
            {
                entity.HasKey(e => new { e.AuthorityId, e.HeadingCode })
                    .HasName("PK_co_all_AuthoritiesHeadings_new");

                entity.ToTable("co_all_AuthoritiesHeadings", "dbo");

                entity.Property(e => e.HeadingCode).HasMaxLength(15);
            });

            modelBuilder.Entity<CoAllAuthoritiesRegulation>(entity =>
            {
                entity.HasKey(e => new { e.AuthorityId, e.RegId })
                    .HasName("PK_co_all_AuthoritiesRegulation_new");

                entity.ToTable("co_all_AuthoritiesRegulation", "dbo");
            });

            modelBuilder.Entity<CoAllAuthoritiesRegulationWorkaround>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_all_AuthoritiesRegulation_workaround", "dbo");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<CoAllAuthoritiesText>(entity =>
            {
                entity.HasKey(e => new { e.AuthorityId, e.LanguageCode })
                    .HasName("PK_AuthoritiesText");

                entity.ToTable("co_all_AuthoritiesText", "dbo");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(250);
            });

            modelBuilder.Entity<CoAllAuthoritiesTopics>(entity =>
            {
                entity.HasKey(e => new { e.Idtopic, e.AuthorityId })
                    .HasName("PK_co_all_AuthoritiesTopics_new");

                entity.ToTable("co_all_AuthoritiesTopics", "dbo");

                entity.HasIndex(e => new { e.Idtopic, e.AuthorityId, e.AuthorityTypeId })
                    .HasName("IX_co_all_AuthoritiesTopics_AuthID");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.AuthorityTypeId).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<CoAllAuthoritiesTopicsWorkaround>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_all_AuthoritiesTopics_workaround", "dbo");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<CoAllAuthoritiesType>(entity =>
            {
                entity.HasKey(e => e.AuthorityTypeId)
                    .HasName("PK_AuthoritiesType");

                entity.ToTable("co_all_AuthoritiesType", "dbo");

                entity.Property(e => e.AuthorityType).HasMaxLength(50);

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoAllClientReportDates>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_all_ClientReportDates", "dbo");

                entity.Property(e => e.ClientLongName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EarliestReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.IdcontentProxy).HasColumnName("IDContentProxy");

                entity.Property(e => e.IdservicesProxy).HasColumnName("IDServicesProxy");

                entity.Property(e => e.LatestReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.MaxOfClientReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UseServerInstance)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UseSnapshotDb)
                    .HasColumnName("UseSnapshotDB")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoAllGeneralTextSet>(entity =>
            {
                entity.HasKey(e => e.GeneralTextSetCode);

                entity.ToTable("co_all_GeneralTextSet", "dbo");

                entity.Property(e => e.GeneralTextSetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GeneralTextSetName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoAllGeneralTextSetGeneralText>(entity =>
            {
                entity.HasKey(e => new { e.GeneralTextSetCode, e.Pk, e.ResourceId });

                entity.ToTable("co_all_GeneralTextSet_GeneralText", "dbo");

                entity.Property(e => e.GeneralTextSetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ResourceId)
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoAllMyActionItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_all_MyActionItems", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(34)
                    .IsUnicode(false);

                entity.Property(e => e.LastReviewed).HasColumnType("datetime");

                entity.Property(e => e.Logon)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CoAllRegulationIssuingAuthorities>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_all_Regulation_IssuingAuthorities", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");

                entity.Property(e => e.Organisation).HasMaxLength(200);
            });

            modelBuilder.Entity<CoAllServiceVersion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_all_ServiceVersion", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ExpectedPublicationDate).HasColumnType("date");

                entity.Property(e => e.IndCode).HasColumnName("indCode");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.NextPublicationDate).HasColumnType("date");

                entity.Property(e => e.ProductTypeCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SetCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoAllServiceVersion1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_all_ServiceVersion", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ExpectedPublicationDate).HasColumnType("date");

                entity.Property(e => e.IndCode).HasColumnName("indCode");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.NextPublicationDate).HasColumnType("date");

                entity.Property(e => e.ProductTypeCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SetCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoAllServiceVersion2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_all_ServiceVersion", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ExpectedPublicationDate).HasColumnType("date");

                entity.Property(e => e.IndCode).HasColumnName("indCode");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ProductTypeCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SetCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoAllServiceVersion3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_all_ServiceVersion", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ExpectedPublicationDate).HasColumnType("date");

                entity.Property(e => e.IndCode).HasColumnName("indCode");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ProductTypeCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SetCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoAllUpdateType>(entity =>
            {
                entity.HasKey(e => e.UpdateTypeId)
                    .HasName("PK_UpdateType");

                entity.ToTable("co_all_UpdateType", "dbo");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SortOrder)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('a')");
            });

            modelBuilder.Entity<CoAllWorkflowStatus>(entity =>
            {
                entity.HasKey(e => e.RowStatus);

                entity.ToTable("co_all_WorkflowStatus", "dbo");

                entity.Property(e => e.RowStatus)
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.SortOrder)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('a')");
            });

            modelBuilder.Entity<CoApAllUsedQnForOffices>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_ap_AllUsedQnForOffices", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.MappingCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MappingGn).HasColumnName("MappingGN");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CoApDerivationType>(entity =>
            {
                entity.HasKey(e => e.TypeId);

                entity.ToTable("co_ap_DerivationType", "dbo");

                entity.Property(e => e.TypeId)
                    .HasColumnName("TypeID")
                    .ValueGeneratedNever();

                entity.Property(e => e.TypeDescription)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TypeText)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoApDerivationTypeText>(entity =>
            {
                entity.HasKey(e => new { e.TypeId, e.LanguageCode });

                entity.ToTable("co_ap_DerivationType_Text", "dbo");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.TypeDescription)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TypeText)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoApDerivedQuestion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_ap_DerivedQuestion", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Notes).HasMaxLength(300);

                entity.Property(e => e.QnCodeDerived)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnCodeMaster)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCodeDerived)
                    .HasColumnName("startDate_QnCodeDerived")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCodeMaster)
                    .HasColumnName("startDate_QnCodeMaster")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoApDerivedQuestion1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_ap_DerivedQuestion", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Notes).HasMaxLength(300);

                entity.Property(e => e.QnCodeDerived)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnCodeMaster)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCodeDerived)
                    .HasColumnName("startDate_QnCodeDerived")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCodeMaster)
                    .HasColumnName("startDate_QnCodeMaster")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoApDerivedQuestion2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_ap_DerivedQuestion", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Notes).HasMaxLength(300);

                entity.Property(e => e.QnCodeDerived)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnCodeMaster)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCodeDerived)
                    .HasColumnName("startDate_QnCodeDerived")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCodeMaster)
                    .HasColumnName("startDate_QnCodeMaster")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoApDerivedQuestion3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_ap_DerivedQuestion", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Notes).HasMaxLength(300);

                entity.Property(e => e.QnCodeDerived)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnCodeMaster)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCodeDerived)
                    .HasColumnName("startDate_QnCodeDerived")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCodeMaster)
                    .HasColumnName("startDate_QnCodeMaster")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoApGeCutOffDatesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_ap_GeCutOffDates_view", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DateCutoff).HasColumnType("smalldatetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CoApGeModuleMap>(entity =>
            {
                entity.HasKey(e => new { e.HeadingCode, e.GemoduleNumber });

                entity.ToTable("co_ap_ge_module_map", "dbo");

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.GemoduleNumber)
                    .HasColumnName("GEModuleNumber")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<CoApItemsBase>(entity =>
            {
                entity.HasKey(e => e.ItemId)
                    .HasName("PK_co_ap_Items_Base_new");

                entity.ToTable("co_ap_Items_Base", "dbo");

                entity.HasIndex(e => new { e.ItemId, e.CountryCode, e.RegionCode })
                    .HasName("IX_co_ap_Items_Base");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.ItemType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CoApItemsText>(entity =>
            {
                entity.HasKey(e => new { e.ItemId, e.LanguageCode })
                    .HasName("PK_co_ap_Items_Text_new");

                entity.ToTable("co_ap_Items_Text", "dbo");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.Status).HasColumnName("status");
            });

            modelBuilder.Entity<CoApNumberOfQnToAllocateToWarehouses>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_ap_NumberOfQnToAllocateToWarehouses", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CoApNumberOfQnToWarehousesPerCountry>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_ap_NumberOfQnToWarehousesPerCountry", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CoApNumberofQnNottoOfficesperCountryView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_ap_NumberofQnNottoOfficesperCountry_view", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CoApNumberofQnNullOfficesperCountryView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_ap_NumberofQnNullOfficesperCountry_view", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CutOffDate).HasColumnType("datetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CoApNumberofQntoOfficesperCountryView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_ap_NumberofQntoOfficesperCountry_view", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CutOffDate).HasColumnType("datetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CoApOfficesHeadingMapping>(entity =>
            {
                entity.HasKey(e => new { e.HeadingCode, e.MappingCode });

                entity.ToTable("co_ap_offices_Heading_Mapping", "dbo");

                entity.Property(e => e.HeadingCode).HasMaxLength(50);

                entity.Property(e => e.MappingCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CoApOfficesQn>(entity =>
            {
                entity.HasKey(e => e.MappingCode);

                entity.ToTable("co_ap_Offices_Qn", "dbo");

                entity.Property(e => e.MappingCode).HasMaxLength(50);

                entity.Property(e => e.MappingGn).HasColumnName("MappingGN");
            });

            modelBuilder.Entity<CoApQnOffices>(entity =>
            {
                entity.HasKey(e => new { e.QnCode, e.Idclient, e.MappingCode })
                    .HasName("PK_co_ap_QnOffices_new");

                entity.ToTable("co_ap_QnOffices", "dbo");

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.MappingCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CoAxaptaFeed>(entity =>
            {
                entity.HasKey(e => e.Idcounter)
                    .HasName("PK__co_Axapt__1FB98A5C2B1F20C4");

                entity.ToTable("co_AxaptaFeed", "dbo");

                entity.Property(e => e.Idcounter)
                    .HasColumnName("IDcounter")
                    .ValueGeneratedNever();

                entity.Property(e => e.CalendarId)
                    .HasColumnName("calendarId")
                    .HasMaxLength(10);

                entity.Property(e => e.CellularPhone).HasMaxLength(50);

                entity.Property(e => e.CountryOfOrigin).HasMaxLength(25);

                entity.Property(e => e.Cvlink)
                    .HasColumnName("CVLink")
                    .HasMaxLength(150);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.EnhEmplArea)
                    .HasColumnName("ENH_EmplArea")
                    .HasMaxLength(200);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(60);

                entity.Property(e => e.Lastname)
                    .HasColumnName("lastname")
                    .HasMaxLength(60);

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(150);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(60);

                entity.Property(e => e.MugShotLink).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.Nationalities).HasMaxLength(500);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PhoneLocal).HasMaxLength(50);

                entity.Property(e => e.Position).HasMaxLength(60);

                entity.Property(e => e.SkypeId)
                    .HasColumnName("SkypeID")
                    .HasMaxLength(30);

                entity.Property(e => e.StartDateEnhesa).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(60);
            });

            modelBuilder.Entity<CoClientBlacknight>(entity =>
            {
                entity.HasKey(e => e.Idclient);

                entity.ToTable("co_Client_blacknight", "dbo");

                entity.Property(e => e.Idclient)
                    .HasColumnName("IDClient")
                    .ValueGeneratedNever();

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateMoved)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateWebsiteLastChecked)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HttpResponse).IsUnicode(false);
            });

            modelBuilder.Entity<CoClientStatus>(entity =>
            {
                entity.HasKey(e => e.Status);

                entity.ToTable("co_ClientStatus", "dbo");

                entity.Property(e => e.Status).ValueGeneratedNever();

                entity.Property(e => e.StatusText).HasMaxLength(50);
            });

            modelBuilder.Entity<CoConsultantFocusTeamsRole>(entity =>
            {
                entity.HasKey(e => new { e.RoleCode, e.FocusServiceTeam })
                    .HasName("PK__co_Consu__459C1A532594C516");

                entity.ToTable("co_ConsultantFocusTeamsRole", "dbo");

                entity.Property(e => e.RoleCode)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.FocusServiceTeam).HasMaxLength(50);
            });

            modelBuilder.Entity<CoConsultantRoleLevels>(entity =>
            {
                entity.HasKey(e => e.RoleLevel);

                entity.ToTable("co_ConsultantRoleLevels", "dbo");

                entity.Property(e => e.RoleLevel).ValueGeneratedNever();

                entity.Property(e => e.RoleLevelDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoConsultantsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_Consultants_list", "dbo");

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");

                entity.Property(e => e.Name).HasMaxLength(112);
            });

            modelBuilder.Entity<CoConsultantsRole>(entity =>
            {
                entity.ToTable("co_Consultants_Role", "dbo");

                entity.HasIndex(e => new { e.Idcounter, e.RoleArea, e.RoleCode, e.RoleLevel, e.Expertise, e.FocusServiceTeam })
                    .HasName("uc_co_Consultants_Role")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Expertise)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.FocusComments).HasMaxLength(500);

                entity.Property(e => e.FocusServiceTeam)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");

                entity.Property(e => e.RoleArea)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Operations')");

                entity.Property(e => e.RoleCode)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoContactManagerList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_ContactManager_list", "dbo");

                entity.Property(e => e.ApprovalDate).HasColumnType("datetime");

                entity.Property(e => e.Apuser)
                    .HasColumnName("APuser")
                    .HasMaxLength(255);

                entity.Property(e => e.BasedIn)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ClientName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CountriesOfInterest)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Ehs)
                    .IsRequired()
                    .HasColumnName("EHS")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.EnhesaFlash).HasColumnName("ENHESA_Flash");

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.Flash).HasMaxLength(50);

                entity.Property(e => e.FlashLanguage).HasMaxLength(2);

                entity.Property(e => e.FnamePerson)
                    .HasColumnName("FNamePerson")
                    .HasMaxLength(50);

                entity.Property(e => e.Glb).HasColumnName("GLB");

                entity.Property(e => e.Hs).HasColumnName("HS");

                entity.Property(e => e.Hyperlink).HasMaxLength(150);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");

                entity.Property(e => e.InfoEpcServices).HasColumnName("Info_EPC_Services");

                entity.Property(e => e.InsertDate).HasColumnType("datetime");

                entity.Property(e => e.Intl).HasMaxLength(5);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageOfPreference)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdate).HasColumnType("datetime");

                entity.Property(e => e.LnamePerson)
                    .HasColumnName("LNamePerson")
                    .HasMaxLength(60);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.MrreportAlert).HasColumnName("MRReportAlert");

                entity.Property(e => e.Notes).HasMaxLength(255);

                entity.Property(e => e.Num).HasMaxLength(20);

                entity.Property(e => e.OfficeArea)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Op)
                    .IsRequired()
                    .HasColumnName("OP")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Organisation).HasMaxLength(180);

                entity.Property(e => e.OrganizationDivision).HasMaxLength(180);

                entity.Property(e => e.Phone1).HasMaxLength(12);

                entity.Property(e => e.Phone2).HasMaxLength(12);

                entity.Property(e => e.Phone3).HasMaxLength(12);

                entity.Property(e => e.Phone4).HasMaxLength(12);

                entity.Property(e => e.Pref1).HasMaxLength(7);

                entity.Property(e => e.Pref2).HasMaxLength(7);

                entity.Property(e => e.Pref3).HasMaxLength(7);

                entity.Property(e => e.Pref4).HasMaxLength(7);

                entity.Property(e => e.PrefF).HasMaxLength(7);

                entity.Property(e => e.Profession).HasMaxLength(60);

                entity.Property(e => e.ProvinceState).HasMaxLength(100);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.SIndex)
                    .IsRequired()
                    .HasColumnName("sIndex")
                    .HasMaxLength(2);

                entity.Property(e => e.Sex).HasMaxLength(1);

                entity.Property(e => e.Street).HasMaxLength(200);

                entity.Property(e => e.SubmissionDate).HasColumnType("datetime");

                entity.Property(e => e.TownCity).HasMaxLength(100);

                entity.Property(e => e.TranslationNotes).HasMaxLength(255);

                entity.Property(e => e.UserNotes).HasMaxLength(255);

                entity.Property(e => e.ZipCode).HasMaxLength(20);
            });

            modelBuilder.Entity<CoCountriesByConsultantList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_CountriesByConsultant_list", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Idcontact).HasColumnName("IDContact");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(111);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.WorkflowRole)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoCountriesList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_Countries_list", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<CoCountryConsultantRole>(entity =>
            {
                entity.HasKey(e => new { e.CountryCode, e.Idcontact, e.RegionCode, e.WorkflowRole, e.LanguageCode })
                    .HasName("PK_CountriesByConsultant");

                entity.ToTable("co_CountryConsultantRole", "dbo");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.Idcontact).HasColumnName("IDContact");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('_countrywide')");

                entity.Property(e => e.WorkflowRole)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Lead')");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");
            });

            modelBuilder.Entity<CoEdiGeneralText>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_edi_GeneralText", "dbo");

                entity.Property(e => e.ResourceId)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoFocusCountries>(entity =>
            {
                entity.HasKey(e => new { e.CoConsultantsRole, e.Idcounter, e.FocusCountry, e.FocusCountryName })
                    .HasName("PK__co_Focus__FD1C93B015DD8898");

                entity.ToTable("co_FocusCountries", "dbo");

                entity.Property(e => e.CoConsultantsRole).HasColumnName("co_Consultants_Role");

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");

                entity.Property(e => e.FocusCountry).HasMaxLength(2);

                entity.Property(e => e.FocusCountryName).HasMaxLength(100);
            });

            modelBuilder.Entity<CoIdtopicRegId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_IDTopicRegID", "dbo");

                entity.Property(e => e.Idimplementation).HasColumnName("IDImplementation");

                entity.Property(e => e.RegId).HasColumnName("RegID");
            });

            modelBuilder.Entity<CoIdtopicwithOneRegIdList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_IDTopicwithOneRegID_list", "dbo");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");
            });

            modelBuilder.Entity<CoIndustry>(entity =>
            {
                entity.HasKey(e => e.IndCode);

                entity.ToTable("co_Industry", "dbo");

                entity.Property(e => e.IndCode)
                    .HasColumnName("indCode")
                    .ValueGeneratedNever();

                entity.Property(e => e.IndName)
                    .HasColumnName("indName")
                    .HasMaxLength(20)
                    .IsFixedLength();
            });

            modelBuilder.Entity<CoIndustryRegulation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_Industry_Regulation", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IndCode).HasColumnName("indCode");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoIndustryRegulation1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_Industry_Regulation", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IndCode).HasColumnName("indCode");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoIndustryRegulation2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_Industry_Regulation", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IndCode).HasColumnName("indCode");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoIndustryRegulation3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_Industry_Regulation", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IndCode).HasColumnName("indCode");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoMrMrsByContactList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_mr_MRsByContact_list", "dbo");

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");
            });

            modelBuilder.Entity<CoMrNotLinkedMrstoRegs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_mr_NotLinkedMRstoRegs", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NotLinkedMr).HasColumnName("NotLinkedMR");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CoOfficesCutOffDatesList>(entity =>
            {
                entity.HasKey(e => new { e.CountryCode, e.RegionCode });

                entity.ToTable("co_Offices_CutOffDates_list", "dbo");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.CutOffDate).HasColumnType("datetime");

                entity.Property(e => e.IsFirstTime).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<CoUrlAmendmentsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_url_Amendments_list", "dbo");

                entity.Property(e => e.AmendmentCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Hyperlink).HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CoUrlCountryProfilesList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_url_CountryProfiles_list", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CoUrlInUseByCountryRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_url_InUseByCountryRegion", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Urlcode)
                    .IsRequired()
                    .HasColumnName("urlcode")
                    .HasMaxLength(6);
            });

            modelBuilder.Entity<CoUrlInUseByCountryRegionBeta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_url_InUseByCountryRegion_beta", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Urlcode)
                    .IsRequired()
                    .HasColumnName("urlcode")
                    .HasMaxLength(6);
            });

            modelBuilder.Entity<CoUrlMonitoringReportsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_url_MonitoringReports_list", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateLastModified).HasColumnType("datetime");

                entity.Property(e => e.EnforcingAuthority).HasMaxLength(255);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IssuingAuthority).HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegulatoryText).HasMaxLength(255);
            });

            modelBuilder.Entity<CoUrlQuestionsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_url_Questions_list", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CoUrlRegulationsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_url_Regulations_list", "dbo");

                entity.Property(e => e.ConsolidatedHyperlink).HasMaxLength(255);

                entity.Property(e => e.D).HasColumnName("d");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ParseDate).HasColumnType("datetime");

                entity.Property(e => e.RegComment).HasMaxLength(4000);

                entity.Property(e => e.RegHyperlink).HasMaxLength(255);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegSummary).HasMaxLength(4000);
            });

            modelBuilder.Entity<CoUrlUrlInuse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("co_url_URL_inuse", "dbo");

                entity.Property(e => e.DateLastChecked).HasColumnType("datetime");

                entity.Property(e => e.DateValidated).HasColumnType("datetime");

                entity.Property(e => e.Reason).HasMaxLength(255);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasColumnName("url")
                    .HasMaxLength(450);

                entity.Property(e => e.Urlcode)
                    .IsRequired()
                    .HasColumnName("urlcode")
                    .HasMaxLength(6);
            });

            modelBuilder.Entity<ConsultantLanguage>(entity =>
            {
                entity.HasKey(e => new { e.LanguageCode, e.Idcounter })
                    .HasName("PK_LangCode_IDCounter");

                entity.ToTable("ConsultantLanguage", "dbo");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");
            });

            modelBuilder.Entity<ConsultantsLogon>(entity =>
            {
                entity.HasKey(e => e.Idcounter);

                entity.ToTable("ConsultantsLogon", "dbo");

                entity.Property(e => e.Idcounter)
                    .HasColumnName("IDCounter")
                    .ValueGeneratedNever();

                entity.Property(e => e.DefaultWorkLocation)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('BE')");

                entity.Property(e => e.Logon)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContractedCountries>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ContractedCountries", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContractedCountriesLanguage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ContractedCountriesLanguage", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FroozenCpdate)
                    .HasColumnName("FroozenCPDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SetCode).HasMaxLength(50);

                entity.Property(e => e.TakeLatestCp).HasColumnName("TakeLatestCP");
            });

            modelBuilder.Entity<ContribApDtqaux>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("contribAP_DTQAux", "dbo");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ContribApLinktoRegs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("contribAP_linktoRegs", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.NReg).HasColumnName("nReg");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContribApMaxchangeddate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("contribAP_maxchangeddate", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.MaxResearchDate).HasColumnType("datetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContribApMaxchangeddatenoEn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("contribAP_maxchangeddatenoEn", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.MaxResearchDate).HasColumnType("datetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContribApMaxresearchdate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("contribAP_maxresearchdate", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.MaxResearchDate).HasColumnType("datetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContribApMaxresearchdatenoEn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("contribAP_maxresearchdatenoEn", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.MaxResearchDate).HasColumnType("datetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContribApMinresearchdate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("contribAP_minresearchdate", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.MaxResearchDate).HasColumnType("datetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContribApMinresearchdatenoEn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("contribAP_minresearchdatenoEn", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.MaxResearchDate).HasColumnType("datetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContribApNFedQn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("contribAP_nFedQn", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContribApNLinktoDtqs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("contribAP_nLinktoDTQs", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.NLinktoDtq).HasColumnName("nLinktoDTQ");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContribApNQninEnglish>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("contribAP_nQninEnglish", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContribApNQninNoEnglish>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("contribAP_nQninNoEnglish", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContribApNRegQn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("contribAP_nRegQn", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContribApPeople>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("contribAP_people", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FnamePerson)
                    .HasColumnName("FNamePerson")
                    .HasMaxLength(50);

                entity.Property(e => e.LnamePerson)
                    .HasColumnName("LNamePerson")
                    .HasMaxLength(60);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ContribApRegAux>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("contribAP_RegAux", "dbo");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ContribUpdateProcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("contrib_UpdateProcess", "dbo");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.ReportDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Countries>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Countries", "dbo");

                entity.Property(e => e.Area)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Idarea).HasColumnName("IDArea");
            });

            modelBuilder.Entity<CountriesByConsultant>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CountriesByConsultant", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Idcontact).HasColumnName("IDContact");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.WorkflowRole)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CountriesByConsultantLead>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CountriesByConsultantLead", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Idcontact).HasColumnName("IDContact");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.WorkflowRole)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CountriesforTranslation>(entity =>
            {
                entity.HasKey(e => new { e.CountryCode, e.Idclient });

                entity.ToTable("CountriesforTranslation", "dbo");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.HasKey(e => e.CountryCode)
                    .HasName("aaaaaCountry_PK");

                entity.ToTable("Country", "dbo");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Country1)
                    .IsRequired()
                    .HasColumnName("Country")
                    .HasMaxLength(50);

                entity.Property(e => e.Eu).HasColumnName("EU");

                entity.Property(e => e.RegionType).HasMaxLength(50);

                entity.Property(e => e.WorldAreaId).HasColumnName("WorldAreaID");
            });

            modelBuilder.Entity<CountryArea>(entity =>
            {
                entity.HasKey(e => new { e.Idarea, e.CountryCode });

                entity.ToTable("CountryArea", "dbo");

                entity.Property(e => e.Idarea).HasColumnName("IDArea");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.IdcountryArea)
                    .HasColumnName("IDCountryArea")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<CountryAreaForTopicStats>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CountryAreaForTopicStats", "dbo");

                entity.Property(e => e.Area)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);
            });

            modelBuilder.Entity<CountryInformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CountryInformation", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EarliestAdoptionDate).HasColumnType("datetime");

                entity.Property(e => e.LatestReportDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CountryLanguage>(entity =>
            {
                entity.HasKey(e => new { e.CountryCode, e.LanguageCode })
                    .HasName("aaaaaCountryLanguage_PK")
                    .IsClustered(false);

                entity.ToTable("CountryLanguage", "dbo");

                entity.HasIndex(e => e.LanguageCode)
                    .HasName("LanguageCode");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CountryText>(entity =>
            {
                entity.HasKey(e => new { e.LanguageCode, e.CountryCode })
                    .HasName("aaaaaCountryText_PK");

                entity.ToTable("CountryText", "dbo");

                entity.HasIndex(e => new { e.LanguageCode, e.CountryName })
                    .HasName("LanguageCodeCountryName");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            });

            modelBuilder.Entity<CpFrozen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CP_Frozen", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.FreezeDate).HasColumnType("date");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ProofedBy).HasMaxLength(50);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CpFrozenDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CP_Frozen_Date", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FreezeDate).HasColumnType("date");

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CpFrozenDateNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CP_Frozen_Date_New", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FreezeDate).HasColumnType("datetime");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DecTree>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DecTree", "dbo");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.GeographicType).HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReleaseComment).IsUnicode(false);

                entity.Property(e => e.ReleaseNote)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DecTree1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DecTree", "published");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.GeographicType).HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReleaseComment).IsUnicode(false);

                entity.Property(e => e.ReleaseNote)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DecTree2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DecTree", "temporal");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.GeographicType).HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReleaseComment).IsUnicode(false);

                entity.Property(e => e.ReleaseNote)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DecTree3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DecTree", "workflow");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.GeographicType).HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReleaseComment).IsUnicode(false);

                entity.Property(e => e.ReleaseNote)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DecTreeCodeDecTreeCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DecTreeCodeDecTreeCode", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DecTreeCodeChild)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.DecTreeCodeParent)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateDecTreeCodeChild)
                    .HasColumnName("startDate_DecTreeCodeChild")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateDecTreeCodeParent)
                    .HasColumnName("startDate_DecTreeCodeParent")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DecTreeCodeDecTreeCode1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DecTreeCodeDecTreeCode", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DecTreeCodeChild)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.DecTreeCodeParent)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateDecTreeCodeChild)
                    .HasColumnName("startDate_DecTreeCodeChild")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateDecTreeCodeParent)
                    .HasColumnName("startDate_DecTreeCodeParent")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DecTreeCodeDecTreeCode2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DecTreeCodeDecTreeCode", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DecTreeCodeChild)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.DecTreeCodeParent)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateDecTreeCodeChild)
                    .HasColumnName("startDate_DecTreeCodeChild")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateDecTreeCodeParent)
                    .HasColumnName("startDate_DecTreeCodeParent")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DecTreeCodeDecTreeCode3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DecTreeCodeDecTreeCode", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DecTreeCodeChild)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.DecTreeCodeParent)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateDecTreeCodeChild)
                    .HasColumnName("startDate_DecTreeCodeChild")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateDecTreeCodeParent)
                    .HasColumnName("startDate_DecTreeCodeParent")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DecTreeQnHeading>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DecTreeQnHeading", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DecTreeQnHeading1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DecTreeQnHeading", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DecTreeQnHeading2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DecTreeQnHeading", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DecTreeQnHeading3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DecTreeQnHeading", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DecTreeText>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DecTreeText", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DecTreeText1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DecTreeText", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DecTreeText2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DecTreeText", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DecTreeText3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DecTreeText", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DectreeLinkedToQn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DectreeLinkedToQn", "dbo");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DectreeLinkedToRegulation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DectreeLinkedToRegulation", "dbo");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DectreeTextLinkedToQn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DectreeTextLinkedToQn", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<Definition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Definition", "dbo");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Definition1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Definition", "published");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Definition2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Definition", "temporal");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Definition3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Definition", "workflow");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DefinitionText>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DefinitionText", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DefExpression)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Hyperlink).HasMaxLength(255);

                entity.Property(e => e.HyperlinkText).HasMaxLength(255);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DefinitionText1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DefinitionText", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DefExpression)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Hyperlink).HasMaxLength(255);

                entity.Property(e => e.HyperlinkText).HasMaxLength(255);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DefinitionText2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DefinitionText", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DefExpression)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Hyperlink).HasMaxLength(255);

                entity.Property(e => e.HyperlinkText).HasMaxLength(255);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DefinitionText3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DefinitionText", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DefExpression)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Hyperlink).HasMaxLength(255);

                entity.Property(e => e.HyperlinkText).HasMaxLength(255);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Direpce>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DIREPCE", "dbo");

                entity.Property(e => e.ApprovalDate).HasColumnType("datetime");

                entity.Property(e => e.Apuser)
                    .HasColumnName("APuser")
                    .HasMaxLength(255);

                entity.Property(e => e.BasedIn)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ClientName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName).HasMaxLength(100);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.EnhesaFlash).HasColumnName("ENHESA_Flash");

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.Flash).HasMaxLength(50);

                entity.Property(e => e.FlashLanguage).HasMaxLength(2);

                entity.Property(e => e.FnamePerson)
                    .HasColumnName("FNamePerson")
                    .HasMaxLength(50);

                entity.Property(e => e.Hyperlink).HasMaxLength(150);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");

                entity.Property(e => e.InfoEpcServices).HasColumnName("Info_EPC_Services");

                entity.Property(e => e.Intl).HasMaxLength(5);

                entity.Property(e => e.LastUpdate).HasColumnType("datetime");

                entity.Property(e => e.LnamePerson)
                    .HasColumnName("LNamePerson")
                    .HasMaxLength(60);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.MrreportAlert).HasColumnName("MRReportAlert");

                entity.Property(e => e.Notes).HasMaxLength(255);

                entity.Property(e => e.Num).HasMaxLength(20);

                entity.Property(e => e.OfficeArea)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Organisation).HasMaxLength(180);

                entity.Property(e => e.OrganizationDivision).HasMaxLength(180);

                entity.Property(e => e.Phone1).HasMaxLength(12);

                entity.Property(e => e.Phone2).HasMaxLength(12);

                entity.Property(e => e.Phone3).HasMaxLength(12);

                entity.Property(e => e.Phone4).HasMaxLength(12);

                entity.Property(e => e.Pref1).HasMaxLength(7);

                entity.Property(e => e.Pref2).HasMaxLength(7);

                entity.Property(e => e.Pref3).HasMaxLength(7);

                entity.Property(e => e.Pref4).HasMaxLength(7);

                entity.Property(e => e.PrefF).HasMaxLength(7);

                entity.Property(e => e.Profession).HasMaxLength(60);

                entity.Property(e => e.ProvinceState).HasMaxLength(100);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.RegionName).HasMaxLength(100);

                entity.Property(e => e.SIndex)
                    .IsRequired()
                    .HasColumnName("sIndex")
                    .HasMaxLength(2);

                entity.Property(e => e.Sex).HasMaxLength(1);

                entity.Property(e => e.Street).HasMaxLength(200);

                entity.Property(e => e.SubmissionDate).HasColumnType("datetime");

                entity.Property(e => e.TownCity).HasMaxLength(100);

                entity.Property(e => e.TranslationNotes).HasMaxLength(255);

                entity.Property(e => e.UserNotes).HasMaxLength(255);

                entity.Property(e => e.ZipCode).HasMaxLength(20);
            });

            modelBuilder.Entity<DomainName>(entity =>
            {
                entity.ToTable("DomainName", "dbo");

                entity.HasIndex(e => new { e.Idclient, e.EmailDomain })
                    .HasName("IX_DomainName")
                    .IsUnique();

                entity.Property(e => e.DomainNameId).HasColumnName("DomainNameID");

                entity.Property(e => e.Approved)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Auto')");

                entity.Property(e => e.EmailDomain)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("('9999-12-31')");

                entity.Property(e => e.Idclient)
                    .HasColumnName("IDClient")
                    .HasDefaultValueSql("((37))");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Auto')");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<DomainNameUserPermission>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DomainNameUserPermission", "dbo");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EmailDomain)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LastModifiedBy).HasMaxLength(50);

                entity.Property(e => e.LastModifiedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserPermission)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Dtqapquestions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DTQAPQuestions", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.Citation).HasMaxLength(255);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasColumnName("Country Name")
                    .HasMaxLength(100);

                entity.Property(e => e.CqnCode)
                    .IsRequired()
                    .HasColumnName("CQnCode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CqnText).HasColumnName("CQnText");

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasColumnName("Heading Name")
                    .HasMaxLength(255);

                entity.Property(e => e.LinkNotes)
                    .HasColumnName("Link Notes")
                    .HasMaxLength(300);

                entity.Property(e => e.LinkType)
                    .HasColumnName("Link Type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MqnCode)
                    .HasColumnName("MQnCode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.QnTitle).HasMaxLength(1000);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegTitle).HasMaxLength(1000);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasColumnName("Region Name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<DtqapquestionsUs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DTQAPQuestionsUS", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasColumnName("Country Name")
                    .HasMaxLength(100);

                entity.Property(e => e.CqnCode)
                    .IsRequired()
                    .HasColumnName("CQnCode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CqnText).HasColumnName("CQnText");

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasColumnName("Heading Name")
                    .HasMaxLength(255);

                entity.Property(e => e.LinkNotes)
                    .HasColumnName("Link Notes")
                    .HasMaxLength(300);

                entity.Property(e => e.LinkType)
                    .HasColumnName("Link Type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MqnCode)
                    .HasColumnName("MQnCode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasColumnName("Region Name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<DtqapquestionsUsPublished>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DTQAPQuestionsUS_Published", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasColumnName("Country Name")
                    .HasMaxLength(100);

                entity.Property(e => e.CqnCode)
                    .IsRequired()
                    .HasColumnName("CQnCode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CqnText).HasColumnName("CQnText");

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasColumnName("Heading Name")
                    .HasMaxLength(255);

                entity.Property(e => e.LinkNotes)
                    .HasColumnName("Link Notes")
                    .HasMaxLength(300);

                entity.Property(e => e.LinkType)
                    .HasColumnName("Link Type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MqnCode)
                    .HasColumnName("MQnCode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasColumnName("Region Name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<DtqapquestionsWithGuideNotes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DTQAPQuestionsWithGuideNotes", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.Citation).HasMaxLength(255);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasColumnName("Country Name")
                    .HasMaxLength(100);

                entity.Property(e => e.CqnCode)
                    .IsRequired()
                    .HasColumnName("CQnCode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CqnText).HasColumnName("CQnText");

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasColumnName("Heading Name")
                    .HasMaxLength(255);

                entity.Property(e => e.LinkNotes)
                    .HasColumnName("Link Notes")
                    .HasMaxLength(300);

                entity.Property(e => e.LinkType)
                    .HasColumnName("Link Type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MqnCode)
                    .HasColumnName("MQnCode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.QnTitle).HasMaxLength(1000);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegTitle).HasMaxLength(1000);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasColumnName("Region Name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<DtqapquestionsWithIndustrySector>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DTQAPQuestionsWithIndustrySector", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.Citation).HasMaxLength(255);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasColumnName("Country Name")
                    .HasMaxLength(100);

                entity.Property(e => e.CqnCode)
                    .IsRequired()
                    .HasColumnName("CQnCode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CqnText).HasColumnName("CQnText");

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasColumnName("Heading Name")
                    .HasMaxLength(255);

                entity.Property(e => e.IndustrySector).HasColumnName("Industry Sector");

                entity.Property(e => e.LinkNotes)
                    .HasColumnName("Link Notes")
                    .HasMaxLength(300);

                entity.Property(e => e.LinkType)
                    .HasColumnName("Link Type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MqnCode)
                    .HasColumnName("MQnCode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.QnTitle).HasMaxLength(1000);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegTitle).HasMaxLength(1000);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasColumnName("Region Name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<DtqchildrenAnsweredYes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DTQChildrenAnsweredYes", "dbo");

                entity.Property(e => e.AnsweredYes).HasMaxLength(10);

                entity.Property(e => e.DecTreeCodeParent)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.DtqmajorVersion).HasColumnName("DTQMajorVersion");

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DtqcountsPerCountryRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DTQCountsPerCountryRegion", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.TotalOfDtqs).HasColumnName("TotalOfDTQs");
            });

            modelBuilder.Entity<DtqsLinkedRegsDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DTQsLinkedRegsDetails", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.DecTreeText).HasColumnName("DecTree Text");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DtqsLinkedToRegulations>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DTQsLinkedToRegulations", "dbo");

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasColumnName("Country Name")
                    .HasMaxLength(100);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.DecTreeNewResearchDate).HasColumnType("date");

                entity.Property(e => e.DecTreeRowStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DtqupdateType)
                    .IsRequired()
                    .HasColumnName("DTQUpdateType")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegUpdateType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasColumnName("Region Name")
                    .HasMaxLength(100);

                entity.Property(e => e.RegulationnewResearchDate).HasColumnType("date");

                entity.Property(e => e.RegulationrowStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EdiProperties>(entity =>
            {
                entity.HasKey(e => e.PassWrd);

                entity.ToTable("EdiProperties", "dbo");

                entity.Property(e => e.PassWrd)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EeePanasonicSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EEE_panasonic_Summary", "dbo");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EeeTopicSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EEE_Topic_Summary", "dbo");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");
            });

            modelBuilder.Entity<EhsRegulatoryTrends>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EhsRegulatoryTrends", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.Status).HasMaxLength(12);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.TopicCreateDate).HasColumnType("datetime");

                entity.Property(e => e.TopicIssueCode)
                    .IsRequired()
                    .HasColumnName("Topic Issue Code")
                    .HasMaxLength(16);

                entity.Property(e => e.TopicReportDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<EhsStats>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EhsStats", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.Region).HasMaxLength(25);
            });

            modelBuilder.Entity<EmailAlertsListOfUsersWithUserInterests>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EmailAlertsListOfUsersWithUserInterests", "dbo");

                entity.Property(e => e.ClientLongName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ehs)
                    .IsRequired()
                    .HasColumnName("EHS")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.FnamePerson)
                    .HasColumnName("FNamePerson")
                    .HasMaxLength(50);

                entity.Property(e => e.Glb).HasColumnName("GLB");

                entity.Property(e => e.Hs).HasColumnName("HS");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");

                entity.Property(e => e.Language)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.LnamePerson)
                    .HasColumnName("LNamePerson")
                    .HasMaxLength(60);

                entity.Property(e => e.MrreportAlert).HasColumnName("MRReportAlert");

                entity.Property(e => e.Op)
                    .IsRequired()
                    .HasColumnName("OP")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Scope)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UseServerInstance)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UseSnapshotDb)
                    .HasColumnName("UseSnapshotDB")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmailTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EmailTracker", "dbo");

                entity.Property(e => e.Counts).HasColumnName("counts");

                entity.Property(e => e.Dateemailing).HasColumnType("datetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcounter).HasColumnName("IDcounter");
            });

            modelBuilder.Entity<EnablonGeographyPrefix>(entity =>
            {
                entity.HasKey(e => new { e.CountryCode, e.RegionCode });

                entity.ToTable("EnablonGeographyPrefix", "dbo");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.GeographyPrefix).HasMaxLength(50);
            });

            modelBuilder.Entity<EnhesaActiveClients>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EnhesaActiveClients", "dbo");

                entity.Property(e => e.ClientLongName)
                    .HasColumnName("Client Long Name")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientManager)
                    .HasColumnName("Client Manager")
                    .HasMaxLength(111);

                entity.Property(e => e.ClientSite)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.Salutation)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<EnhesaClientLogsFromFeb2015>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EnhesaClientLogsFromFeb2015", "dbo");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.WebSite)
                    .IsRequired()
                    .HasColumnName("Web Site")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EnhesaClientUserLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EnhesaClientUserLog", "dbo");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.WebSite)
                    .IsRequired()
                    .HasColumnName("Web Site")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EnhesaFlash>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EnhesaFlash", "dbo");

                entity.Property(e => e.Address).HasMaxLength(222);

                entity.Property(e => e.Apuser)
                    .HasColumnName("APuser")
                    .HasMaxLength(255);

                entity.Property(e => e.ContactName).HasMaxLength(111);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(511);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.Fax).HasMaxLength(26);

                entity.Property(e => e.FlashLanguage)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FnamePerson)
                    .HasColumnName("FNamePerson")
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcounter)
                    .HasColumnName("IDCounter")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.InfoEpcServices).HasColumnName("Info_EPC_Services");

                entity.Property(e => e.InsertDate).HasColumnType("datetime");

                entity.Property(e => e.LastUpdate).HasColumnType("datetime");

                entity.Property(e => e.LnamePerson)
                    .HasColumnName("LNamePerson")
                    .HasMaxLength(60);

                entity.Property(e => e.Mobile).HasMaxLength(24);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.Organisation).HasMaxLength(180);

                entity.Property(e => e.Phone).HasMaxLength(25);

                entity.Property(e => e.ProvinceState).HasMaxLength(100);

                entity.Property(e => e.SIndex)
                    .IsRequired()
                    .HasColumnName("sIndex")
                    .HasMaxLength(2);

                entity.Property(e => e.Salutation)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(60);

                entity.Property(e => e.TownCity).HasMaxLength(100);

                entity.Property(e => e.Website).HasMaxLength(150);

                entity.Property(e => e.ZipCode).HasMaxLength(20);
            });

            modelBuilder.Entity<EnhesaTeamRolesPerCountryRegionLanguage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EnhesaTeamRolesPerCountryRegionLanguage", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.FnamePerson)
                    .HasColumnName("FNamePerson")
                    .HasMaxLength(50);

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LnamePerson)
                    .HasColumnName("LNamePerson")
                    .HasMaxLength(60);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.WorkflowRole)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ErrorHandling>(entity =>
            {
                entity.HasKey(e => e.PkErrorHandlingId)
                    .HasName("PK__ErrorHan__520223CB05FA8FDC");

                entity.ToTable("ErrorHandling", "dbo");

                entity.Property(e => e.PkErrorHandlingId).HasColumnName("pkErrorHandlingID");

                entity.Property(e => e.ErrorLine).HasColumnName("Error_Line");

                entity.Property(e => e.ErrorMessage)
                    .HasColumnName("Error_Message")
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.ErrorNumber).HasColumnName("Error_Number");

                entity.Property(e => e.ErrorProcedure)
                    .IsRequired()
                    .HasColumnName("Error_Procedure")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ErrorSeverity).HasColumnName("Error_Severity");

                entity.Property(e => e.ErrorState)
                    .HasColumnName("Error_State")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ErrorTransactionId)
                    .IsRequired()
                    .HasColumnName("ErrorTransactionID")
                    .HasMaxLength(50);

                entity.Property(e => e.HostName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TimeStamp)
                    .HasColumnName("Time_Stamp")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<FacilityDomainName>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.FacilityCode, e.EmailDomain });

                entity.ToTable("FacilityDomainName", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.FacilityCode).HasMaxLength(50);

                entity.Property(e => e.EmailDomain).HasMaxLength(255);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.LastModifiedBy).HasMaxLength(50);

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserPermission)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Full')");
            });

            modelBuilder.Entity<FacilityResponseModels>(entity =>
            {
                entity.HasKey(e => e.FacilityCode)
                    .HasName("PK_dbo.FacilityResponseModels");

                entity.ToTable("FacilityResponseModels", "dbo");

                entity.Property(e => e.FacilityCode).HasMaxLength(128);
            });

            modelBuilder.Entity<Facilty>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.FacilityCode })
                    .HasName("PK_Facilty_1");

                entity.ToTable("Facilty", "dbo");

                entity.HasIndex(e => new { e.Idclient, e.FacilityCode, e.CountryCode, e.RegionCode, e.ServiceCode })
                    .HasName("IX_Facility_IDclient_CountryRegion")
                    .IsUnique();

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.FacilityCode).HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("(N'BE')");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Owner).HasMaxLength(255);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('_countrywide')");

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'cm')");
            });

            modelBuilder.Entity<FeedBackComments>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.Idtopic, e.Version })
                    .HasName("PK_FeedBackComments_new");

                entity.ToTable("FeedBackComments", "dbo");

                entity.HasIndex(e => e.RowId)
                    .HasName("IX_FeedBackComments")
                    .IsUnique();

                entity.HasIndex(e => new { e.Idclient, e.Idtopic, e.Version, e.IsMaxVersion })
                    .HasName("IX_FeedBackComments_1")
                    .IsUnique();

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.Version).HasDefaultValueSql("((1))");

                entity.Property(e => e.ActionStatus).HasMaxLength(50);

                entity.Property(e => e.ComplianceRanking).HasMaxLength(10);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.FeedBackHeadingCode).HasMaxLength(10);

                entity.Property(e => e.GroupNa)
                    .HasColumnName("GroupNA")
                    .HasMaxLength(50);

                entity.Property(e => e.ImpactRanking)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'-')");

                entity.Property(e => e.IsMaxVersion).HasDefaultValueSql("((1))");

                entity.Property(e => e.IssueOwner).HasMaxLength(100);

                entity.Property(e => e.IssueOwnerCounter).HasMaxLength(10);

                entity.Property(e => e.LastModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RowId)
                    .HasColumnName("rowId")
                    .HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FeedBackCustomList>(entity =>
            {
                entity.HasKey(e => e.IdfeedBackCustomList)
                    .HasName("PK_CustomList");

                entity.ToTable("FeedBackCustomList", "dbo");

                entity.HasIndex(e => new { e.Idclient, e.ContentPanelName })
                    .HasName("IX_UN_LIST_AND_CLIENT")
                    .IsUnique();

                entity.Property(e => e.IdfeedBackCustomList)
                    .HasColumnName("IDFeedBackCustomList")
                    .ValueGeneratedNever();

                entity.Property(e => e.ContentPanelName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.IsShown)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ListName).HasMaxLength(100);
            });

            modelBuilder.Entity<FeedBackCustomListValues>(entity =>
            {
                entity.HasKey(e => new { e.IdfeedBackCustomList, e.Value });

                entity.ToTable("FeedBackCustomListValues", "dbo");

                entity.Property(e => e.IdfeedBackCustomList).HasColumnName("IDFeedBackCustomList");

                entity.Property(e => e.Value).HasMaxLength(100);

                entity.Property(e => e.TextString)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<FeedBackIssueOwners>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FeedBackIssueOwners", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");
            });

            modelBuilder.Entity<FeedBackReminder>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.Idtopic })
                    .HasName("PK_FeedBackReminder_new");

                entity.ToTable("FeedBackReminder", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LastReminded)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PeriodInMonths).HasDefaultValueSql("((3))");
            });

            modelBuilder.Entity<FeedBackVersions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FeedBackVersions", "dbo");

                entity.Property(e => e.ActionStatus).HasMaxLength(50);

                entity.Property(e => e.ComplianceRanking).HasMaxLength(10);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.FnamePerson)
                    .HasColumnName("FNamePerson")
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.ImpactRanking)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.IssueOwner).HasMaxLength(100);

                entity.Property(e => e.IssueOwnerCounter).HasMaxLength(10);

                entity.Property(e => e.LastModified).HasColumnType("datetime");

                entity.Property(e => e.LnamePerson)
                    .HasColumnName("LNamePerson")
                    .HasMaxLength(60);

                entity.Property(e => e.SIndex)
                    .HasColumnName("sIndex")
                    .HasMaxLength(2);
            });

            modelBuilder.Entity<FiltronaNo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("filtronaNo", "dbo");

                entity.Property(e => e.RegId).HasColumnName("RegID");
            });

            modelBuilder.Entity<FiltronaNodtqs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("filtronaNODTQs", "dbo");

                entity.Property(e => e.Answer).HasMaxLength(10);

                entity.Property(e => e.Dtqcode)
                    .HasColumnName("DTQCode")
                    .HasMaxLength(15);

                entity.Property(e => e.Idanswer).HasColumnName("IDAnswer");
            });

            modelBuilder.Entity<FiltronaNoregs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("filtronaNORegs", "dbo");

                entity.Property(e => e.RegId).HasColumnName("RegID");
            });

            modelBuilder.Entity<FiltronaYesdtqs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("filtronaYESDTQS", "dbo");

                entity.Property(e => e.Answer).HasMaxLength(10);

                entity.Property(e => e.Dtqcode)
                    .HasColumnName("DTQCode")
                    .HasMaxLength(15);

                entity.Property(e => e.Idanswer).HasColumnName("IDAnswer");
            });

            modelBuilder.Entity<FiltronaYesregs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("filtronaYESRegs", "dbo");

                entity.Property(e => e.RegId).HasColumnName("RegID");
            });

            modelBuilder.Entity<FlashEmails>(entity =>
            {
                entity.HasKey(e => new { e.Email, e.LanguageCode });

                entity.ToTable("FlashEmails", "dbo");

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FlashMailMerge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FlashMailMerge", "dbo");

                entity.Property(e => e.AdoptionDate1).HasColumnType("datetime");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryCountry)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<FlashMailerDo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FlashMailerDO", "dbo");

                entity.Property(e => e.AdoptionDate1).HasColumnType("datetime");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryCountry)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<FoundationAmendmentMapSqlOracle>(entity =>
            {
                entity.ToTable("FoundationAmendmentMapSqlOracle", "dbo");

                entity.Property(e => e.EnhesaCode)
                    .IsRequired()
                    .HasMaxLength(32);

                entity.Property(e => e.FoundationCe)
                    .IsRequired()
                    .HasColumnName("FoundationCE")
                    .HasMaxLength(32);

                entity.Property(e => e.ImplmentType)
                    .IsRequired()
                    .HasMaxLength(32);
            });

            modelBuilder.Entity<GeApAuditQn1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GE_AP_AuditQn1", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("date");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewResearchDateQnText)
                    .HasColumnName("newResearchDateQnText")
                    .HasColumnType("date");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SetCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<GeApHeadingsMsc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GE_AP_HeadingsMSC", "dbo");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Msc)
                    .HasColumnName("MSC")
                    .HasMaxLength(2);

                entity.Property(e => e.SetCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<GeCutoffDates2005>(entity =>
            {
                entity.HasKey(e => new { e.CountryCode, e.RegionCode });

                entity.ToTable("GE_CutoffDates2005", "dbo");

                entity.Property(e => e.CountryCode).HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.DateCutoff).HasColumnType("smalldatetime");

                entity.Property(e => e.HasQnCode)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<GeneralBase>(entity =>
            {
                entity.HasKey(e => e.TextCode);

                entity.ToTable("GeneralBase", "dbo");

                entity.Property(e => e.TextCode).HasMaxLength(50);

                entity.Property(e => e.Url).HasMaxLength(200);
            });

            modelBuilder.Entity<GeneralText>(entity =>
            {
                entity.HasKey(e => new { e.LanguageCode, e.TextCode })
                    .HasName("aaaaaGeneralText_PK");

                entity.ToTable("GeneralText", "dbo");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.TextCode).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            });

            modelBuilder.Entity<Groups>(entity =>
            {
                entity.HasKey(e => e.GroupName)
                    .HasName("aaaaaGroups_PK")
                    .IsClustered(false);

                entity.ToTable("Groups", "dbo");

                entity.Property(e => e.GroupName).HasMaxLength(1);

                entity.Property(e => e.Description).HasMaxLength(255);
            });

            modelBuilder.Entity<Heading>(entity =>
            {
                entity.HasKey(e => e.HeadingCode)
                    .HasName("aaaaaHeading_PK");

                entity.ToTable("Heading", "dbo");

                entity.HasIndex(e => new { e.SortCode, e.HeadingCode })
                    .HasName("SortCode");

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.InternalDescription).IsUnicode(false);

                entity.Property(e => e.MidLevelHeadingCode)
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.SortCode)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TopLevelHeadingCode).HasMaxLength(15);
            });

            modelBuilder.Entity<HeadingMain>(entity =>
            {
                entity.HasKey(e => e.Main)
                    .HasName("aaaaaHeadingMain_PK");

                entity.ToTable("HeadingMain", "dbo");

                entity.Property(e => e.Main).HasMaxLength(15);
            });

            modelBuilder.Entity<HeadingSet>(entity =>
            {
                entity.HasKey(e => e.SetCode)
                    .HasName("aaaaaHeadingSet_PK");

                entity.ToTable("HeadingSet", "dbo");

                entity.Property(e => e.SetCode).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.HeadingSetName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'Heading Set Name')");
            });

            modelBuilder.Entity<HeadingSetCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HeadingSetCode", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SetCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HeadingSetCode1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HeadingSetCode", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SetCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HeadingSetCode2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HeadingSetCode", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SetCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HeadingSetCode3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HeadingSetCode", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SetCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HeadingSetText>(entity =>
            {
                entity.HasKey(e => new { e.SetCode, e.LanguageCode });

                entity.ToTable("HeadingSetText", "dbo");

                entity.Property(e => e.SetCode).HasMaxLength(50);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.HeadingSetText1)
                    .HasColumnName("HeadingSetText")
                    .HasMaxLength(250);

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            });

            modelBuilder.Entity<HeadingSetsSupersets>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HeadingSets_supersets", "dbo");

                entity.Property(e => e.SetCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SetCodeToMatch)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HeadingSub>(entity =>
            {
                entity.HasKey(e => e.Sub);

                entity.ToTable("HeadingSub", "dbo");

                entity.HasIndex(e => new { e.Sub, e.Main })
                    .HasName("IX_HeadingSub")
                    .IsUnique();

                entity.Property(e => e.Sub).HasMaxLength(15);

                entity.Property(e => e.Main)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<HeadingSubSub>(entity =>
            {
                entity.HasKey(e => e.SubSub);

                entity.ToTable("HeadingSubSub", "dbo");

                entity.HasIndex(e => new { e.SubSub, e.Sub })
                    .HasName("IX_HeadingSubSub")
                    .IsUnique();

                entity.Property(e => e.SubSub).HasMaxLength(15);

                entity.Property(e => e.Sub)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<HeadingText>(entity =>
            {
                entity.HasKey(e => new { e.LanguageCode, e.HeadingCode })
                    .HasName("aaaaaHeadingText_PK");

                entity.ToTable("HeadingText", "dbo");

                entity.HasIndex(e => new { e.HeadingName, e.LanguageCode, e.HeadingCode })
                    .HasName("_dta_index_HeadingText_11_727725695__K2_K1_3");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            });

            modelBuilder.Entity<HistoryAmendment>(entity =>
            {
                entity.HasKey(e => new { e.AmendmentCode, e.RowId })
                    .HasName("PK_Amendment");

                entity.ToTable("history_Amendment", "dbo");

                entity.Property(e => e.AmendmentCode).HasMaxLength(15);

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.AmendmentDate).HasColumnType("datetime");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.RegId)
                    .HasColumnName("RegID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<HistoryAmendmentMonitoringReport>(entity =>
            {
                entity.HasKey(e => new { e.Idtopic, e.AmendmentCode, e.RowId })
                    .HasName("PK_AmendmentMonitoringReport");

                entity.ToTable("history_AmendmentMonitoringReport", "dbo");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.AmendmentCode).HasMaxLength(15);

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryAmendmentText>(entity =>
            {
                entity.HasKey(e => new { e.AmendmentCode, e.LanguageCode, e.RowId })
                    .HasName("PK_AmendmentText");

                entity.ToTable("history_AmendmentText", "dbo");

                entity.Property(e => e.AmendmentCode).HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(N'en')");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.AmendmentRef).HasMaxLength(500);

                entity.Property(e => e.AmendmentTitle)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.Hyperlink).HasMaxLength(255);

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<HistoryBusinessImpactText>(entity =>
            {
                entity.HasKey(e => new { e.IntroId, e.Idclient, e.LanguageCode, e.RowId })
                    .HasName("aaaaaBusinessImpactText_PK");

                entity.ToTable("history_BusinessImpactText", "dbo");

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ProofedBy).HasMaxLength(50);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<HistoryCitationBase>(entity =>
            {
                entity.HasKey(e => new { e.Idcitation, e.RowId })
                    .HasName("PK_CitationBase_new");

                entity.ToTable("history_CitationBase", "dbo");

                entity.HasIndex(e => new { e.RegId, e.Idcitation, e.RowId })
                    .HasName("IX_CitationBase_RegID_IDCitation")
                    .IsUnique();

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.SortOrder)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryCitationQn>(entity =>
            {
                entity.HasKey(e => new { e.QnCode, e.Idcitation, e.RowId })
                    .HasName("PK_CitationQn_new");

                entity.ToTable("history_CitationQn", "dbo");

                entity.HasIndex(e => new { e.QnCode, e.Idcitation, e.RowId, e.Md5 })
                    .HasName("IX_CitationQn_Qn_IDCitation")
                    .IsUnique();

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryCitationText>(entity =>
            {
                entity.HasKey(e => new { e.Idcitation, e.LanguageCode, e.RowId })
                    .HasName("PK_CitationText_new");

                entity.ToTable("history_CitationText", "dbo");

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Citation)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('unknown')");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('unknown')");

                entity.Property(e => e.Text).HasMaxLength(4000);

                entity.Property(e => e.Title).HasMaxLength(1000);
            });

            modelBuilder.Entity<HistoryCoAllServiceVersion>(entity =>
            {
                entity.HasKey(e => new { e.ServiceCode, e.CountryCode, e.RegionCode, e.LanguageCode, e.SetCode, e.IndCode, e.ProductTypeCode, e.RowId });

                entity.ToTable("history_co_all_ServiceVersion", "dbo");

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.SetCode).HasMaxLength(50);

                entity.Property(e => e.IndCode).HasColumnName("indCode");

                entity.Property(e => e.ProductTypeCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('None')");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.ExpectedPublicationDate).HasColumnType("date");

                entity.Property(e => e.Fake).HasDefaultValueSql("('FALSE')");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.RepCode).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<HistoryCoApDerivedQuestion>(entity =>
            {
                entity.HasKey(e => new { e.QnCodeMaster, e.QnCodeDerived, e.RowId })
                    .HasName("PK_Co_Ap_DrivedQuestions");

                entity.ToTable("history_co_ap_DerivedQuestion", "dbo");

                entity.HasIndex(e => new { e.QnCodeMaster, e.QnCodeDerived, e.Archived, e.RowId })
                    .HasName("IX_MasterDerievedQNs_Archived_UniqueID")
                    .IsUnique();

                entity.Property(e => e.QnCodeMaster)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnCodeDerived)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.Notes).HasMaxLength(300);

                entity.Property(e => e.TypeId).HasColumnName("TypeID");
            });

            modelBuilder.Entity<HistoryCoIndustryRegulation>(entity =>
            {
                entity.HasKey(e => new { e.IndCode, e.RegId, e.RowId })
                    .HasName("PK_co_Industry_Regulation");

                entity.ToTable("history_co_Industry_Regulation", "dbo");

                entity.HasIndex(e => new { e.IndCode, e.RowId, e.RegId })
                    .HasName("IX_history_co_Industry_Regulation_Clustred");

                entity.Property(e => e.IndCode).HasColumnName("indCode");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryDecTree>(entity =>
            {
                entity.HasKey(e => new { e.DecTreeCode, e.RowId })
                    .HasName("aaaaaDecTree_PK");

                entity.ToTable("history_DecTree", "dbo");

                entity.HasIndex(e => e.CountryCode)
                    .HasName("CountryCode");

                entity.HasIndex(e => new { e.CountryCode, e.DecTreeCode, e.RegionCode, e.RowId, e.Archived })
                    .HasName("ix_history_DecTree_Archived");

                entity.HasIndex(e => new { e.DecTreeCode, e.RowId, e.CountryCode, e.RegionCode, e.Archived })
                    .HasName("ix_history_DecTree_CountryCode_RegionCode_Archived");

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.GeographicType).HasMaxLength(15);

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('_countrywide')");

                entity.Property(e => e.ReleaseComment).IsUnicode(false);

                entity.Property(e => e.ReleaseNote)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryDecTreeCodeDecTreeCode>(entity =>
            {
                entity.HasKey(e => new { e.DecTreeCodeChild, e.DecTreeCodeParent, e.RowId })
                    .HasName("aaaaaDecTreeCodeDecTreeCode_PK");

                entity.ToTable("history_DecTreeCodeDecTreeCode", "dbo");

                entity.Property(e => e.DecTreeCodeChild).HasMaxLength(15);

                entity.Property(e => e.DecTreeCodeParent).HasMaxLength(15);

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryDecTreeQnHeading>(entity =>
            {
                entity.HasKey(e => new { e.DecTreeCode, e.HeadingCode, e.RowId })
                    .HasName("aaaaaDecTreeQnHeading_PK");

                entity.ToTable("history_DecTreeQnHeading", "dbo");

                entity.HasIndex(e => e.DecTreeCode)
                    .HasName("DecTreeCode");

                entity.HasIndex(e => e.HeadingCode)
                    .HasName("HeadingCode");

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryDecTreeText>(entity =>
            {
                entity.HasKey(e => new { e.DecTreeCode, e.LanguageCode, e.RowId })
                    .HasName("aaaaaDecTreeText_PK");

                entity.ToTable("history_DecTreeText", "dbo");

                entity.HasIndex(e => e.LanguageCode)
                    .HasName("{9A76D39D-DB5D-4DBA-8EC3-3B23CE30860D}");

                entity.HasIndex(e => e.ModifiedBy)
                    .HasName("{5E2C4700-8F8A-476F-BCF5-45464AE6D614}");

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<HistoryDefinition>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.DefNumber, e.RowId })
                    .HasName("aaaaaDefinition_PK");

                entity.ToTable("history_Definition", "dbo");

                entity.HasIndex(e => e.DefNumber)
                    .HasName("DefNumber");

                entity.HasIndex(e => e.RegId)
                    .HasName("{BB58959F-4B48-4B0C-80C2-FB15F06E5130}");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryDefinitionText>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.DefNumber, e.LanguageCode, e.RowId })
                    .HasName("aaaaaDefinitionText_PK");

                entity.ToTable("history_DefinitionText", "dbo");

                entity.HasIndex(e => e.LanguageCode)
                    .HasName("{C63B16E4-BE0F-4D85-BE55-59DA11B36293}");

                entity.HasIndex(e => e.ModifiedBy)
                    .HasName("{F9186CDD-909A-40CF-A04B-FC079F13351D}");

                entity.HasIndex(e => new { e.DefNumber, e.RegId })
                    .HasName("{C01EADFD-1C79-41C9-9E8C-A695F444D86E}");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DefExpression)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Hyperlink).HasMaxLength(255);

                entity.Property(e => e.HyperlinkText).HasMaxLength(255);

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<HistoryHeadingSetCode>(entity =>
            {
                entity.HasKey(e => new { e.SetCode, e.HeadingCode, e.RowId })
                    .HasName("PK_HeadingSetCode");

                entity.ToTable("history_HeadingSetCode", "dbo");

                entity.HasIndex(e => new { e.HeadingCode, e.RowId, e.SetCode })
                    .HasName("IX_HeadingSetCode_SetCode");

                entity.HasIndex(e => new { e.RowId, e.SetCode, e.HeadingCode })
                    .HasName("IX_HeadingSetCode_RowID");

                entity.Property(e => e.SetCode).HasMaxLength(50);

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryIntro>(entity =>
            {
                entity.HasKey(e => new { e.IntroId, e.RowId })
                    .HasName("aaaaaIntro_PK");

                entity.ToTable("history_Intro", "dbo");

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('_countrywide')");
            });

            modelBuilder.Entity<HistoryIntroText>(entity =>
            {
                entity.HasKey(e => new { e.IntroId, e.LanguageCode, e.RowId })
                    .HasName("aaaaaIntroText_PK");

                entity.ToTable("history_IntroText", "dbo");

                entity.HasIndex(e => new { e.LanguageCode, e.IntroId })
                    .HasName("LanguageCode");

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ProofedBy).HasMaxLength(50);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<HistoryLgRegulationCountryRegion>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.RegionCode, e.CountryCode, e.RowId })
                    .HasName("PK_ls_RegulationCountryRegion");

                entity.ToTable("history_lg_RegulationCountryRegion", "dbo");

                entity.HasIndex(e => new { e.CountryCode, e.RegionCode, e.RegId })
                    .HasName("IX_lg_RegulationCountryRegion_CountryCode_RegionCode");

                entity.HasIndex(e => new { e.RegId, e.RegionCode, e.CountryCode })
                    .HasName("ix2_lg_RegulationCountryRegion");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryQn>(entity =>
            {
                entity.HasKey(e => new { e.QnCode, e.RowId })
                    .HasName("aaaaaQn_PK");

                entity.ToTable("history_Qn", "dbo");

                entity.HasIndex(e => new { e.QnCode, e.CountryCode, e.RegionCode, e.RowId })
                    .HasName("IX_QN_CoutryRegion")
                    .IsUnique();

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.AutoId)
                    .HasColumnName("autoID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsRevised)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LastModifiedDateBaseLanguage)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Note).HasMaxLength(255);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReleaseComment).IsUnicode(false);

                entity.Property(e => e.ReleaseNote)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<HistoryQnImage>(entity =>
            {
                entity.HasKey(e => new { e.QnCode, e.ImageLink, e.RowId })
                    .HasName("PK_QnImages");

                entity.ToTable("history_QnImage", "dbo");

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ImageLink).HasMaxLength(200);

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryQnItems>(entity =>
            {
                entity.HasKey(e => new { e.QnCode, e.LanguageCode, e.ItemId, e.RowId })
                    .HasName("PK_QnItems");

                entity.ToTable("history_QnItems", "dbo");

                entity.HasIndex(e => new { e.RowId, e.QnCode, e.LanguageCode, e.ItemId, e.SortCode })
                    .HasName("IX_history_QnItems_SortCode");

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.AutoId)
                    .HasColumnName("autoID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryQnText>(entity =>
            {
                entity.HasKey(e => new { e.QnCode, e.LanguageCode, e.RowId })
                    .HasName("aaaaaQnText_PK");

                entity.ToTable("history_QnText", "dbo");

                entity.HasIndex(e => new { e.LastModifiedDate, e.QnCode, e.LanguageCode })
                    .HasName("ix_LanguageCode");

                entity.HasIndex(e => new { e.Qn, e.QnCode, e.RowId, e.LanguageCode })
                    .HasName("ix_history_QnText_LanguageCode");

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.AutoId)
                    .HasColumnName("autoID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.Documents).HasMaxLength(50);

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ProofedBy).HasMaxLength(255);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Qn).HasColumnType("nvarchar(max)");

                entity.Property(e => e.QnGuideNote).HasDefaultValueSql("('No further guidance has been provided.')");

                entity.Property(e => e.QnTitle).HasMaxLength(1000);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<HistoryRegulation>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.RowId })
                    .HasName("aaaaaRegulation_PK");

                entity.ToTable("history_Regulation", "dbo");

                entity.HasIndex(e => new { e.CountryCode, e.RegId, e.RowId })
                    .HasName("ix_Regulation_CountryCode");

                entity.HasIndex(e => new { e.RegId, e.CountryCode, e.Archive })
                    .HasName("IX_Regulation_2");

                entity.HasIndex(e => new { e.CountryCode, e.RegId, e.RowId, e.Archive })
                    .HasName("ix_history_Regulation_Archive");

                entity.HasIndex(e => new { e.Archive, e.ReferenceDate, e.RegId, e.RegulationReference, e.RegulationType, e.RowId, e.SortCode, e.CountryCode })
                    .HasName("ix_history_Regulation_CountryCode");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.ApcoverageNote)
                    .HasColumnName("APCoverageNote")
                    .HasMaxLength(500);

                entity.Property(e => e.ApcoverageType)
                    .HasColumnName("APCoverageType")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.Effective)
                    .IsRequired()
                    .HasColumnName("effective")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsEnforced)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsLegislation)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MrcoverageNote)
                    .HasColumnName("MRCoverageNote")
                    .HasMaxLength(500);

                entity.Property(e => e.MrcoverageType)
                    .HasColumnName("MRCoverageType")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PublicationReference).HasMaxLength(100);

                entity.Property(e => e.ReasonArchived).HasMaxLength(1000);

                entity.Property(e => e.ReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.RegCode).HasMaxLength(90);

                entity.Property(e => e.RegComment).HasMaxLength(4000);

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('Reg')");

                entity.Property(e => e.ResearchDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ShortAccronym)
                    .HasMaxLength(16)
                    .IsFixedLength();

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<HistoryRegulationDecTreeQn>(entity =>
            {
                entity.HasKey(e => new { e.DecTreeCode, e.RegId, e.RowId })
                    .HasName("aaaaaRegulationDecTreeQn_PK");

                entity.ToTable("history_RegulationDecTreeQn", "dbo");

                entity.HasIndex(e => new { e.DecTreeCode, e.RegId, e.RowId })
                    .HasName("IX_HistroyRegDTQ_Link")
                    .IsUnique();

                entity.HasIndex(e => new { e.DecTreeCode, e.RowId, e.RegId })
                    .HasName("ix_history_RegulationDecTreeQn_RegID");

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.MainDtq).HasDefaultValueSql("((1))");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryRegulationHeading>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.HeadingCode, e.RowId })
                    .HasName("aaaaaRegulationHeading_PK");

                entity.ToTable("history_RegulationHeading", "dbo");

                entity.HasIndex(e => new { e.RegId, e.HeadingCode })
                    .HasName("ix_history_RegulationHeading_HeadingCode");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryRegulationMonitoringReport>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.Idtopic, e.RowId })
                    .HasName("aaaaaRegulationMonitoringReport_PK");

                entity.ToTable("history_RegulationMonitoringReport", "dbo");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryRegulationRegulation>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.ChildRegId, e.RowId })
                    .HasName("aaaaaRegulationRegulation_PK");

                entity.ToTable("history_RegulationRegulation", "dbo");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.ChildRegId).HasColumnName("ChildRegID");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryRegulationRegulationInternational>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.ChildRegId, e.RowId })
                    .HasName("PK_RegulationRegulationInternational");

                entity.ToTable("history_RegulationRegulationInternational", "dbo");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.ChildRegId).HasColumnName("ChildRegID");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryRegulationRepeal>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.RegIdrepealed, e.RowId })
                    .HasName("PK_RegulationRepeal");

                entity.ToTable("history_RegulationRepeal", "dbo");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegIdrepealed).HasColumnName("RegIDRepealed");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.RepealDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<HistoryRegulationText>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.LanguageCode, e.RowId })
                    .HasName("aaaaaRegulationText_PK");

                entity.ToTable("history_RegulationText", "dbo");

                entity.HasIndex(e => new { e.RegTitle, e.RegId, e.LanguageCode, e.RowId })
                    .HasName("IX_RegulationTexT")
                    .IsUnique();

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ConsolidatedHyperlink).HasMaxLength(255);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Unknown')");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Unknown')");

                entity.Property(e => e.RegHyperlink).HasMaxLength(255);

                entity.Property(e => e.RegSummary).HasMaxLength(4000);

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RepealNote).HasMaxLength(500);

                entity.Property(e => e.ValidityDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<HistoryRequiredAnswer>(entity =>
            {
                entity.HasKey(e => new { e.DecTreeCode, e.QnCode, e.RowId })
                    .HasName("PK_RequiredAnswer");

                entity.ToTable("history_RequiredAnswer", "dbo");

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryTopicHeading>(entity =>
            {
                entity.HasKey(e => new { e.Idtopic, e.HeadingCode, e.RowId })
                    .HasName("PK_TopicHeading");

                entity.ToTable("history_TopicHeading", "dbo");

                entity.HasIndex(e => new { e.Idtopic, e.RowId, e.HeadingCode })
                    .HasName("ix_history_TopicHeading_HeadingCode");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryTopicKeyword>(entity =>
            {
                entity.HasKey(e => new { e.Idtopic, e.IdkeyWord, e.RowId })
                    .HasName("PK_TOPICKEYWORD");

                entity.ToTable("history_TopicKeyword", "dbo");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IdkeyWord).HasColumnName("IDKeyWord");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryV2CountryFactSheetBase>(entity =>
            {
                entity.HasKey(e => new { e.CfsBcountryCode, e.RowId })
                    .HasName("PK_V2_CountryFactSheet_Base");

                entity.ToTable("history_V2_CountryFactSheet_Base", "dbo");

                entity.Property(e => e.CfsBcountryCode)
                    .HasColumnName("cfsBCountryCode")
                    .HasMaxLength(2);

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.CfsBaccidentsDate)
                    .HasColumnName("cfsBAccidentsDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBapproximateExchangeRateToDollar).HasColumnName("cfsBApproximateExchangeRateToDollar");

                entity.Property(e => e.CfsBaverageAnnualincome)
                    .HasColumnName("cfsBAverageAnnualincome")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBaverageIncomeDate)
                    .HasColumnName("cfsBAverageIncomeDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBcapitalDate)
                    .HasColumnName("cfsBCapitalDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBcapitalPop)
                    .HasColumnName("cfsBCapitalPop")
                    .HasMaxLength(50);

                entity.Property(e => e.CfsBcurrencyDate)
                    .HasColumnName("cfsBCurrencyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBflag).HasColumnName("cfsBFlag");

                entity.Property(e => e.CfsBheadOofState)
                    .HasColumnName("cfsBHeadOofState")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBinternationalDialingCcode)
                    .HasColumnName("cfsBInternationalDialingCcode")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBlabourStructureDate)
                    .HasColumnName("cfsBLabourStructureDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBlifeExpectancyDate)
                    .HasColumnName("cfsBLifeExpectancyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBmajorCitiesDate)
                    .HasColumnName("cfsBMajorCitiesDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBmap).HasColumnName("cfsBMap");

                entity.Property(e => e.CfsBpopulation)
                    .HasColumnName("cfsBPopulation")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBpopulationDate)
                    .HasColumnName("cfsBPopulationDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBprimeMinister)
                    .HasColumnName("cfsBPrimeMinister")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBprimeMinisterDate)
                    .HasColumnName("cfsBPrimeMinisterDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBpublicHolidaysDate)
                    .HasColumnName("cfsBPublicHolidaysDate")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBtradePartnersDate)
                    .HasColumnName("cfsBTradePartnersDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsLastReviewedBy)
                    .HasColumnName("cfsLastReviewedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.CfsLastReviewedDate)
                    .HasColumnName("cfsLastReviewedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryV2CountryFactSheetText>(entity =>
            {
                entity.HasKey(e => new { e.CfsTcountryCode, e.CfsTlanguageCode, e.RowId })
                    .HasName("aaaaaV2_CountryFactSheet_Text_PK");

                entity.ToTable("history_V2_CountryFactSheet_Text", "dbo");

                entity.HasIndex(e => e.CfsTcountryCode)
                    .HasName("V2_cfs_T_CountryCode");

                entity.Property(e => e.CfsTcountryCode)
                    .HasColumnName("cfsTCountryCode")
                    .HasMaxLength(2);

                entity.Property(e => e.CfsTlanguageCode)
                    .HasColumnName("cfsTLanguageCode")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.CfsLastModifiedBy)
                    .HasColumnName("cfsLastModifiedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.CfsLastModifiedDate)
                    .HasColumnName("cfsLastModifiedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsT3daysAbsenceAccidents)
                    .HasColumnName("cfsT3DaysAbsenceAccidents")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTareaComparative)
                    .HasColumnName("cfsTAreaComparative")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTcapital)
                    .HasColumnName("cfsTCapital")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTclimate).HasColumnName("cfsTClimate");

                entity.Property(e => e.CfsTcurrentEnvironmentalIssues).HasColumnName("cfsTCurrentEnvironmentalIssues");

                entity.Property(e => e.CfsTfatalWorkAaccidents)
                    .HasColumnName("cfsTFatalWorkAaccidents")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTinternationalAirports).HasColumnName("cfsTInternationalAirports");

                entity.Property(e => e.CfsTlabourStructure)
                    .HasColumnName("cfsTLabourStructure")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTlifeexpectancy)
                    .HasColumnName("cfsTLifeexpectancy")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTlocation).HasColumnName("cfsTLocation");

                entity.Property(e => e.CfsTmainExports)
                    .HasColumnName("cfsTMainExports")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTmainIndustries).HasColumnName("cfsTMainIndustries");

                entity.Property(e => e.CfsTmajorCities).HasColumnName("cfsTMajorCities");

                entity.Property(e => e.CfsTmajorLanguage)
                    .HasColumnName("cfsTMajorLanguage")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTmajorReligion)
                    .HasColumnName("cfsTMajorReligion")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTmajorTradePartners).HasColumnName("cfsTMajorTradePartners");

                entity.Property(e => e.CfsTmonetaryUnit)
                    .HasColumnName("cfsTMonetaryUnit")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTpublicHolidays).HasColumnName("cfsTPublicHolidays");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryV2ImplementationBase>(entity =>
            {
                entity.HasKey(e => new { e.Idimplementation, e.RowId })
                    .HasName("aaaaav2_Implementation_Base_PK");

                entity.ToTable("history_v2_Implementation_Base", "dbo");

                entity.HasIndex(e => new { e.Idtopic, e.Idimplementation, e.Repetition, e.ImplementationDate })
                    .HasName("ix_history_v2_Implementation_Base_ImplementationDate");

                entity.Property(e => e.Idimplementation).HasColumnName("IDImplementation");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.Idtopic)
                    .HasColumnName("IDTopic")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImplementationDate).HasColumnType("datetime");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");
            });

            modelBuilder.Entity<HistoryV2ImplementationText>(entity =>
            {
                entity.HasKey(e => new { e.Idimplementation, e.LanguageCode, e.RowId })
                    .HasName("PK_v2_Implementation_Text");

                entity.ToTable("history_v2_Implementation_Text", "dbo");

                entity.HasIndex(e => new { e.RowId, e.Idimplementation, e.LanguageCode })
                    .HasName("ix_history_v2_Implementation_Text_LanguageCode");

                entity.Property(e => e.Idimplementation).HasColumnName("IDImplementation");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(N'en')");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.DateLastModified).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks).HasMaxLength(4000);
            });

            modelBuilder.Entity<HistoryV2MrBusinessImpactBase>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.Idtopic, e.RowId })
                    .HasName("PK_v2_mr_BusinessImpact_Base");

                entity.ToTable("history_v2_mr_BusinessImpact_Base", "dbo");

                entity.HasIndex(e => new { e.Idclient, e.Idtopic, e.RowId, e.ClientReportDate })
                    .HasName("IX_history_v2_mr_BusinessImpact_Base_ClientReportDate_RowID");

                entity.HasIndex(e => new { e.RowId, e.Idtopic, e.Idclient, e.ClientReportDate })
                    .HasName("IX_history_v2_mr_BusinessImpact_Base_ClientReportDate");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.ClientReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Importance)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryV2MrBusinessImpactText>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.Idtopic, e.LanguageCode, e.RowId })
                    .HasName("PK_v2_mr_BusinessImpact_Text");

                entity.ToTable("history_v2_mr_BusinessImpact_Text", "dbo");

                entity.HasIndex(e => new { e.Idclient, e.RowId, e.Idtopic, e.LanguageCode })
                    .HasName("ix_history_v2_mr_BusinessImpact_Text_IDTopic_LanguageCode");

                entity.HasIndex(e => new { e.RowId, e.Idtopic, e.Idclient, e.LanguageCode })
                    .HasName("ix_v2_mr_BusinessImpact_Text")
                    .IsUnique();

                entity.HasIndex(e => new { e.Idclient, e.Idtopic, e.Md5, e.ModifiedBy, e.RowId, e.Status, e.LanguageCode })
                    .HasName("ix_history_v2_mr_BusinessImpact_Text_LanguageCode");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(N'en')");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.AnalysisBusinessImpact).HasMaxLength(4000);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateLastModified)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryV2TopicBase>(entity =>
            {
                entity.HasKey(e => new { e.Idtopic, e.RowId })
                    .HasName("PK_v2_Topic_Base");

                entity.ToTable("history_v2_Topic_Base", "dbo");

                entity.HasIndex(e => e.AdoptionDate)
                    .HasName("AdoptionDate");

                entity.HasIndex(e => e.CountryCode)
                    .HasName("IX_v2_Topic_Base_CountryCode");

                entity.HasIndex(e => e.Idcontact)
                    .HasName("IDContact");

                entity.HasIndex(e => e.Idproduct)
                    .HasName("IDProduct");

                entity.HasIndex(e => e.InternalCode)
                    .HasName("InternalCode");

                entity.HasIndex(e => e.ReportDate)
                    .HasName("ReportDate");

                entity.HasIndex(e => new { e.CountryCode, e.Idstatus, e.Archived })
                    .HasName("IX_ArchivedIDTopic");

                entity.HasIndex(e => new { e.Idstatus, e.Idtopic, e.RowId })
                    .HasName("IDStatus");

                entity.HasIndex(e => new { e.Idtopic, e.CountryCode, e.Idstatus })
                    .HasName("ix_history_v2_Topic_Base_CountryCode_IDStatus");

                entity.HasIndex(e => new { e.CountryCode, e.Idtopic, e.RowId, e.ReportDate })
                    .HasName("ix_history_v2_Topic_Base_ReportDate");

                entity.HasIndex(e => new { e.Idtopic, e.RowId, e.Idstatus, e.Archived })
                    .HasName("ix_history_v2_Topic_Base_IDStatus_Archived");

                entity.HasIndex(e => new { e.Idtopic, e.RowId, e.CountryCode, e.Idstatus, e.Archived })
                    .HasName("ix_history_v2_Topic_Base_CountryCode_IDStatus_Archived");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.AdoptionDate).HasColumnType("datetime");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.ContactType)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.Idcontact).HasColumnName("IDContact");

                entity.Property(e => e.Idproduct)
                    .HasColumnName("IDProduct")
                    .HasMaxLength(10);

                entity.Property(e => e.Idstatus).HasColumnName("IDStatus");

                entity.Property(e => e.InternalCode).HasMaxLength(50);

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.RegCitationlinked).HasDefaultValueSql("((0))");

                entity.Property(e => e.ReportDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<HistoryV2TopicRegion>(entity =>
            {
                entity.HasKey(e => new { e.Idtopic, e.CountryCode, e.RegionCode, e.RowId })
                    .HasName("PK_v2_TopicRegion");

                entity.ToTable("history_v2_TopicRegion", "dbo");

                entity.HasIndex(e => new { e.Idtopic, e.RowId, e.CountryCode, e.RegionCode })
                    .HasName("ix_history_v2_TopicRegion_CountryCode_RegionCode");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'_countrywide')");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryV2TopicText>(entity =>
            {
                entity.HasKey(e => new { e.Idtopic, e.LanguageCode, e.RowId })
                    .HasName("aaaaav2_Topic_Text_PK");

                entity.ToTable("history_v2_Topic_Text", "dbo");

                entity.HasIndex(e => new { e.Idtopic, e.LanguageCode })
                    .HasName("ix_history_v2_Topic_Text_LanguageCode");

                entity.HasIndex(e => new { e.Topic, e.Idtopic, e.LanguageCode })
                    .HasName("ix_v2_Topic_Text_Topic");

                entity.HasIndex(e => new { e.LanguageCode, e.Idtopic, e.RowId, e.Topic })
                    .HasName("ix_history_v2_Topic_Text_LanguageCode_Topic");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.AffectedOperations).HasMaxLength(150);

                entity.Property(e => e.ArchiveReference).HasMaxLength(100);

                entity.Property(e => e.AuthorId).HasColumnName("AuthorID");

                entity.Property(e => e.AuthorInformation).HasMaxLength(255);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateLastModified)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EnforcingAuthority).HasMaxLength(255);

                entity.Property(e => e.IssuingAuthority).HasMaxLength(255);

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.PrintedforQc).HasColumnName("PrintedforQC");

                entity.Property(e => e.PrintedforQcby)
                    .HasColumnName("PrintedforQCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.PrintedforQcdate)
                    .HasColumnName("PrintedforQCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProofReadBy).HasMaxLength(50);

                entity.Property(e => e.ProofReadDate).HasColumnType("datetime");

                entity.Property(e => e.Qc).HasColumnName("QC");

                entity.Property(e => e.Qcby)
                    .HasColumnName("QCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.Qcdate)
                    .HasColumnName("QCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rapid).HasMaxLength(4000);

                entity.Property(e => e.RapidComments).HasMaxLength(250);

                entity.Property(e => e.ReadyforPublicationBy).HasMaxLength(50);

                entity.Property(e => e.ReadyforPublicationDate).HasColumnType("datetime");

                entity.Property(e => e.ReadyforQc).HasColumnName("ReadyforQC");

                entity.Property(e => e.ReadyforQcby)
                    .HasColumnName("ReadyforQCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.ReadyforQcdate)
                    .HasColumnName("ReadyforQCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegulatoryText).HasMaxLength(255);

                entity.Property(e => e.ReviewedBy).HasMaxLength(50);

                entity.Property(e => e.ReviewedDate).HasColumnType("datetime");

                entity.Property(e => e.SentBy).HasMaxLength(50);

                entity.Property(e => e.SentDate).HasColumnType("datetime");

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.TranslatedBy).HasMaxLength(50);

                entity.Property(e => e.TranslatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<HospiraUsidtopics>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HospiraUSIDTopics", "dbo");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.ReportDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Iislog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("IISLog", "dbo");

                entity.HasIndex(e => e.FileName);

                entity.HasIndex(e => e.LogDateTime);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.Cip)
                    .HasColumnName("CIP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CsBytes)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CsHost)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CsMethod)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CsUserName).HasMaxLength(50);

                entity.Property(e => e.CsVersion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LogDateTime).HasColumnType("datetime");

                entity.Property(e => e.ScBytes)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScSubStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScWin32Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScomputerName)
                    .HasColumnName("SComputerName")
                    .HasMaxLength(50);

                entity.Property(e => e.Sip)
                    .HasColumnName("SIP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sport)
                    .HasColumnName("SPort")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SsiteName)
                    .HasColumnName("SSiteName")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TimeTaken)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IislogMonitoringReport>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("IISLogMonitoringReport", "dbo");

                entity.Property(e => e.LogId)
                    .HasColumnName("LogID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");
            });

            modelBuilder.Entity<IislogRegulation>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK_IISLogRegulationStatus");

                entity.ToTable("IISLogRegulation", "dbo");

                entity.Property(e => e.LogId)
                    .HasColumnName("LogID")
                    .ValueGeneratedNever();

                entity.Property(e => e.RegId).HasColumnName("RegID");
            });

            modelBuilder.Entity<Implementation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("IMPLEMENTATION", "dbo");

                entity.Property(e => e.Idimplementation).HasColumnName("IDImplementation");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.ImplementationDate).HasColumnType("datetime");

                entity.Property(e => e.Remarks).HasMaxLength(4000);
            });

            modelBuilder.Entity<IndustrySector>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("IndustrySector", "dbo");

                entity.Property(e => e.IndustrySectorText).HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IndustrySectorBase>(entity =>
            {
                entity.HasKey(e => e.IndustrySectorCode);

                entity.ToTable("IndustrySector_base", "dbo");

                entity.Property(e => e.IndustrySectorCode).ValueGeneratedNever();
            });

            modelBuilder.Entity<IndustrySectorText>(entity =>
            {
                entity.HasKey(e => new { e.IndustrySectorCode, e.LanguageCode })
                    .HasName("PK_IndustrySector");

                entity.ToTable("IndustrySector_text", "dbo");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.IndustrySectorText1)
                    .HasColumnName("IndustrySectorText")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Intro>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Intro", "dbo");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Intro1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Intro", "published");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Intro2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Intro", "temporal");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Intro3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Intro", "workflow");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IntroText>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("IntroText", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ProofedBy).HasMaxLength(50);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IntroText1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("IntroText", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ProofedBy).HasMaxLength(50);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IntroText2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("IntroText", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ProofedBy).HasMaxLength(50);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IntroText3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("IntroText", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ProofedBy).HasMaxLength(50);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IntroWordCounts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("IntroWordCounts", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Heading)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Region).HasMaxLength(25);
            });

            modelBuilder.Entity<IsCloseBoxCountryRegionList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("is_CloseBoxCountryRegionList", "dbo");

                entity.Property(e => e.OptionText).HasMaxLength(290);

                entity.Property(e => e.OptionValue).HasMaxLength(125);
            });

            modelBuilder.Entity<IsCountryRegionList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("is_CountryRegionList", "dbo");

                entity.Property(e => e.OptionText)
                    .IsRequired()
                    .HasMaxLength(201);

                entity.Property(e => e.OptionValue)
                    .IsRequired()
                    .HasMaxLength(53);
            });

            modelBuilder.Entity<IvoryCostLanguageIssue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("IvoryCost LanguageIssue", "dbo");

                entity.Property(e => e.BasedIn)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CountryCode).HasMaxLength(50);

                entity.Property(e => e.Ehs)
                    .HasColumnName("EHS")
                    .HasMaxLength(255);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.FnamePerson)
                    .HasColumnName("FNamePerson")
                    .HasMaxLength(50);

                entity.Property(e => e.Glb).HasColumnName("GLB");

                entity.Property(e => e.Hs).HasColumnName("HS");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");

                entity.Property(e => e.Language).HasMaxLength(255);

                entity.Property(e => e.LnamePerson)
                    .HasColumnName("LNamePerson")
                    .HasMaxLength(60);

                entity.Property(e => e.Op)
                    .HasColumnName("OP")
                    .HasMaxLength(50);

                entity.Property(e => e.Organisation).HasMaxLength(180);
            });

            modelBuilder.Entity<Keyword>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("KEYWORD", "dbo");

                entity.Property(e => e.CategoryKeyWord).HasMaxLength(200);

                entity.Property(e => e.IdkeyWord).HasColumnName("IDKeyWord");

                entity.Property(e => e.MainKeyWord).HasMaxLength(200);

                entity.Property(e => e.SubKeyWord).HasMaxLength(200);
            });

            modelBuilder.Entity<Lang>(entity =>
            {
                entity.HasKey(e => e.LanguageCode)
                    .HasName("aaaaaLang_PK");

                entity.ToTable("Lang", "dbo");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Lcid).HasColumnName("LCID");
            });

            modelBuilder.Entity<LanguageText>(entity =>
            {
                entity.HasKey(e => new { e.LanguageCode, e.InLanguageCode })
                    .HasName("aaaaaLanguageText_PK");

                entity.ToTable("LanguageText", "dbo");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.InLanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(CONVERT([datetime],CONVERT([varchar],getdate(),(1)),(1)))");

                entity.Property(e => e.LanguageName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LastPublishedTopics>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LastPublishedTopics", "dbo");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.ReportDate)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<LeadSector>(entity =>
            {
                entity.HasKey(e => new { e.LeadSectorCode, e.LanguageCode });

                entity.ToTable("LeadSector", "dbo");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(N'en')");

                entity.Property(e => e.LeadSectorText)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LgRegulationCountryRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lg_RegulationCountryRegion", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LgRegulationCountryRegion1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lg_RegulationCountryRegion", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LgRegulationCountryRegion2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lg_RegulationCountryRegion", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LgRegulationCountryRegion3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lg_RegulationCountryRegion", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LgRegulationCountryRegionIncludeFederal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lg_RegulationCountryRegionIncludeFederal", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCodeOriginal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SetCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Links>(entity =>
            {
                entity.HasKey(e => e.Url)
                    .HasName("aaaaaLinks_PK");

                entity.ToTable("Links", "dbo");

                entity.HasIndex(e => e.Category)
                    .HasName("category");

                entity.Property(e => e.Url)
                    .HasColumnName("url")
                    .HasMaxLength(255);

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(50);

                entity.Property(e => e.CostDetails).HasMaxLength(255);

                entity.Property(e => e.LastReviewed).HasColumnType("datetime");

                entity.Property(e => e.MonitoringPriority).HasMaxLength(20);

                entity.Property(e => e.SubscriptionDetails).HasMaxLength(255);

                entity.Property(e => e.WebsiteComments).HasMaxLength(4000);
            });

            modelBuilder.Entity<LinksCountry>(entity =>
            {
                entity.HasKey(e => new { e.Url, e.CountryCode, e.RegionCode })
                    .HasName("aaaaaLinksCountry_PK");

                entity.ToTable("LinksCountry", "dbo");

                entity.HasIndex(e => e.CountryCode)
                    .HasName("CountryCode");

                entity.HasIndex(e => e.Url)
                    .HasName("{06EE66BF-B942-4808-AFFD-65AF137B4BAB}");

                entity.Property(e => e.Url)
                    .HasColumnName("url")
                    .HasMaxLength(255);

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('_countrywide')");
            });

            modelBuilder.Entity<LinksHeading>(entity =>
            {
                entity.HasKey(e => new { e.Url, e.HeadingCode })
                    .HasName("aaaaaLinksHeading_PK")
                    .IsClustered(false);

                entity.ToTable("LinksHeading", "dbo");

                entity.HasIndex(e => e.Url)
                    .HasName("{833F2AC6-13C8-4FF5-B00C-B65DF347013E}");

                entity.Property(e => e.Url)
                    .HasColumnName("url")
                    .HasMaxLength(255);

                entity.Property(e => e.HeadingCode).HasMaxLength(15);
            });

            modelBuilder.Entity<LinksKeyword>(entity =>
            {
                entity.HasKey(e => new { e.Url, e.Idkeyword })
                    .HasName("aaaaaLinksKeyword_PK")
                    .IsClustered(false);

                entity.ToTable("LinksKeyword", "dbo");

                entity.HasIndex(e => e.Url)
                    .HasName("{B2385225-65E9-4224-9380-8FC8F03DE60F}");

                entity.Property(e => e.Url)
                    .HasColumnName("url")
                    .HasMaxLength(255);

                entity.Property(e => e.Idkeyword).HasColumnName("IDKeyword");
            });

            modelBuilder.Entity<LinksLanguage>(entity =>
            {
                entity.HasKey(e => new { e.Url, e.LanguageCode })
                    .HasName("aaaaaLinksLanguage_PK")
                    .IsClustered(false);

                entity.ToTable("LinksLanguage", "dbo");

                entity.HasIndex(e => e.Url)
                    .HasName("{85B83531-BCB0-4F3E-9136-9C41B6ED6CFD}");

                entity.Property(e => e.Url)
                    .HasColumnName("url")
                    .HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LinksText>(entity =>
            {
                entity.HasKey(e => new { e.Url, e.LanguageCode })
                    .HasName("aaaaaLinksText_PK")
                    .IsClustered(false);

                entity.ToTable("LinksText", "dbo");

                entity.HasIndex(e => e.Url)
                    .HasName("{CF4690F3-5864-4846-8D5A-C4D635152CCB}");

                entity.Property(e => e.Url)
                    .HasColumnName("url")
                    .HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.WebsiteTitle).HasMaxLength(255);
            });

            modelBuilder.Entity<ListHeadingMainNames>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("listHeadingMainNames", "dbo");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Level)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.Msc)
                    .HasColumnName("MSC")
                    .HasMaxLength(10);

                entity.Property(e => e.Ssc)
                    .HasColumnName("SSC")
                    .HasMaxLength(10);

                entity.Property(e => e.Sssc)
                    .HasColumnName("SSSC")
                    .HasMaxLength(10);

                entity.Property(e => e.TreeText)
                    .IsRequired()
                    .HasMaxLength(271);
            });

            modelBuilder.Entity<ListHeadingSubNames>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("listHeadingSubNames", "dbo");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Level)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Msc)
                    .HasColumnName("MSC")
                    .HasMaxLength(10);

                entity.Property(e => e.ParentHeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Ssc)
                    .HasColumnName("SSC")
                    .HasMaxLength(10);

                entity.Property(e => e.Sssc)
                    .HasColumnName("SSSC")
                    .HasMaxLength(10);

                entity.Property(e => e.TreeText)
                    .IsRequired()
                    .HasMaxLength(271);
            });

            modelBuilder.Entity<ListHeadingSubSubNames>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("listHeadingSubSubNames", "dbo");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Level)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Msc)
                    .HasColumnName("MSC")
                    .HasMaxLength(10);

                entity.Property(e => e.ParentHeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Ssc)
                    .HasColumnName("SSC")
                    .HasMaxLength(10);

                entity.Property(e => e.Sssc)
                    .HasColumnName("SSSC")
                    .HasMaxLength(10);

                entity.Property(e => e.TreeText)
                    .IsRequired()
                    .HasMaxLength(271);
            });

            modelBuilder.Entity<LsViewCoConsultantLanguageSkills>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LS_VIEW_co_ConsultantLanguageSkills", "dbo");

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LevelDescription).HasMaxLength(255);

                entity.Property(e => e.Reading).HasColumnName("reading");

                entity.Property(e => e.Readingdesc)
                    .HasColumnName("readingdesc")
                    .HasMaxLength(255);

                entity.Property(e => e.Speaking).HasColumnName("speaking");

                entity.Property(e => e.Speakingdesc)
                    .HasColumnName("speakingdesc")
                    .HasMaxLength(255);

                entity.Property(e => e.Writing).HasColumnName("writing");

                entity.Property(e => e.Writingdesc)
                    .HasColumnName("writingdesc")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<LsViewCoConsultantsRoleFocusCountries>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LS_View_co_ConsultantsRoleFocusCountries", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName).HasMaxLength(50);

                entity.Property(e => e.Idcontact).HasColumnName("IDContact");
            });

            modelBuilder.Entity<LsViewCoCountryConsultantRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LS_VIEW_co_CountryConsultantRole", "dbo");

                entity.Property(e => e.CalendarId)
                    .HasColumnName("calendarId")
                    .HasMaxLength(10);

                entity.Property(e => e.CellularPhone).HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.EnhEmplArea)
                    .HasColumnName("ENH_EmplArea")
                    .HasMaxLength(200);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(60);

                entity.Property(e => e.Idcontact).HasColumnName("IDContact");

                entity.Property(e => e.Lastname)
                    .HasColumnName("lastname")
                    .HasMaxLength(60);

                entity.Property(e => e.Middlename)
                    .HasColumnName("middlename")
                    .HasMaxLength(60);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PhoneLocal).HasMaxLength(50);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionName).HasMaxLength(25);

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(60);

                entity.Property(e => e.WorkFlowRole)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LsViewWorkFlowRolesSorted>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LS_VIEW_WorkFlowRolesSorted", "dbo");

                entity.Property(e => e.Idcontact).HasColumnName("IDContact");

                entity.Property(e => e.WorkflowRole)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MailList>(entity =>
            {
                entity.HasKey(e => e.Idcounter)
                    .HasName("aaaaaMail_List_PK")
                    .IsClustered(false);

                entity.ToTable("Mail_List", "dbo");

                entity.HasIndex(e => e.Idcounter)
                    .HasName("IDCounter");

                entity.Property(e => e.Idcounter)
                    .HasColumnName("IDCounter")
                    .ValueGeneratedNever();

                entity.Property(e => e.CountryCode).HasMaxLength(50);

                entity.Property(e => e.Ehs)
                    .HasColumnName("EHS")
                    .HasMaxLength(255);

                entity.Property(e => e.Glb)
                    .IsRequired()
                    .HasColumnName("GLB")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Hs).HasColumnName("HS");

                entity.Property(e => e.Language)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.Op)
                    .HasColumnName("OP")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MainFeedBackHeadingCodes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MainFeedBackHeadingCodes", "dbo");

                entity.Property(e => e.ClientHeadingCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.FeedBackHeadingCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.MainCategory).HasMaxLength(300);
            });

            modelBuilder.Entity<MigrationHistory>(entity =>
            {
                entity.HasKey(e => new { e.MigrationId, e.ContextKey })
                    .HasName("PK_dbo.__MigrationHistory");

                entity.ToTable("__MigrationHistory", "dbo");

                entity.Property(e => e.MigrationId).HasMaxLength(150);

                entity.Property(e => e.ContextKey).HasMaxLength(300);

                entity.Property(e => e.Model).IsRequired();

                entity.Property(e => e.ProductVersion)
                    .IsRequired()
                    .HasMaxLength(32);
            });

            modelBuilder.Entity<MissingIssuingAuthoritiesForIntel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MissingIssuingAuthoritiesForIntel", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MissingIssuingAuthoritiesForIntelX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MissingIssuingAuthoritiesForIntel_x", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ModulesGe>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ModulesGE", "dbo");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.ModuleName)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<MonitoringReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MonitoringReport", "dbo");

                entity.Property(e => e.AdoptionDate).HasColumnType("datetime");

                entity.Property(e => e.AffectedOperations).HasMaxLength(150);

                entity.Property(e => e.ArchiveReference).HasMaxLength(100);

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.AuthorId).HasColumnName("AuthorID");

                entity.Property(e => e.AuthorInformation).HasMaxLength(255);

                entity.Property(e => e.ContactType)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.DateLastModified).HasColumnType("datetime");

                entity.Property(e => e.EnforcingAuthority).HasMaxLength(255);

                entity.Property(e => e.Idcontact).HasColumnName("IDContact");

                entity.Property(e => e.Idproduct)
                    .HasColumnName("IDProduct")
                    .HasMaxLength(10);

                entity.Property(e => e.Idstatus).HasColumnName("IDStatus");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.InternalCode).HasMaxLength(50);

                entity.Property(e => e.IssuingAuthority).HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.PrintedforQc).HasColumnName("PrintedforQC");

                entity.Property(e => e.PrintedforQcby)
                    .HasColumnName("PrintedforQCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.PrintedforQcdate)
                    .HasColumnName("PrintedforQCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProofReadBy).HasMaxLength(50);

                entity.Property(e => e.ProofReadDate).HasColumnType("datetime");

                entity.Property(e => e.Qc).HasColumnName("QC");

                entity.Property(e => e.Qcby)
                    .HasColumnName("QCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.Qcdate)
                    .HasColumnName("QCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rapid).HasMaxLength(4000);

                entity.Property(e => e.RapidComments).HasMaxLength(250);

                entity.Property(e => e.ReadyforPublicationBy).HasMaxLength(50);

                entity.Property(e => e.ReadyforPublicationDate).HasColumnType("datetime");

                entity.Property(e => e.ReadyforQc).HasColumnName("ReadyforQC");

                entity.Property(e => e.ReadyforQcby)
                    .HasColumnName("ReadyforQCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.ReadyforQcdate)
                    .HasColumnName("ReadyforQCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegulatoryText).HasMaxLength(255);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.ReviewedBy).HasMaxLength(50);

                entity.Property(e => e.ReviewedDate).HasColumnType("datetime");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.SentBy).HasMaxLength(50);

                entity.Property(e => e.SentDate).HasColumnType("datetime");

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.TranslatedBy).HasMaxLength(50);

                entity.Property(e => e.TranslatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<MonitoringReports>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MonitoringReports", "dbo");

                entity.Property(e => e.AdoptionDate).HasColumnType("datetime");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.ClientReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ContactType)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ContentLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.Idcontact).HasColumnName("IDContact");

                entity.Property(e => e.Idproduct)
                    .HasColumnName("IDProduct")
                    .HasMaxLength(10);

                entity.Property(e => e.Idstatus).HasColumnName("IDStatus");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.ImplementationDate).HasColumnType("datetime");

                entity.Property(e => e.Importance)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InternalCode).HasMaxLength(50);

                entity.Property(e => e.Rapid).HasMaxLength(4000);

                entity.Property(e => e.ReadyforPublicationBy).HasMaxLength(50);

                entity.Property(e => e.ReadyforPublicationDate).HasColumnType("datetime");

                entity.Property(e => e.ReadyforQc).HasColumnName("ReadyforQC");

                entity.Property(e => e.ReadyforQcby)
                    .HasColumnName("ReadyforQCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.ReadyforQcdate)
                    .HasColumnName("ReadyforQCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Remarks).HasMaxLength(4000);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.WorldAreaId).HasColumnName("WorldAreaID");
            });

            modelBuilder.Entity<MrA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("mr_a", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.IdcontentProxy).HasColumnName("IDContentProxy");

                entity.Property(e => e.IdservicesProxy).HasColumnName("IDServicesProxy");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");
            });

            modelBuilder.Entity<MrB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("mr_b", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EarliestReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.IdcontentProxy).HasColumnName("IDContentProxy");

                entity.Property(e => e.IdservicesProxy).HasColumnName("IDServicesProxy");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MrBiImportance>(entity =>
            {
                entity.HasKey(e => e.Importance);

                entity.ToTable("MR_BI_Importance", "dbo");

                entity.Property(e => e.Importance).HasMaxLength(50);
            });

            modelBuilder.Entity<MrCalaStatsGabriela>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Mr_Cala_stats_Gabriela", "dbo");

                entity.Property(e => e.AdoptionDate).HasColumnType("datetime");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DateLastModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.ReportDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MrOutdatedProposals>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MR_Outdated_Proposals", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.ReporteDate).HasColumnType("datetime");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Status).HasMaxLength(12);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<MrPerCountryRegionStatusReportdate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MR_perCountryRegionStatusReportdate", "dbo");

                entity.Property(e => e.AdoptionDate).HasColumnType("datetime");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DateLastModified).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.ReportDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MrPerHeadingAndCountry>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MrPerHeadingAndCountry", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<MrTotalsOfSummaryAndRapidNbrOfChars>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MrTotalsOfSummaryAndRapidNbrOfChars", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Region).HasMaxLength(25);
            });

            modelBuilder.Entity<MrTotalsPerCountryRegionLanguageAndReportDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MrTotalsPerCountryRegionLanguageAndReportDate", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.ReportDate)
                    .HasColumnName("Report Date")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TotalMrs).HasColumnName("totalMRs");
            });

            modelBuilder.Entity<MrWithLongSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MrWithLongSummary", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Total).HasColumnName("total");
            });

            modelBuilder.Entity<MrdetailsForStats>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MRDetailsForStats", "dbo");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<MrperCountryRegionLanguageStats>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MRPerCountryRegionLanguageStats", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.ReportDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<Mrs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MRs", "dbo");

                entity.Property(e => e.Area)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.RegionName).HasMaxLength(100);

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<MrsUnpublished>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MRsUnpublished", "dbo");

                entity.Property(e => e.Area)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.RegionName).HasMaxLength(100);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.TopicBasenewResearchDate).HasColumnType("date");
            });

            modelBuilder.Entity<MrstatsForBdandMrteam>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MRStatsForBDandMRTeam", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<MwCitationBaseNonDnnUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MW_CitationBase_non_dnn_user", "dbo");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HAutoId)
                    .IsRequired()
                    .HasColumnName("h_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PkAutoId)
                    .IsRequired()
                    .HasColumnName("pk_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SortOrder)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TAutoId)
                    .IsRequired()
                    .HasColumnName("t_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MwCitationQnNonDnnUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MW_CitationQn_non_dnn_user", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HAutoId)
                    .IsRequired()
                    .HasColumnName("h_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PkAutoId)
                    .IsRequired()
                    .HasColumnName("pk_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIdcitation)
                    .HasColumnName("startDate_IDCitation")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCode)
                    .HasColumnName("startDate_QnCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TAutoId)
                    .IsRequired()
                    .HasColumnName("t_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MwCitationTextNonDnnUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MW_CitationText_non_dnn_user", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.Citation)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HAutoId)
                    .IsRequired()
                    .HasColumnName("h_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PkAutoId)
                    .IsRequired()
                    .HasColumnName("pk_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TAutoId)
                    .IsRequired()
                    .HasColumnName("t_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.Text).HasMaxLength(4000);

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MwDecTreeNonDnnUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MW_DecTree_non_dnn_user", "dbo");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.GeographicType).HasMaxLength(15);

                entity.Property(e => e.HAutoId)
                    .IsRequired()
                    .HasColumnName("h_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PkAutoId)
                    .IsRequired()
                    .HasColumnName("pk_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReleaseComment).IsUnicode(false);

                entity.Property(e => e.ReleaseNote)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TAutoId)
                    .IsRequired()
                    .HasColumnName("t_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MwDecTreeTextNonDnnUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MW_DecTreeText_non_dnn_user", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HAutoId)
                    .IsRequired()
                    .HasColumnName("h_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PkAutoId)
                    .IsRequired()
                    .HasColumnName("pk_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TAutoId)
                    .IsRequired()
                    .HasColumnName("t_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MwLgRegulationCountryRegionNonDnnUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MW_lg_RegulationCountryRegion_non_dnn_user", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HAutoId)
                    .IsRequired()
                    .HasColumnName("h_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PkAutoId)
                    .IsRequired()
                    .HasColumnName("pk_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TAutoId)
                    .IsRequired()
                    .HasColumnName("t_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MwQnItemsNonDnnUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MW_QnItems_non_dnn_user", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HAutoId).HasColumnName("h_autoID");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PkAutoId).HasColumnName("pk_autoID");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TAutoId).HasColumnName("t_autoID");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MwQnNonDnnUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MW_Qn_non_dnn_user", "dbo");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HAutoId).HasColumnName("h_autoID");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Note).HasMaxLength(255);

                entity.Property(e => e.PkAutoId).HasColumnName("pk_autoID");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReleaseComment).IsUnicode(false);

                entity.Property(e => e.ReleaseNote)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TAutoId).HasColumnName("t_autoID");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MwQnQnTextDnnUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MW_Qn_QnText_dnn_user", "dbo");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.Documents).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.Note).HasMaxLength(255);

                entity.Property(e => e.ProofedBy).HasMaxLength(255);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnTitle).HasMaxLength(1000);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReleaseComment).IsUnicode(false);

                entity.Property(e => e.ReleaseNote)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TrackingQnChangeNotes).HasColumnName("tracking_Qn_changeNotes");

                entity.Property(e => e.TrackingQnChangedBy)
                    .HasColumnName("tracking_Qn_changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.TrackingQnTextChangeNotes).HasColumnName("tracking_QnText_changeNotes");

                entity.Property(e => e.TrackingQnTextChangedBy)
                    .HasColumnName("tracking_QnText_changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.TrackingQnTextUpdateTypeId).HasColumnName("tracking_QnText_UpdateTypeID");

                entity.Property(e => e.TrackingQnUpdateTypeId).HasColumnName("tracking_Qn_UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MwQnTextNonDnnUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MW_QnText_non_dnn_user", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.Documents).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HAutoId).HasColumnName("h_autoID");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PkAutoId).HasColumnName("pk_autoID");

                entity.Property(e => e.ProofedBy).HasMaxLength(255);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnTitle).HasMaxLength(1000);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TAutoId).HasColumnName("t_autoID");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MwRegulationHeadingNonDnnUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MW_RegulationHeading_non_dnn_user", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HAutoId)
                    .IsRequired()
                    .HasColumnName("h_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PkAutoId)
                    .IsRequired()
                    .HasColumnName("pk_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TAutoId)
                    .IsRequired()
                    .HasColumnName("t_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MwRegulationNonDnnUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MW_Regulation_non_dnn_user", "dbo");

                entity.Property(e => e.ApcoverageNote)
                    .HasColumnName("APCoverageNote")
                    .HasMaxLength(500);

                entity.Property(e => e.ApcoverageType).HasColumnName("APCoverageType");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.Effective).HasColumnName("effective");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HAutoId)
                    .IsRequired()
                    .HasColumnName("h_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.MrcoverageNote)
                    .HasColumnName("MRCoverageNote")
                    .HasMaxLength(500);

                entity.Property(e => e.MrcoverageType).HasColumnName("MRCoverageType");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PublicationReference).HasMaxLength(100);

                entity.Property(e => e.ReasonArchived).HasMaxLength(1000);

                entity.Property(e => e.ReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.RegCode).HasMaxLength(90);

                entity.Property(e => e.RegComment).HasMaxLength(4000);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ResearchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShortAccronym)
                    .HasMaxLength(16)
                    .IsFixedLength();

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TAutoId)
                    .IsRequired()
                    .HasColumnName("t_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MwRegulationRegulationTextDnnUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MW_Regulation_regulationText_dnn_user", "dbo");

                entity.Property(e => e.ApcoverageNote)
                    .HasColumnName("APCoverageNote")
                    .HasMaxLength(500);

                entity.Property(e => e.ApcoverageType).HasColumnName("APCoverageType");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ConsolidatedHyperlink).HasMaxLength(255);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.Effective).HasColumnName("effective");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MrcoverageNote)
                    .HasColumnName("MRCoverageNote")
                    .HasMaxLength(500);

                entity.Property(e => e.MrcoverageType).HasColumnName("MRCoverageType");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.PublicationReference).HasMaxLength(100);

                entity.Property(e => e.ReasonArchived).HasMaxLength(1000);

                entity.Property(e => e.ReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.RegCode).HasMaxLength(90);

                entity.Property(e => e.RegComment).HasMaxLength(4000);

                entity.Property(e => e.RegHyperlink).HasMaxLength(255);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegSummary).HasMaxLength(4000);

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RegulationChangeNotes).HasColumnName("Regulation_changeNotes");

                entity.Property(e => e.RegulationChangedBy)
                    .HasColumnName("Regulation_changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegulationTextChangeNotes).HasColumnName("RegulationText_changeNotes");

                entity.Property(e => e.RegulationTextChangedBy)
                    .HasColumnName("RegulationText_changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.RegulationTextUpdateTypeId).HasColumnName("RegulationText_UpdateTypeID");

                entity.Property(e => e.RegulationUpdateTypeId).HasColumnName("Regulation_UpdateTypeID");

                entity.Property(e => e.RepealNote).HasMaxLength(500);

                entity.Property(e => e.ResearchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShortAccronym)
                    .HasMaxLength(16)
                    .IsFixedLength();

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MwRegulationTextNonDnnUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MW_RegulationText_non_dnn_user", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ConsolidatedHyperlink).HasMaxLength(255);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HAutoId)
                    .IsRequired()
                    .HasColumnName("h_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PkAutoId)
                    .IsRequired()
                    .HasColumnName("pk_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.RegHyperlink).HasMaxLength(255);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegSummary).HasMaxLength(4000);

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RepealNote).HasMaxLength(500);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TAutoId)
                    .IsRequired()
                    .HasColumnName("t_autoID")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MyCountriesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MyCountriesView", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Logon)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<NotContractedInvista>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NotContractedInvista", "dbo");

                entity.Property(e => e.FeedBackHeadingCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.MainCategory)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SecondaryCategory).HasMaxLength(150);

                entity.Property(e => e.SortOrder)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NumberOfQnToAllocateToWareHouses>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NumberOfQnToAllocateToWareHouses", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<OtherLegislation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OtherLegislation", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<PbGeneralText>(entity =>
            {
                entity.HasKey(e => e.Pk);

                entity.ToTable("pb_GeneralText", "dbo");

                entity.Property(e => e.Pk).ValueGeneratedNever();

                entity.Property(e => e.BinFile).HasColumnType("image");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.Filename).HasMaxLength(128);

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LocaleId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.ResourceId)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.ResourceSet)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('monitoring.sitemap')");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Value).IsRequired();
            });

            modelBuilder.Entity<People>(entity =>
            {
                entity.HasKey(e => e.StrName)
                    .HasName("aaaaaPeople_PK")
                    .IsClustered(false);

                entity.ToTable("People", "dbo");

                entity.Property(e => e.StrName)
                    .HasColumnName("strName")
                    .HasMaxLength(50);

                entity.Property(e => e.Archive)
                    .IsRequired()
                    .HasColumnName("archive")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<PkAmendment>(entity =>
            {
                entity.HasKey(e => e.AmendmentCode);

                entity.ToTable("pk_Amendment", "temporal");

                entity.HasIndex(e => e.AmendmentCode)
                    .HasName("IX_pk_Amendment_reversed")
                    .IsUnique();

                entity.Property(e => e.AmendmentCode).HasMaxLength(15);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkAmendmentMonitoringReport>(entity =>
            {
                entity.HasKey(e => new { e.Idtopic, e.AmendmentCode });

                entity.ToTable("pk_AmendmentMonitoringReport", "temporal");

                entity.HasIndex(e => new { e.AmendmentCode, e.Idtopic })
                    .HasName("IX_pk_AmendmentMonitoringReport_reversed")
                    .IsUnique();

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.AmendmentCode).HasMaxLength(15);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkAmendmentText>(entity =>
            {
                entity.HasKey(e => new { e.AmendmentCode, e.LanguageCode });

                entity.ToTable("pk_AmendmentText", "temporal");

                entity.HasIndex(e => new { e.LanguageCode, e.AmendmentCode })
                    .HasName("IX_pk_AmendmentText_reversed")
                    .IsUnique();

                entity.Property(e => e.AmendmentCode).HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkBusinessImpactText>(entity =>
            {
                entity.HasKey(e => new { e.IntroId, e.Idclient, e.LanguageCode });

                entity.ToTable("pk_BusinessImpactText", "temporal");

                entity.HasIndex(e => new { e.LanguageCode, e.Idclient, e.IntroId })
                    .HasName("IX_pk_BusinessImpactText_reversed")
                    .IsUnique();

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkCitationBase>(entity =>
            {
                entity.HasKey(e => e.Idcitation);

                entity.ToTable("pk_CitationBase", "temporal");

                entity.HasIndex(e => e.Idcitation)
                    .HasName("IX_pk_CitationBase_reversed")
                    .IsUnique();

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkCitationQn>(entity =>
            {
                entity.HasKey(e => new { e.QnCode, e.Idcitation });

                entity.ToTable("pk_CitationQn", "temporal");

                entity.HasIndex(e => new { e.Idcitation, e.QnCode })
                    .HasName("IX_pk_CitationQn_reversed")
                    .IsUnique();

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkCitationText>(entity =>
            {
                entity.HasKey(e => new { e.Idcitation, e.LanguageCode });

                entity.ToTable("pk_CitationText", "temporal");

                entity.HasIndex(e => new { e.LanguageCode, e.Idcitation })
                    .HasName("IX_pk_CitationText_reversed")
                    .IsUnique();

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkCoAllServiceVersion>(entity =>
            {
                entity.HasKey(e => new { e.ServiceCode, e.CountryCode, e.RegionCode, e.LanguageCode, e.SetCode, e.IndCode, e.ProductTypeCode })
                    .HasName("PK_pk_co_all_ServiceVersion_1");

                entity.ToTable("pk_co_all_ServiceVersion", "temporal");

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.SetCode).HasMaxLength(50);

                entity.Property(e => e.IndCode).HasColumnName("indCode");

                entity.Property(e => e.ProductTypeCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('None')");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkCoApDerivedQuestion>(entity =>
            {
                entity.HasKey(e => new { e.QnCodeMaster, e.QnCodeDerived });

                entity.ToTable("pk_co_ap_DerivedQuestion", "temporal");

                entity.HasIndex(e => new { e.QnCodeDerived, e.QnCodeMaster })
                    .HasName("IX_pk_co_ap_DerivedQuestion_reversed")
                    .IsUnique();

                entity.Property(e => e.QnCodeMaster)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnCodeDerived)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkCoIndustryRegulation>(entity =>
            {
                entity.HasKey(e => new { e.IndCode, e.RegId });

                entity.ToTable("pk_co_Industry_Regulation", "temporal");

                entity.HasIndex(e => new { e.RegId, e.IndCode })
                    .HasName("IX_pk_co_Industry_Regulation_reversed")
                    .IsUnique();

                entity.Property(e => e.IndCode).HasColumnName("indCode");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkDecTree>(entity =>
            {
                entity.HasKey(e => e.DecTreeCode);

                entity.ToTable("pk_DecTree", "temporal");

                entity.HasIndex(e => e.DecTreeCode)
                    .HasName("IX_pk_DecTree_reversed")
                    .IsUnique();

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkDecTreeCodeDecTreeCode>(entity =>
            {
                entity.HasKey(e => new { e.DecTreeCodeChild, e.DecTreeCodeParent });

                entity.ToTable("pk_DecTreeCodeDecTreeCode", "temporal");

                entity.HasIndex(e => new { e.DecTreeCodeParent, e.DecTreeCodeChild })
                    .HasName("IX_pk_DecTreeCodeDecTreeCode_reversed")
                    .IsUnique();

                entity.Property(e => e.DecTreeCodeChild).HasMaxLength(15);

                entity.Property(e => e.DecTreeCodeParent).HasMaxLength(15);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkDecTreeQnHeading>(entity =>
            {
                entity.HasKey(e => new { e.DecTreeCode, e.HeadingCode });

                entity.ToTable("pk_DecTreeQnHeading", "temporal");

                entity.HasIndex(e => new { e.HeadingCode, e.DecTreeCode })
                    .HasName("IX_pk_DecTreeQnHeading_reversed")
                    .IsUnique();

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkDecTreeText>(entity =>
            {
                entity.HasKey(e => new { e.DecTreeCode, e.LanguageCode });

                entity.ToTable("pk_DecTreeText", "temporal");

                entity.HasIndex(e => new { e.LanguageCode, e.DecTreeCode })
                    .HasName("IX_pk_DecTreeText_reversed")
                    .IsUnique();

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkDefinition>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.DefNumber });

                entity.ToTable("pk_Definition", "temporal");

                entity.HasIndex(e => new { e.DefNumber, e.RegId })
                    .HasName("IX_pk_Definition_reversed")
                    .IsUnique();

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkDefinitionText>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.DefNumber, e.LanguageCode });

                entity.ToTable("pk_DefinitionText", "temporal");

                entity.HasIndex(e => new { e.LanguageCode, e.DefNumber, e.RegId })
                    .HasName("IX_pk_DefinitionText_reversed")
                    .IsUnique();

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkHeadingSetCode>(entity =>
            {
                entity.HasKey(e => new { e.SetCode, e.HeadingCode });

                entity.ToTable("pk_HeadingSetCode", "temporal");

                entity.HasIndex(e => new { e.HeadingCode, e.SetCode })
                    .HasName("IX_pk_HeadingSetCode_reversed")
                    .IsUnique();

                entity.Property(e => e.SetCode).HasMaxLength(50);

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkIntro>(entity =>
            {
                entity.HasKey(e => e.IntroId);

                entity.ToTable("pk_Intro", "temporal");

                entity.HasIndex(e => e.IntroId)
                    .HasName("IX_pk_Intro_reversed")
                    .IsUnique();

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkIntroText>(entity =>
            {
                entity.HasKey(e => new { e.IntroId, e.LanguageCode });

                entity.ToTable("pk_IntroText", "temporal");

                entity.HasIndex(e => new { e.LanguageCode, e.IntroId })
                    .HasName("IX_pk_IntroText_reversed")
                    .IsUnique();

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkLgRegulationCountryRegion>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.RegionCode, e.CountryCode });

                entity.ToTable("pk_lg_RegulationCountryRegion", "temporal");

                entity.HasIndex(e => new { e.CountryCode, e.RegionCode, e.RegId })
                    .HasName("IX_pk_lg_RegulationCountryRegion_reversed")
                    .IsUnique();

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkQn>(entity =>
            {
                entity.HasKey(e => e.QnCode);

                entity.ToTable("pk_Qn", "temporal");

                entity.HasIndex(e => e.QnCode)
                    .HasName("IX_pk_Qn_reversed")
                    .IsUnique();

                entity.HasIndex(e => new { e.QnCode, e.LastPublishedStartDate })
                    .HasName("IX_QN_With_LastPubDate")
                    .IsUnique();

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.AutoId)
                    .HasColumnName("autoID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkQnImage>(entity =>
            {
                entity.HasKey(e => new { e.QnCode, e.ImageLink });

                entity.ToTable("pk_QnImage", "temporal");

                entity.HasIndex(e => new { e.ImageLink, e.QnCode })
                    .HasName("IX_pk_QnImage_reversed")
                    .IsUnique();

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ImageLink).HasMaxLength(200);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkQnItems>(entity =>
            {
                entity.HasKey(e => new { e.QnCode, e.LanguageCode, e.ItemId });

                entity.ToTable("pk_QnItems", "temporal");

                entity.HasIndex(e => new { e.QnCode, e.LanguageCode, e.ItemId })
                    .HasName("IX_pk_QnItems_reversed")
                    .IsUnique();

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AutoId)
                    .HasColumnName("autoID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkQnText>(entity =>
            {
                entity.HasKey(e => new { e.QnCode, e.LanguageCode });

                entity.ToTable("pk_QnText", "temporal");

                entity.HasIndex(e => new { e.LanguageCode, e.QnCode })
                    .HasName("IX_pk_QnText_reversed")
                    .IsUnique();

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AutoId)
                    .HasColumnName("autoID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkRegulation>(entity =>
            {
                entity.HasKey(e => e.RegId);

                entity.ToTable("pk_Regulation", "temporal");

                entity.HasIndex(e => e.RegId)
                    .HasName("IX_pk_Regulation_reversed")
                    .IsUnique();

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkRegulationDecTreeQn>(entity =>
            {
                entity.HasKey(e => new { e.DecTreeCode, e.RegId });

                entity.ToTable("pk_RegulationDecTreeQn", "temporal");

                entity.HasIndex(e => new { e.RegId, e.DecTreeCode })
                    .HasName("IX_pk_RegulationDecTreeQn_reversed")
                    .IsUnique();

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkRegulationHeading>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.HeadingCode });

                entity.ToTable("pk_RegulationHeading", "temporal");

                entity.HasIndex(e => new { e.HeadingCode, e.RegId })
                    .HasName("IX_pk_RegulationHeading_reversed")
                    .IsUnique();

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkRegulationMonitoringReport>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.Idtopic });

                entity.ToTable("pk_RegulationMonitoringReport", "temporal");

                entity.HasIndex(e => new { e.Idtopic, e.RegId })
                    .HasName("IX_pk_RegulationMonitoringReport_reversed")
                    .IsUnique();

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkRegulationRegulation>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.ChildRegId });

                entity.ToTable("pk_RegulationRegulation", "temporal");

                entity.HasIndex(e => new { e.ChildRegId, e.RegId })
                    .HasName("IX_pk_RegulationRegulation_reversed")
                    .IsUnique();

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.ChildRegId).HasColumnName("ChildRegID");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkRegulationRegulationInternational>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.ChildRegId });

                entity.ToTable("pk_RegulationRegulationInternational", "temporal");

                entity.HasIndex(e => new { e.ChildRegId, e.RegId })
                    .HasName("IX_pk_RegulationRegulationInternational_reversed")
                    .IsUnique();

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.ChildRegId).HasColumnName("ChildRegID");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkRegulationRepeal>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.RegIdrepealed });

                entity.ToTable("pk_RegulationRepeal", "temporal");

                entity.HasIndex(e => new { e.RegIdrepealed, e.RegId })
                    .HasName("IX_pk_RegulationRepeal_reversed")
                    .IsUnique();

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegIdrepealed).HasColumnName("RegIDRepealed");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkRegulationText>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.LanguageCode });

                entity.ToTable("pk_RegulationText", "temporal");

                entity.HasIndex(e => new { e.RegId, e.LanguageCode, e.LastPublishedStartDate })
                    .HasName("IX_pk_RegulationText_reversed")
                    .IsUnique();

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkRequiredAnswer>(entity =>
            {
                entity.HasKey(e => new { e.DecTreeCode, e.QnCode });

                entity.ToTable("pk_RequiredAnswer", "temporal");

                entity.HasIndex(e => new { e.DecTreeCode, e.QnCode, e.LastPublishedStartDate })
                    .HasName("IX_pk_RequiredAnswer_LastPublished")
                    .IsUnique();

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkTopicHeading>(entity =>
            {
                entity.HasKey(e => new { e.Idtopic, e.HeadingCode });

                entity.ToTable("pk_TopicHeading", "temporal");

                entity.HasIndex(e => new { e.HeadingCode, e.Idtopic })
                    .HasName("IX_pk_TopicHeading_reversed")
                    .IsUnique();

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkTopicKeyword>(entity =>
            {
                entity.HasKey(e => new { e.Idtopic, e.IdkeyWord })
                    .HasName("PK_pk_TOPICKEYWORD");

                entity.ToTable("pk_TopicKeyword", "temporal");

                entity.HasIndex(e => new { e.IdkeyWord, e.Idtopic })
                    .HasName("IX_pk_TOPICKEYWORD_reversed")
                    .IsUnique();

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IdkeyWord).HasColumnName("IDKeyWord");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkV2CountryFactSheetBase>(entity =>
            {
                entity.HasKey(e => e.CfsBcountryCode);

                entity.ToTable("pk_V2_CountryFactSheet_Base", "temporal");

                entity.HasIndex(e => e.CfsBcountryCode)
                    .HasName("IX_pk_V2_CountryFactSheet_Base_reversed")
                    .IsUnique();

                entity.Property(e => e.CfsBcountryCode)
                    .HasColumnName("cfsBCountryCode")
                    .HasMaxLength(2);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkV2CountryFactSheetText>(entity =>
            {
                entity.HasKey(e => new { e.CfsTcountryCode, e.CfsTlanguageCode });

                entity.ToTable("pk_V2_CountryFactSheet_Text", "temporal");

                entity.HasIndex(e => new { e.CfsTlanguageCode, e.CfsTcountryCode })
                    .HasName("IX_pk_V2_CountryFactSheet_Text_reversed")
                    .IsUnique();

                entity.Property(e => e.CfsTcountryCode)
                    .HasColumnName("cfsTCountryCode")
                    .HasMaxLength(2);

                entity.Property(e => e.CfsTlanguageCode)
                    .HasColumnName("cfsTLanguageCode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkV2ImplementationBase>(entity =>
            {
                entity.HasKey(e => e.Idimplementation);

                entity.ToTable("pk_v2_Implementation_Base", "temporal");

                entity.HasIndex(e => e.Idimplementation)
                    .HasName("IX_pk_v2_Implementation_Base_reversed")
                    .IsUnique();

                entity.Property(e => e.Idimplementation).HasColumnName("IDImplementation");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkV2ImplementationText>(entity =>
            {
                entity.HasKey(e => new { e.Idimplementation, e.LanguageCode });

                entity.ToTable("pk_v2_Implementation_Text", "temporal");

                entity.HasIndex(e => new { e.LanguageCode, e.Idimplementation })
                    .HasName("IX_pk_v2_Implementation_Text_reversed")
                    .IsUnique();

                entity.Property(e => e.Idimplementation).HasColumnName("IDImplementation");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkV2MrBusinessImpactBase>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.Idtopic });

                entity.ToTable("pk_v2_mr_BusinessImpact_Base", "temporal");

                entity.HasIndex(e => new { e.Idtopic, e.Idclient })
                    .HasName("IX_pk_v2_mr_BusinessImpact_Base_reversed")
                    .IsUnique();

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkV2MrBusinessImpactText>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.Idtopic, e.LanguageCode });

                entity.ToTable("pk_v2_mr_BusinessImpact_Text", "temporal");

                entity.HasIndex(e => new { e.LanguageCode, e.Idtopic, e.Idclient })
                    .HasName("IX_pk_v2_mr_BusinessImpact_Text_reversed")
                    .IsUnique();

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkV2TopicBase>(entity =>
            {
                entity.HasKey(e => e.Idtopic);

                entity.ToTable("pk_v2_Topic_Base", "temporal");

                entity.HasIndex(e => e.Idtopic)
                    .HasName("IX_pk_v2_Topic_Base_reversed")
                    .IsUnique();

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkV2TopicRegion>(entity =>
            {
                entity.HasKey(e => new { e.Idtopic, e.CountryCode, e.RegionCode });

                entity.ToTable("pk_v2_TopicRegion", "temporal");

                entity.HasIndex(e => new { e.CountryCode, e.RegionCode, e.Idtopic })
                    .HasName("IX_pk_v2_TopicRegion_reversed")
                    .IsUnique();

                entity.HasIndex(e => new { e.RegionCode, e.CountryCode, e.Idtopic })
                    .HasName("ix_pk_v2_TopicRegion_RegionCode");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<PkV2TopicText>(entity =>
            {
                entity.HasKey(e => new { e.Idtopic, e.LanguageCode });

                entity.ToTable("pk_v2_Topic_Text", "temporal");

                entity.HasIndex(e => new { e.LanguageCode, e.Idtopic })
                    .HasName("IX_pk_v2_Topic_Text_reversed")
                    .IsUnique();

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");
            });

            modelBuilder.Entity<ProductAssessementAsqlinkedToQns>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ProductAssessementASQlinkedToQns", "dbo");

                entity.Property(e => e.AsqHeadingCode)
                    .IsRequired()
                    .HasColumnName("ASQ_HeadingCode")
                    .HasMaxLength(15);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasColumnName("Country Name")
                    .HasMaxLength(100);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.DecTreeNewResearchDate).HasColumnType("date");

                entity.Property(e => e.DecTreeRowStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DtqupdateType)
                    .IsRequired()
                    .HasColumnName("DTQUpdateType")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.ProductTypeCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnHeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.QnUpdateType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasColumnName("Region Name")
                    .HasMaxLength(100);

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProductAssessmentQuestionStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ProductAssessmentQuestionStatus", "dbo");

                entity.Property(e => e.CitationBaseRowStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CitationBasenewResearchDate).HasColumnType("date");

                entity.Property(e => e.CitationUpdTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasColumnName("Country Name")
                    .HasMaxLength(100);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnNewResearchDate).HasColumnType("date");

                entity.Property(e => e.QnRowStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QnUpdateTypeDescription)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegUpdateTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasColumnName("Region Name")
                    .HasMaxLength(100);

                entity.Property(e => e.RegulationnewResearchDate).HasColumnType("date");

                entity.Property(e => e.RegulationrowStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PublicSiteFeed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PublicSiteFeed", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Qn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Qn", "dbo");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Note).HasMaxLength(255);

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReleaseComment).IsUnicode(false);

                entity.Property(e => e.ReleaseNote)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Qn1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Qn", "published");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Note).HasMaxLength(255);

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReleaseComment).IsUnicode(false);

                entity.Property(e => e.ReleaseNote)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Qn2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Qn", "temporal");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Note).HasMaxLength(255);

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReleaseComment).IsUnicode(false);

                entity.Property(e => e.ReleaseNote)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Qn3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Qn", "workflow");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Note).HasMaxLength(255);

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReleaseComment).IsUnicode(false);

                entity.Property(e => e.ReleaseNote)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QnImage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QnImage", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ImageLink)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QnImage1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QnImage", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ImageLink)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QnImage2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QnImage", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ImageLink)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QnImage3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QnImage", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ImageLink)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QnItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QnItems", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QnItems1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QnItems", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QnItems2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QnItems", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QnItems3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QnItems", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QnPerFedAndState>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QnPerFedAndState", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnRegionName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegRegionName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<QnText>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QnText", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.Documents).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ProofedBy).HasMaxLength(255);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnTitle).HasMaxLength(1000);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QnText1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QnText", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.Documents).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ProofedBy).HasMaxLength(255);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnTitle).HasMaxLength(1000);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QnText2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QnText", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.Documents).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ProofedBy).HasMaxLength(255);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnTitle).HasMaxLength(1000);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QnText3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QnText", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.Documents).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ProofedBy).HasMaxLength(255);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnTitle).HasMaxLength(1000);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QryConsultantsCountry>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryConsultantsCountry", "dbo");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.CountryName).HasMaxLength(100);

                entity.Property(e => e.FnamePerson)
                    .HasColumnName("FNamePerson")
                    .HasMaxLength(50);

                entity.Property(e => e.Idcontact).HasColumnName("IDContact");

                entity.Property(e => e.LnamePerson)
                    .HasColumnName("LNamePerson")
                    .HasMaxLength(60);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.WorkflowRole)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QryCountriesRegions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryCountriesRegions", "dbo");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.CountryName).HasMaxLength(100);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionType).HasMaxLength(50);
            });

            modelBuilder.Entity<QryCountryEnglish>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryCountryEnglish", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QryLanguageEnglish>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryLanguageEnglish", "dbo");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QryLatestValidityDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryLatestValidityDate", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.MaxOfProofedDate).HasColumnType("datetime");

                entity.Property(e => e.MaxOfValidityDate).HasColumnType("datetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QryLatestValidityDateVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryLatestValidityDateVw", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MaxOfProofedDate).HasColumnType("datetime");

                entity.Property(e => e.MaxOfValidityDate).HasColumnType("datetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QryListOfLegislationstatsvw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryListOfLegislationstatsvw", "dbo");

                entity.Property(e => e.AmendmentDate).HasColumnType("datetime");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.ReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QryListofLegislationcountwithnoamend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryListofLegislationcountwithnoamend", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.MaxOfValidityDate).HasColumnType("datetime");

                entity.Property(e => e.MaxOfnewResearchDate).HasColumnType("date");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QryListofLegislationdate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryListofLegislationdate", "dbo");

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MaxOfAmendmentDate).HasColumnType("datetime");

                entity.Property(e => e.MaxOfReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.MaxOfnewResearchDate).HasColumnType("date");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QryListofLegislationstatswithnoamend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryListofLegislationstatswithnoamend", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.ReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<QryNbrDiffValDatePr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryNbrDiffValDatePr", "dbo");

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QryNbrHeadingNoEn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryNbrHeadingNoEn", "dbo");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.CountryName).HasMaxLength(100);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QryNbrHeadingWithIntro>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryNbrHeadingWithIntro", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QryNbrNe>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryNbrNE", "dbo");

                entity.Property(e => e.CountryName).HasMaxLength(100);

                entity.Property(e => e.NbrNe).HasColumnName("NbrNE");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QryNbrNotProofedDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryNbrNotProofedDate", "dbo");

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QryNbrNotValidityDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryNbrNotValidityDate", "dbo");

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QryNombreHeadingNoEnglish>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryNombreHeadingNoEnglish", "dbo");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.CountryName).HasMaxLength(100);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QryRegsNotLinkHeading>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryRegsNotLinkHeading", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QryUsers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryUsers", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcounter)
                    .HasColumnName("IDCounter")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(60);

                entity.Property(e => e.Nm)
                    .HasColumnName("nm")
                    .HasMaxLength(50);

                entity.Property(e => e.Organisation).HasMaxLength(180);

                entity.Property(e => e.SIndex)
                    .IsRequired()
                    .HasColumnName("sIndex")
                    .HasMaxLength(2);
            });

            modelBuilder.Entity<QryWithoutProofDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryWithoutProofDate", "dbo");

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QryWithoutValidityDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryWithoutValidityDate", "dbo");

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ValidityDate).HasColumnType("date");

                entity.Property(e => e.ValidityDate1)
                    .HasColumnName("Validity Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<QryWithoutValidityDateProduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qryWithoutValidityDateProduction", "dbo");

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Qrylistoflegislationadoptiondate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qrylistoflegislationadoptiondate", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MaxOfAdoptionDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Qrylistoflegislationcountadopt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qrylistoflegislationcountadopt", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.MaxOfAdoptionDate).HasColumnType("datetime");

                entity.Property(e => e.MaxOfValidityDate).HasColumnType("datetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QunionHeadings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("qunionHeadings", "dbo");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Level)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.Msc)
                    .HasColumnName("MSC")
                    .HasMaxLength(10);

                entity.Property(e => e.Ssc)
                    .HasColumnName("SSC")
                    .HasMaxLength(10);

                entity.Property(e => e.Sssc)
                    .HasColumnName("SSSC")
                    .HasMaxLength(10);

                entity.Property(e => e.TreeText)
                    .IsRequired()
                    .HasMaxLength(271);
            });

            modelBuilder.Entity<RegCitationPerQn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegCitationPerQn", "dbo");

                entity.Property(e => e.Data)
                    .HasColumnName("data()")
                    .HasMaxLength(1311);

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<RegCountryRegionNamesForStats>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegCountryRegionNamesForStats", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.Region).HasMaxLength(25);
            });

            modelBuilder.Entity<RegRegStatWithIndustrySector>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegRegStatWithIndustrySector", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IndustrySector)
                    .HasColumnName("Industry Sector")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.ReferenceDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<RegRegStats>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegRegStats", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangeType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsolidatedHyperlink).HasMaxLength(255);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CountryRegionLead).HasMaxLength(111);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.ReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.RegHyperlink).HasMaxLength(255);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegSummary).HasMaxLength(4000);

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ResearchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Region>(entity =>
            {
                entity.HasKey(e => new { e.CountryCode, e.RegionCode })
                    .HasName("aaaaaREGION_PK");

                entity.ToTable("REGION", "dbo");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.Idregion)
                    .HasColumnName("IDRegion")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsoCode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NAT')");

                entity.Property(e => e.Region1)
                    .HasColumnName("Region")
                    .HasMaxLength(25);

                entity.Property(e => e.VisibleInListOfRegs).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<RegionNewCodes>(entity =>
            {
                entity.HasKey(e => new { e.RegionCode, e.CountryCode });

                entity.ToTable("RegionNewCodes", "dbo");

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.NewRegionCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'_countrywide')");
            });

            modelBuilder.Entity<RegionText>(entity =>
            {
                entity.HasKey(e => new { e.LanguageCode, e.CountryCode, e.RegionCode })
                    .HasName("aaaaaRegionText_PK");

                entity.ToTable("RegionText", "dbo");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Regulation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Regulation", "dbo");

                entity.Property(e => e.ApcoverageNote)
                    .HasColumnName("APCoverageNote")
                    .HasMaxLength(500);

                entity.Property(e => e.ApcoverageType).HasColumnName("APCoverageType");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.Effective).HasColumnName("effective");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.MrcoverageNote)
                    .HasColumnName("MRCoverageNote")
                    .HasMaxLength(500);

                entity.Property(e => e.MrcoverageType).HasColumnName("MRCoverageType");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PublicationReference).HasMaxLength(100);

                entity.Property(e => e.ReasonArchived).HasMaxLength(1000);

                entity.Property(e => e.ReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.RegCode).HasMaxLength(90);

                entity.Property(e => e.RegComment).HasMaxLength(4000);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ResearchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShortAccronym)
                    .HasMaxLength(16)
                    .IsFixedLength();

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Regulation1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Regulation", "published");

                entity.Property(e => e.ApcoverageNote)
                    .HasColumnName("APCoverageNote")
                    .HasMaxLength(500);

                entity.Property(e => e.ApcoverageType).HasColumnName("APCoverageType");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.Effective).HasColumnName("effective");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.MrcoverageNote)
                    .HasColumnName("MRCoverageNote")
                    .HasMaxLength(500);

                entity.Property(e => e.MrcoverageType).HasColumnName("MRCoverageType");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PublicationReference).HasMaxLength(100);

                entity.Property(e => e.ReasonArchived).HasMaxLength(1000);

                entity.Property(e => e.ReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.RegCode).HasMaxLength(90);

                entity.Property(e => e.RegComment).HasMaxLength(4000);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ResearchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShortAccronym)
                    .HasMaxLength(16)
                    .IsFixedLength();

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Regulation2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Regulation", "temporal");

                entity.Property(e => e.ApcoverageNote)
                    .HasColumnName("APCoverageNote")
                    .HasMaxLength(500);

                entity.Property(e => e.ApcoverageType).HasColumnName("APCoverageType");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.Effective).HasColumnName("effective");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.MrcoverageNote)
                    .HasColumnName("MRCoverageNote")
                    .HasMaxLength(500);

                entity.Property(e => e.MrcoverageType).HasColumnName("MRCoverageType");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PublicationReference).HasMaxLength(100);

                entity.Property(e => e.ReasonArchived).HasMaxLength(1000);

                entity.Property(e => e.ReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.RegCode).HasMaxLength(90);

                entity.Property(e => e.RegComment).HasMaxLength(4000);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ResearchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShortAccronym)
                    .HasMaxLength(16)
                    .IsFixedLength();

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Regulation3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Regulation", "workflow");

                entity.Property(e => e.ApcoverageNote)
                    .HasColumnName("APCoverageNote")
                    .HasMaxLength(500);

                entity.Property(e => e.ApcoverageType).HasColumnName("APCoverageType");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.Effective).HasColumnName("effective");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastModifiedDateBaseLanguage).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.MrcoverageNote)
                    .HasColumnName("MRCoverageNote")
                    .HasMaxLength(500);

                entity.Property(e => e.MrcoverageType).HasColumnName("MRCoverageType");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PublicationReference).HasMaxLength(100);

                entity.Property(e => e.ReasonArchived).HasMaxLength(1000);

                entity.Property(e => e.ReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.RegCode).HasMaxLength(90);

                entity.Property(e => e.RegComment).HasMaxLength(4000);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ResearchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShortAccronym)
                    .HasMaxLength(16)
                    .IsFixedLength();

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationCitationQnCodeList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationCitationQnCodeList", "dbo");

                entity.Property(e => e.Citation)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegId)
                    .HasColumnName("RegID")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<RegulationCountsPercCountryRegionLanguage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationCountsPercCountryRegionLanguage", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Region).HasMaxLength(25);
            });

            modelBuilder.Entity<RegulationCoverageType>(entity =>
            {
                entity.HasKey(e => e.CoverageType);

                entity.ToTable("RegulationCoverageType", "dbo");

                entity.Property(e => e.CoverageType).HasDefaultValueSql("((1))");

                entity.Property(e => e.CoverageDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationDecTreeQn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationDecTreeQn", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateDecTreeCode)
                    .HasColumnName("startDate_DecTreeCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationDecTreeQn1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationDecTreeQn", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateDecTreeCode)
                    .HasColumnName("startDate_DecTreeCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationDecTreeQn2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationDecTreeQn", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateDecTreeCode)
                    .HasColumnName("startDate_DecTreeCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationDecTreeQn3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationDecTreeQn", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateDecTreeCode)
                    .HasColumnName("startDate_DecTreeCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationDtqcounts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationDTQCounts", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NumberOfDtq).HasColumnName("Number of DTQ");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Region).HasMaxLength(25);
            });

            modelBuilder.Entity<RegulationDtqdata>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationDTQData", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NumberOfDtq)
                    .IsRequired()
                    .HasColumnName("Number of DTQ")
                    .HasMaxLength(15);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Region).HasMaxLength(25);
            });

            modelBuilder.Entity<RegulationHeading>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationHeading", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationHeading1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationHeading", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationHeading2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationHeading", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationHeading3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationHeading", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationMonitoringReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationMonitoringReport", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIdtopic)
                    .HasColumnName("startDate_IDTopic")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationMonitoringReport1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationMonitoringReport", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIdtopic)
                    .HasColumnName("startDate_IDTopic")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationMonitoringReport2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationMonitoringReport", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIdtopic)
                    .HasColumnName("startDate_IDTopic")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationMonitoringReport3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationMonitoringReport", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIdtopic)
                    .HasColumnName("startDate_IDTopic")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationNotLinkedToQn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationNotLinkedToQn", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Region).HasMaxLength(25);
            });

            modelBuilder.Entity<RegulationQn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationQn", "dbo");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegId).HasColumnName("RegID");
            });

            modelBuilder.Entity<RegulationQnCitation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationQnCitation", "dbo");

                entity.Property(e => e.Citation)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.IdcitationFinal).HasColumnName("IDCitationFinal");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.ValidityDate).HasColumnType("date");
            });

            modelBuilder.Entity<RegulationQnCitationNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationQnCitationNew", "dbo");

                entity.Property(e => e.Citation)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentMapping)
                    .IsRequired()
                    .HasColumnName("documentMapping")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.IdcitationFinal).HasColumnName("IDCitation_final");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.ValidityDate).HasColumnType("date");
            });

            modelBuilder.Entity<RegulationRegulation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationRegulation", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ChildRegId).HasColumnName("ChildRegID");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateChildRegId)
                    .HasColumnName("startDate_ChildRegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationRegulation1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationRegulation", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ChildRegId).HasColumnName("ChildRegID");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateChildRegId)
                    .HasColumnName("startDate_ChildRegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationRegulation2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationRegulation", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ChildRegId).HasColumnName("ChildRegID");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateChildRegId)
                    .HasColumnName("startDate_ChildRegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationRegulation3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationRegulation", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ChildRegId).HasColumnName("ChildRegID");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateChildRegId)
                    .HasColumnName("startDate_ChildRegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationRegulationInternational>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationRegulationInternational", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ChildRegId).HasColumnName("ChildRegID");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateChildRegId)
                    .HasColumnName("startDate_ChildRegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationRegulationInternational1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationRegulationInternational", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ChildRegId).HasColumnName("ChildRegID");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateChildRegId)
                    .HasColumnName("startDate_ChildRegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationRegulationInternational2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationRegulationInternational", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ChildRegId).HasColumnName("ChildRegID");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateChildRegId)
                    .HasColumnName("startDate_ChildRegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationRegulationInternational3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationRegulationInternational", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ChildRegId).HasColumnName("ChildRegID");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateChildRegId)
                    .HasColumnName("startDate_ChildRegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationRepeal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationRepeal", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegIdrepealed).HasColumnName("RegIDRepealed");

                entity.Property(e => e.RepealDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationRepeal1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationRepeal", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegIdrepealed).HasColumnName("RegIDRepealed");

                entity.Property(e => e.RepealDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationRepeal2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationRepeal", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegIdrepealed).HasColumnName("RegIDRepealed");

                entity.Property(e => e.RepealDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationRepeal3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationRepeal", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegIdrepealed).HasColumnName("RegIDRepealed");

                entity.Property(e => e.RepealDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationText>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationText", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ConsolidatedHyperlink).HasMaxLength(255);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegHyperlink).HasMaxLength(255);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegSummary).HasMaxLength(4000);

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RepealNote).HasMaxLength(500);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationText1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationText", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ConsolidatedHyperlink).HasMaxLength(255);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegHyperlink).HasMaxLength(255);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegSummary).HasMaxLength(4000);

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RepealNote).HasMaxLength(500);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationText2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationText", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ConsolidatedHyperlink).HasMaxLength(255);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegHyperlink).HasMaxLength(255);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegSummary).HasMaxLength(4000);

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RepealNote).HasMaxLength(500);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationText3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationText", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ConsolidatedHyperlink).HasMaxLength(255);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegHyperlink).HasMaxLength(255);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegSummary).HasMaxLength(4000);

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RepealNote).HasMaxLength(500);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RegulationWithHeadingsLinkedToQn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationWithHeadingsLinkedToQn", "dbo");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.RegId).HasColumnName("RegID");
            });

            modelBuilder.Entity<RegulationWordCounts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationWordCounts", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.Region).HasMaxLength(25);
            });

            modelBuilder.Entity<RegulationsForIntel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RegulationsForIntel", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<RepetitionBase>(entity =>
            {
                entity.HasKey(e => e.RepCode);

                entity.ToTable("RepetitionBase", "dbo");

                entity.Property(e => e.Description).HasMaxLength(255);
            });

            modelBuilder.Entity<RequiredAnswer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequiredAnswer", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateDecTreeCode)
                    .HasColumnName("startDate_DecTreeCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCode)
                    .HasColumnName("startDate_QnCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RequiredAnswer1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequiredAnswer", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateDecTreeCode)
                    .HasColumnName("startDate_DecTreeCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCode)
                    .HasColumnName("startDate_QnCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RequiredAnswer2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequiredAnswer", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateDecTreeCode)
                    .HasColumnName("startDate_DecTreeCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCode)
                    .HasColumnName("startDate_QnCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RequiredAnswer3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequiredAnswer", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateDecTreeCode)
                    .HasColumnName("startDate_DecTreeCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCode)
                    .HasColumnName("startDate_QnCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RequirementLinkTypeSqlOracle>(entity =>
            {
                entity.HasKey(e => new { e.RequirementLinkTypeCe, e.TypeId });

                entity.ToTable("RequirementLinkTypeSqlOracle", "dbo");

                entity.Property(e => e.RequirementLinkTypeCe)
                    .HasColumnName("RequirementLinkTypeCE")
                    .HasMaxLength(32);

                entity.Property(e => e.RequirementLinkTypeDs)
                    .IsRequired()
                    .HasColumnName("RequirementLinkTypeDS")
                    .HasMaxLength(32);

                entity.Property(e => e.TypeText)
                    .IsRequired()
                    .HasMaxLength(32);
            });

            modelBuilder.Entity<RequirementsForIntel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequirementsForIntel", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<RestrictedUsers>(entity =>
            {
                entity.HasKey(e => new { e.Username, e.Countrycode })
                    .HasName("aaaaaRestrictedUsers_PK")
                    .IsClustered(false);

                entity.ToTable("RestrictedUsers", "dbo");

                entity.HasIndex(e => e.Countrycode)
                    .HasName("countrycode");

                entity.Property(e => e.Username)
                    .HasColumnName("username")
                    .HasMaxLength(50);

                entity.Property(e => e.Countrycode)
                    .HasColumnName("countrycode")
                    .HasMaxLength(2);
            });

            modelBuilder.Entity<RoleArea>(entity =>
            {
                entity.HasKey(e => e.RoleArea1)
                    .HasName("pk_RoleArea_RoleArea");

                entity.ToTable("RoleArea", "dbo");

                entity.Property(e => e.RoleArea1)
                    .HasColumnName("RoleArea")
                    .HasMaxLength(256)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Roles>(entity =>
            {
                entity.HasKey(e => e.RoleCode)
                    .HasName("pk_Roles_RoleCode");

                entity.ToTable("Roles", "dbo");

                entity.Property(e => e.RoleCode)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.RoleArea)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('ADNR')");

                entity.Property(e => e.RoleName)
                    .HasMaxLength(256)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RrToCm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RrToCM", "dbo");

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");
            });

            modelBuilder.Entity<RrfilteredQuestions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RRfilteredQuestions", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LanguageCodeHeadings)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<RrfilteredQuestions1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RRfilteredQuestions1", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.HeadingCode1).HasMaxLength(2);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<RrfindAnswerforRegs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RRfindAnswerforRegs", "dbo");

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idanswer).HasColumnName("IDAnswer");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcontact)
                    .IsRequired()
                    .HasColumnName("IDContact")
                    .HasMaxLength(255);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.ValidityDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<RrlistofAssumptions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RRlistofAssumptions", "dbo");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<RrmorethanoneReg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RRmorethanoneReg", "dbo");

                entity.Property(e => e.CountOfRegId).HasColumnName("CountOfRegID");

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<RrregbyDtq>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RRRegbyDTQ", "dbo");

                entity.Property(e => e.ConsolidatedHyperlink).HasMaxLength(255);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Effective).HasColumnName("effective");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegHyperlink).HasMaxLength(255);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<RrregbyDtqnoEn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RRRegbyDTQnoEn", "dbo");

                entity.Property(e => e.ConsolidatedHyperlink).HasMaxLength(255);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Effective).HasColumnName("effective");

                entity.Property(e => e.RegHyperlink).HasMaxLength(255);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<RrregsAnswers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RRRegsAnswers", "dbo");

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idanswer).HasColumnName("IDAnswer");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcontact)
                    .IsRequired()
                    .HasColumnName("IDContact")
                    .HasMaxLength(255);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.ValidityDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<RrrelatedDtqforRegs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RRrelatedDTQforRegs", "dbo");

                entity.Property(e => e.CountryCodeDtq)
                    .HasColumnName("CountryCodeDTQ")
                    .HasMaxLength(2);

                entity.Property(e => e.DecTreeCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");
            });

            modelBuilder.Entity<Rrrelatedheadings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RRrelatedheadings", "dbo");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegId).HasColumnName("RegID");
            });

            modelBuilder.Entity<Scope>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Scope", "dbo");

                entity.Property(e => e.Expr1001)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1002)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1003).HasMaxLength(10);

                entity.Property(e => e.Expr1004)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ScopeCode1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ScorecardResponseModels>(entity =>
            {
                entity.HasKey(e => e.ElementId)
                    .HasName("PK_dbo.ScorecardResponseModels");

                entity.ToTable("ScorecardResponseModels", "dbo");
            });

            modelBuilder.Entity<ScreeningQuestionsDistributor>(entity =>
            {
                entity.HasKey(e => e.HeadingCode);

                entity.ToTable("ScreeningQuestionsDistributor", "dbo");

                entity.Property(e => e.HeadingCode).HasMaxLength(50);

                entity.Property(e => e.ScreeningQuestions).HasMaxLength(300);
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Service", "dbo");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceUrl)
                    .HasColumnName("ServiceURL")
                    .HasMaxLength(255);

                entity.Property(e => e.SortCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ServiceDatesByCountry>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceDatesByCountry", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DateAp)
                    .HasColumnName("dateAP")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateCp)
                    .HasColumnName("dateCP")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateIs)
                    .HasColumnName("dateIS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateLg)
                    .HasColumnName("dateLG")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateRr)
                    .HasColumnName("dateRR")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateSc)
                    .HasColumnName("dateSC")
                    .HasColumnType("datetime");

                entity.Property(e => e.EarliestAdoptionDate).HasColumnType("datetime");

                entity.Property(e => e.LatestReportDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ServicePackage>(entity =>
            {
                entity.HasKey(e => new { e.PackageCode, e.BuildingBlockCode })
                    .HasName("PK_BuildingBlocks");

                entity.ToTable("ServicePackage", "dbo");

                entity.Property(e => e.PackageCode)
                    .HasColumnName("packageCode")
                    .HasMaxLength(50);

                entity.Property(e => e.BuildingBlockCode)
                    .HasColumnName("buildingBlockCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ServiceVersionQueue>(entity =>
            {
                entity.HasKey(e => e.IdserviceReportQueue)
                    .HasName("PK__ServiceV__EC2103F3C0E3FDC0");

                entity.ToTable("ServiceVersionQueue", "dbo");

                entity.HasIndex(e => e.CountryCode);

                entity.HasIndex(e => e.IndCode);

                entity.HasIndex(e => e.LanguageCode);

                entity.HasIndex(e => e.QueueStatus);

                entity.HasIndex(e => e.RegionCode);

                entity.HasIndex(e => e.ResearchDate);

                entity.HasIndex(e => e.SetCode);

                entity.Property(e => e.IdserviceReportQueue).HasColumnName("IDServiceReportQueue");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.ErrorMsg).IsUnicode(false);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.QueueStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ResearchDate).HasColumnType("datetime");

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SetCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ServiceVersionTrackTable>(entity =>
            {
                entity.ToTable("ServiceVersionTrackTable", "dbo");

                entity.HasIndex(e => e.IdserviceReportQueue)
                    .HasName("IX_ServiceVersionTrackTable");

                entity.Property(e => e.IdserviceReportQueue).HasColumnName("IDServiceReportQueue");

                entity.Property(e => e.ItemId)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ViewName)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<ServiceVersionWareHouse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceVersionWareHouse", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ExpectedPublicationDate).HasColumnType("date");

                entity.Property(e => e.Frequency).HasMaxLength(255);

                entity.Property(e => e.IndName)
                    .HasColumnName("indName")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.PublicationDate)
                    .HasColumnName(" Publication Date")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.ResearchDate)
                    .HasColumnName("Research Date")
                    .HasColumnType("date");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SetCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ServiceVersionWareHouseFullDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceVersionWareHouseFullDetails", "dbo");

                entity.Property(e => e.BoxPublicationDate)
                    .HasColumnName("Box Publication Date")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ExpectedPublicationDate).HasColumnType("date");

                entity.Property(e => e.Frequency).HasMaxLength(255);

                entity.Property(e => e.IndName)
                    .HasColumnName("indName")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.ResearchDate)
                    .HasColumnName("Research Date")
                    .HasColumnType("date");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SetCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");
            });

            modelBuilder.Entity<SkillDescription>(entity =>
            {
                entity.HasKey(e => e.SkillLevel);

                entity.ToTable("SkillDescription", "dbo");

                entity.Property(e => e.SkillLevel).ValueGeneratedNever();

                entity.Property(e => e.LevelDescription)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<SkillDescriptionRole>(entity =>
            {
                entity.HasKey(e => new { e.Role, e.SkillLevelId })
                    .HasName("pk_RoleSkill");

                entity.ToTable("SkillDescriptionRole", "dbo");

                entity.Property(e => e.Role)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.SkillLevelId).HasColumnName("SkillLevelID");
            });

            modelBuilder.Entity<SpecificPreferredMappedHeading>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SpecificPreferredMappedHeading", "dbo");

                entity.Property(e => e.ClientHeadingCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Parent).HasMaxLength(2);
            });

            modelBuilder.Entity<SqlUsed>(entity =>
            {
                entity.HasKey(e => new { e.Link, e.MName });

                entity.ToTable("SqlUsed", "dbo");

                entity.Property(e => e.Link)
                    .HasColumnName("link")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MName)
                    .HasColumnName("m_name")
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.StoredProc)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Status>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STATUS", "dbo");

                entity.Property(e => e.Idstatus).HasColumnName("IDStatus");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.SortOrder).HasMaxLength(50);

                entity.Property(e => e.Status1)
                    .IsRequired()
                    .HasColumnName("Status")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<StatusDescription>(entity =>
            {
                entity.HasKey(e => new { e.DcStatus, e.LanguageCode });

                entity.ToTable("StatusDescription", "dbo");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(255);
            });

            modelBuilder.Entity<TblClientField>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.ShowThisField })
                    .HasName("aaaaatblClientField_PK");

                entity.ToTable("tblClientField", "dbo");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.ShowThisField).HasMaxLength(50);
            });

            modelBuilder.Entity<TblDeliverableConsultants>(entity =>
            {
                entity.HasKey(e => e.DcId);

                entity.ToTable("tblDeliverableConsultants", "dbo");

                entity.Property(e => e.DcId).HasColumnName("DcID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DcComments).HasMaxLength(250);

                entity.Property(e => e.DcCompleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.DcDate).HasColumnType("datetime");

                entity.Property(e => e.DcDescription).HasMaxLength(250);

                entity.Property(e => e.DcEndDate).HasColumnType("datetime");

                entity.Property(e => e.Dcdaterelated)
                    .HasColumnName("DCDaterelated")
                    .HasColumnType("datetime");

                entity.Property(e => e.DcmrSortOrder).HasColumnName("DCMrSortOrder");

                entity.Property(e => e.Dcstatus)
                    .HasColumnName("DCStatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FirstOfTheMonth)
                    .HasColumnType("date")
                    .HasComputedColumnSql("(CONVERT([date],dateadd(month,datediff(month,(0),[DcDate]),(0)),(0)))");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ValidatedBy).HasMaxLength(50);

                entity.Property(e => e.ValidationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblDeliverables>(entity =>
            {
                entity.HasKey(e => e.DlId);

                entity.ToTable("tblDeliverables", "dbo");

                entity.Property(e => e.DlChangedDate).HasColumnType("datetime");

                entity.Property(e => e.DlChangedby).HasMaxLength(50);

                entity.Property(e => e.DlCountryCode).HasMaxLength(2);

                entity.Property(e => e.DlCreatedBy).HasMaxLength(50);

                entity.Property(e => e.DlCreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DlDescription).HasMaxLength(250);

                entity.Property(e => e.DlExpectedAccomplishDate).HasColumnType("datetime");

                entity.Property(e => e.DlIncludeFederal).HasDefaultValueSql("((0))");

                entity.Property(e => e.DlLanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.DlNote).HasMaxLength(250);

                entity.Property(e => e.DlReelAccomplishDate).HasColumnType("datetime");

                entity.Property(e => e.DlRef).HasMaxLength(10);

                entity.Property(e => e.DlRegionCode)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'_countrywide')");

                entity.Property(e => e.DlServiceCode).HasMaxLength(50);

                entity.Property(e => e.DlValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblDirepce>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDIREPCE", "dbo");

                entity.Property(e => e.ApprovalDate).HasColumnType("datetime");

                entity.Property(e => e.Apuser)
                    .HasColumnName("APuser")
                    .HasMaxLength(255);

                entity.Property(e => e.BasedIn)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Category).HasDefaultValueSql("((1))");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("(N'US')");

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.EnhesaFlash).HasColumnName("ENHESA_Flash");

                entity.Property(e => e.EnhesaType)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('C')");

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.Flash).HasMaxLength(50);

                entity.Property(e => e.FlashLanguage).HasMaxLength(2);

                entity.Property(e => e.FnamePerson)
                    .HasColumnName("FNamePerson")
                    .HasMaxLength(50);

                entity.Property(e => e.Hyperlink).HasMaxLength(150);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idcounter)
                    .HasColumnName("IDCounter")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.InfoEpcServices).HasColumnName("Info_EPC_Services");

                entity.Property(e => e.InsertDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(CONVERT([datetime],CONVERT([varchar],getdate(),(1)),(1)))");

                entity.Property(e => e.Intl).HasMaxLength(5);

                entity.Property(e => e.LastUpdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(CONVERT([datetime],CONVERT([varchar],getdate(),(1)),(1)))");

                entity.Property(e => e.LeadSource).HasDefaultValueSql("((1))");

                entity.Property(e => e.LnamePerson)
                    .HasColumnName("LNamePerson")
                    .HasMaxLength(60);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.MrreportAlert)
                    .HasColumnName("MRReportAlert")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Notes).HasMaxLength(255);

                entity.Property(e => e.Num).HasMaxLength(20);

                entity.Property(e => e.OfficeArea)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Organisation).HasMaxLength(180);

                entity.Property(e => e.OrganizationDivision).HasMaxLength(180);

                entity.Property(e => e.Phone1).HasMaxLength(12);

                entity.Property(e => e.Phone2).HasMaxLength(12);

                entity.Property(e => e.Phone3).HasMaxLength(12);

                entity.Property(e => e.Phone4).HasMaxLength(12);

                entity.Property(e => e.Pref1).HasMaxLength(7);

                entity.Property(e => e.Pref2).HasMaxLength(7);

                entity.Property(e => e.Pref3).HasMaxLength(7);

                entity.Property(e => e.Pref4).HasMaxLength(7);

                entity.Property(e => e.PrefF).HasMaxLength(7);

                entity.Property(e => e.Profession).HasMaxLength(60);

                entity.Property(e => e.ProvinceState).HasMaxLength(100);

                entity.Property(e => e.SIndex)
                    .IsRequired()
                    .HasColumnName("sIndex")
                    .HasMaxLength(2)
                    .HasDefaultValueSql("(N'B')");

                entity.Property(e => e.ServiceUpdateFrequency).HasDefaultValueSql("((2))");

                entity.Property(e => e.Sex).HasMaxLength(1);

                entity.Property(e => e.Street).HasMaxLength(200);

                entity.Property(e => e.SubmissionDate).HasColumnType("datetime");

                entity.Property(e => e.TownCity).HasMaxLength(100);

                entity.Property(e => e.TranslationNotes).HasMaxLength(255);

                entity.Property(e => e.UserNotes).HasMaxLength(255);

                entity.Property(e => e.Webinards)
                    .HasColumnName("webinards")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ZipCode).HasMaxLength(20);
            });

            modelBuilder.Entity<TblPoComponents>(entity =>
            {
                entity.HasKey(e => e.PoCoId)
                    .HasName("PK_tblPoComponents_1");

                entity.ToTable("tblPoComponents", "dbo");

                entity.Property(e => e.PoCoCurrency).HasMaxLength(5);

                entity.Property(e => e.PoCoDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.PoCoDid).HasColumnName("PoCoDId");

                entity.Property(e => e.PoCoFeedBack).HasMaxLength(250);

                entity.Property(e => e.PoCoHeadingSet)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PoCoInvoiceSchedule).HasMaxLength(150);

                entity.Property(e => e.PoCoRequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.PoCoTailoring).HasMaxLength(250);

                entity.Property(e => e.PoDate).HasColumnType("datetime");

                entity.Property(e => e.PoLastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PoModifiedBy).HasMaxLength(50);
            });

            modelBuilder.Entity<TblPurchaseOrders>(entity =>
            {
                entity.HasKey(e => e.PoId);

                entity.ToTable("tblPurchaseOrders", "dbo");

                entity.Property(e => e.PoChangedBy).HasMaxLength(50);

                entity.Property(e => e.PoChangedDate).HasColumnType("datetime");

                entity.Property(e => e.PoCloseAt).HasColumnType("datetime");

                entity.Property(e => e.PoCloseBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PoContactPerson).HasMaxLength(50);

                entity.Property(e => e.PoCreatedBy).HasMaxLength(50);

                entity.Property(e => e.PoCreatedDate).HasColumnType("datetime");

                entity.Property(e => e.PoCustId).HasColumnName("PoCustID");

                entity.Property(e => e.PoDate).HasColumnType("datetime");

                entity.Property(e => e.PoDeliveryAddress).HasMaxLength(250);

                entity.Property(e => e.PoDeliveryDate)
                    .HasColumnName("poDeliveryDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.PoDescription).HasMaxLength(250);

                entity.Property(e => e.PoExpectedAcooplishDate).HasColumnType("datetime");

                entity.Property(e => e.PoFullDocumented)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PoNote)
                    .HasMaxLength(1500)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PoNumber).HasMaxLength(50);

                entity.Property(e => e.PoPaymentTerms).HasMaxLength(250);

                entity.Property(e => e.PoPrjOwner)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PoReabilitycomment)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PoRef).HasMaxLength(250);

                entity.Property(e => e.PoReminderDate)
                    .HasColumnName("poReminderDate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TblUrl>(entity =>
            {
                entity.HasKey(e => e.Urlcode)
                    .HasName("aaaaatblURL_PK");

                entity.ToTable("tblURL", "dbo");

                entity.HasIndex(e => e.Url)
                    .HasName("IX_tblURL")
                    .IsUnique();

                entity.Property(e => e.Urlcode)
                    .HasColumnName("urlcode")
                    .HasMaxLength(6);

                entity.Property(e => e.DateLastChecked)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateValidated).HasColumnType("datetime");

                entity.Property(e => e.IsVersionable)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Reason).HasMaxLength(255);

                entity.Property(e => e.StatusCode)
                    .HasColumnName("statusCode")
                    .HasDefaultValueSql("((404))");

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasColumnName("url");
            });

            modelBuilder.Entity<TblUrlList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUrlList", "dbo");

                entity.Property(e => e.Url).HasColumnName("url");
            });

            modelBuilder.Entity<TblUrlamendmentCodeLanguageCode>(entity =>
            {
                entity.HasKey(e => new { e.Urlcode, e.AmendmentCode, e.LanguageCode });

                entity.ToTable("tblURLAmendmentCodeLanguageCode", "dbo");

                entity.HasIndex(e => new { e.ParseDate, e.AmendmentCode })
                    .HasName("IX_tblURLAmendmentCodeLanguageCode");

                entity.Property(e => e.Urlcode)
                    .HasColumnName("urlcode")
                    .HasMaxLength(6);

                entity.Property(e => e.AmendmentCode).HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ParseDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<TblUrlidtopicLanguageCode>(entity =>
            {
                entity.HasKey(e => new { e.Urlcode, e.Idtopic, e.LanguageCode })
                    .HasName("aaaaatblURLIDTopicLanguageCode_PK");

                entity.ToTable("tblURLIDTopicLanguageCode", "dbo");

                entity.HasIndex(e => e.Urlcode);

                entity.Property(e => e.Urlcode)
                    .HasColumnName("urlcode")
                    .HasMaxLength(6);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ParseDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<TblUrlignoreDomain>(entity =>
            {
                entity.HasKey(e => e.DomainName);

                entity.ToTable("tblURLIgnoreDomain", "dbo");

                entity.Property(e => e.DomainName)
                    .HasColumnName("domainName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasColumnName("url")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblUrlintroIdlanguageCode>(entity =>
            {
                entity.HasKey(e => new { e.Urlcode, e.IntroId, e.LanguageCode });

                entity.ToTable("tblURLIntroIDLanguageCode", "dbo");

                entity.Property(e => e.Urlcode)
                    .HasColumnName("urlcode")
                    .HasMaxLength(6);

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ParseDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<TblUrlitsOk>(entity =>
            {
                entity.HasKey(e => e.Urlcode);

                entity.ToTable("tblURLItsOK", "dbo");

                entity.Property(e => e.Urlcode)
                    .HasColumnName("urlcode")
                    .HasMaxLength(6);

                entity.Property(e => e.DateLastChecked)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<TblUrlqnCodeLanguageCode>(entity =>
            {
                entity.HasKey(e => new { e.Urlcode, e.QnCode, e.LanguageCode });

                entity.ToTable("tblURLQnCodeLanguageCode", "dbo");

                entity.HasIndex(e => new { e.ParseDate, e.QnCode })
                    .HasName("IX_tblURLQnCodeLanguageCode");

                entity.Property(e => e.Urlcode)
                    .HasColumnName("urlcode")
                    .HasMaxLength(6);

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ParseDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<TblUrlregIdlanguageCode>(entity =>
            {
                entity.HasKey(e => new { e.Urlcode, e.RegId, e.LanguageCode });

                entity.ToTable("tblURLRegIDLanguageCode", "dbo");

                entity.HasIndex(e => new { e.ParseDate, e.RegId })
                    .HasName("IX_tblURLRegIDLanguageCode");

                entity.HasIndex(e => new { e.Urlcode, e.RegId })
                    .HasName("<Name of Missing Index, sysname,>");

                entity.Property(e => e.Urlcode)
                    .HasColumnName("urlcode")
                    .HasMaxLength(6);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ParseDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<TlManagement>(entity =>
            {
                entity.HasKey(e => e.Tlid);

                entity.ToTable("TL_Management", "dbo");

                entity.Property(e => e.Tlid).HasColumnName("TLID");

                entity.Property(e => e.Client).HasMaxLength(50);

                entity.Property(e => e.Corrected).HasDefaultValueSql("((0))");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EnhesaId)
                    .HasColumnName("EnhesaID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Modifier).HasMaxLength(50);

                entity.Property(e => e.OperationDate).HasColumnType("datetime");

                entity.Property(e => e.RegionCode).HasMaxLength(300);

                entity.Property(e => e.SavedXmlPath)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Service)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Status)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TargetLanguage)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Translator).HasMaxLength(50);

                entity.Property(e => e.Type)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Validated).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TmpBadDectreeCodes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp_badDectreeCodes", "dbo");

                entity.Property(e => e.Dectreecode)
                    .IsRequired()
                    .HasColumnName("dectreecode")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<TmpBadDectreeCodes2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp_badDectreeCodes2", "dbo");

                entity.Property(e => e.Dectreecode)
                    .IsRequired()
                    .HasColumnName("dectreecode")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<Topic>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Topic", "dbo");

                entity.Property(e => e.AdoptionDate).HasColumnType("datetime");

                entity.Property(e => e.AffectedOperations).HasMaxLength(150);

                entity.Property(e => e.ArchiveReference).HasMaxLength(100);

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.AuthorId).HasColumnName("AuthorID");

                entity.Property(e => e.AuthorInformation).HasMaxLength(255);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ContactType)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.DateLastModified).HasColumnType("datetime");

                entity.Property(e => e.EnforcingAuthority).HasMaxLength(255);

                entity.Property(e => e.Idcontact).HasColumnName("IDContact");

                entity.Property(e => e.Idproduct)
                    .HasColumnName("IDProduct")
                    .HasMaxLength(10);

                entity.Property(e => e.Idstatus).HasColumnName("IDStatus");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.InternalCode).HasMaxLength(50);

                entity.Property(e => e.IssuingAuthority).HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.PrintedforQc).HasColumnName("PrintedforQC");

                entity.Property(e => e.PrintedforQcby)
                    .HasColumnName("PrintedforQCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.PrintedforQcdate)
                    .HasColumnName("PrintedforQCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProofReadBy).HasMaxLength(50);

                entity.Property(e => e.ProofReadDate).HasColumnType("datetime");

                entity.Property(e => e.Qc).HasColumnName("QC");

                entity.Property(e => e.Qcby)
                    .HasColumnName("QCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.Qcdate)
                    .HasColumnName("QCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rapid).HasMaxLength(4000);

                entity.Property(e => e.RapidComments).HasMaxLength(250);

                entity.Property(e => e.ReadyforPublicationBy).HasMaxLength(50);

                entity.Property(e => e.ReadyforPublicationDate).HasColumnType("datetime");

                entity.Property(e => e.ReadyforQc).HasColumnName("ReadyforQC");

                entity.Property(e => e.ReadyforQcby)
                    .HasColumnName("ReadyforQCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.ReadyforQcdate)
                    .HasColumnName("ReadyforQCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegulatoryText).HasMaxLength(255);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.ReviewedBy).HasMaxLength(50);

                entity.Property(e => e.ReviewedDate).HasColumnType("datetime");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.SentBy).HasMaxLength(50);

                entity.Property(e => e.SentDate).HasColumnType("datetime");

                entity.Property(e => e.Topic1)
                    .IsRequired()
                    .HasColumnName("Topic")
                    .HasMaxLength(250);

                entity.Property(e => e.TranslatedBy).HasMaxLength(50);

                entity.Property(e => e.TranslatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TopicHeading>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TopicHeading", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TopicHeading1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TopicHeading", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TopicHeading2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TopicHeading", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TopicHeading3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TopicHeading", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TopicKeyword>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TopicKeyword", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IdkeyWord).HasColumnName("IDKeyWord");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TopicKeyword1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TopicKeyword", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IdkeyWord).HasColumnName("IDKeyWord");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TopicKeyword2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TopicKeyword", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IdkeyWord).HasColumnName("IDKeyWord");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TopicKeyword3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TopicKeyword", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IdkeyWord).HasColumnName("IDKeyWord");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TopicPerCountryRecurrentStatsForTranslation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TopicPerCountryRecurrentStatsForTranslation", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.TotalMrs).HasColumnName("totalMRs");
            });

            modelBuilder.Entity<TopicSummaryAndRapidRecurrentStatsForTranslation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TopicSummaryAndRapidRecurrentStatsForTranslation", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TopicsLastPublishedItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Topics_lastPublishedItems", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Rapid).HasMaxLength(4000);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.ReportDate)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<TotalQnCounts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TotalQnCounts", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TotalQnCountsSw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TotalQnCounts_sw", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TotalQnTopLevelHeadingCounts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TotalQnTopLevelHeadingCounts", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TopLevelHeadingCode).HasMaxLength(15);
            });

            modelBuilder.Entity<TotalRegulationCounts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TotalRegulationCounts", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TotalRegulationCountsSw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TotalRegulationCounts_sw", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TotalRegulationTopLevelHeadingCounts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TotalRegulationTopLevelHeadingCounts", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TopLevelHeadingCode).HasMaxLength(15);
            });

            modelBuilder.Entity<TrackingAmendment>(entity =>
            {
                entity.HasKey(e => new { e.AmendmentCode, e.StartDate });

                entity.ToTable("tracking_Amendment", "temporal");

                entity.HasIndex(e => new { e.AmendmentCode, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_Amendment")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.AmendmentCode })
                    .HasName("IX_tracking_Amendment_rowId_endDate");

                entity.Property(e => e.AmendmentCode).HasMaxLength(15);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingAmendmentMonitoringReport>(entity =>
            {
                entity.HasKey(e => new { e.Idtopic, e.AmendmentCode, e.StartDate });

                entity.ToTable("tracking_AmendmentMonitoringReport", "temporal");

                entity.HasIndex(e => new { e.Idtopic, e.AmendmentCode, e.StartDate, e.StartDateAmendmentCode })
                    .HasName("IX_tracking_AmendmentMonitoringReport_AmendmentCode")
                    .IsUnique();

                entity.HasIndex(e => new { e.Idtopic, e.AmendmentCode, e.StartDate, e.StartDateIdtopic })
                    .HasName("IX_tracking_AmendmentMonitoringReport_IDTopic")
                    .IsUnique();

                entity.HasIndex(e => new { e.Idtopic, e.AmendmentCode, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_AmendmentMonitoringReport")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.Idtopic, e.AmendmentCode })
                    .HasName("IX_tracking_AmendmentMonitoringReport_rowId_endDate");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.AmendmentCode).HasMaxLength(15);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateAmendmentCode)
                    .HasColumnName("startDate_AmendmentCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIdtopic)
                    .HasColumnName("startDate_IDTopic")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingAmendmentText>(entity =>
            {
                entity.HasKey(e => new { e.AmendmentCode, e.LanguageCode, e.StartDate });

                entity.ToTable("tracking_AmendmentText", "temporal");

                entity.HasIndex(e => new { e.AmendmentCode, e.LanguageCode, e.StartDate, e.LanguageCodeBase, e.StartDateBase })
                    .HasName("IX_tracking_AmendmentText_BaseLanguageVersion")
                    .IsUnique();

                entity.HasIndex(e => new { e.AmendmentCode, e.LanguageCode, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_AmendmentText")
                    .IsUnique();

                entity.HasIndex(e => new { e.LanguageCode, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.AmendmentCode })
                    .HasName("IX_tracking_AmendmentText_LanguageCode_endDate");

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.AmendmentCode, e.LanguageCode })
                    .HasName("IX_tracking_AmendmentText_rowId_endDate");

                entity.Property(e => e.AmendmentCode).HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingBusinessImpactText>(entity =>
            {
                entity.HasKey(e => new { e.IntroId, e.Idclient, e.LanguageCode, e.StartDate });

                entity.ToTable("tracking_BusinessImpactText", "temporal");

                entity.HasIndex(e => new { e.IntroId, e.Idclient, e.LanguageCode, e.StartDate, e.StartDateIntroId })
                    .HasName("IX_tracking_BusinessImpactText_IntroID")
                    .IsUnique();

                entity.HasIndex(e => new { e.IntroId, e.Idclient, e.LanguageCode, e.StartDate, e.LanguageCodeBase, e.StartDateBase })
                    .HasName("IX_tracking_BusinessImpactText_BaseLanguageVersion")
                    .IsUnique();

                entity.HasIndex(e => new { e.IntroId, e.Idclient, e.LanguageCode, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_BusinessImpactText")
                    .IsUnique();

                entity.HasIndex(e => new { e.LanguageCode, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.IntroId, e.Idclient })
                    .HasName("IX_tracking_BusinessImpactText_LanguageCode_endDate");

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.IntroId, e.LanguageCode, e.Idclient })
                    .HasName("IX_tracking_BusinessImpactText_rowId_endDate");

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIntroId)
                    .HasColumnName("startDate_IntroID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingCitationBase>(entity =>
            {
                entity.HasKey(e => new { e.Idcitation, e.StartDate });

                entity.ToTable("tracking_CitationBase", "temporal");

                entity.HasIndex(e => new { e.Idcitation, e.NewResearchDate, e.RowId, e.StartDate, e.RowStatus })
                    .HasName("IX_tracking_CitationBase")
                    .IsUnique();

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingCitationQn>(entity =>
            {
                entity.HasKey(e => new { e.QnCode, e.Idcitation, e.StartDate });

                entity.ToTable("tracking_CitationQn", "temporal");

                entity.HasIndex(e => new { e.QnCode, e.Idcitation, e.NewResearchDate, e.RowStatus, e.StartDate })
                    .HasName("IX_tracking_CitationQn")
                    .IsUnique();

                entity.HasIndex(e => new { e.QnCode, e.Idcitation, e.RowStatus, e.NewResearchDate, e.RowId })
                    .HasName("IX_tracking_CitationQn_rowId_endDate");

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateIdcitation)
                    .HasColumnName("startDate_IDCitation")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.StartDateQnCode)
                    .HasColumnName("startDate_QnCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingCitationQnCopy>(entity =>
            {
                entity.HasKey(e => new { e.QnCode, e.Idcitation, e.StartDate });

                entity.ToTable("tracking_CitationQn_copy", "temporal");

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.RevisionNumber)
                    .HasColumnName("revisionNumber")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDateIdcitation)
                    .HasColumnName("startDate_IDCitation")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCode)
                    .HasColumnName("startDate_QnCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingCitationText>(entity =>
            {
                entity.HasKey(e => new { e.Idcitation, e.LanguageCode, e.StartDate });

                entity.ToTable("tracking_CitationText", "temporal");

                entity.HasIndex(e => new { e.Idcitation, e.NewResearchDate, e.RowStatus, e.RowId })
                    .HasName("IX_tracking_CitationText_BaseLanguageVersion");

                entity.HasIndex(e => new { e.Idcitation, e.LanguageCode, e.RowId, e.RowStatus, e.StartDate })
                    .HasName("IX_tracking_CitationText_rowId_endDate")
                    .IsUnique();

                entity.HasIndex(e => new { e.Idcitation, e.LanguageCode, e.RowId, e.NewResearchDate, e.RowStatus, e.StartDate })
                    .HasName("IX_tracking_CitationText")
                    .IsUnique();

                entity.Property(e => e.Idcitation).HasColumnName("IDCitation");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingCoAllServiceVersion>(entity =>
            {
                entity.HasKey(e => new { e.ServiceCode, e.CountryCode, e.RegionCode, e.LanguageCode, e.SetCode, e.IndCode, e.ProductTypeCode, e.RowId, e.StartDate });

                entity.ToTable("tracking_co_all_ServiceVersion", "temporal");

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.SetCode).HasMaxLength(50);

                entity.Property(e => e.IndCode).HasColumnName("indCode");

                entity.Property(e => e.ProductTypeCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('None')");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingCoApDerivedQuestion>(entity =>
            {
                entity.HasKey(e => new { e.QnCodeMaster, e.QnCodeDerived, e.StartDate });

                entity.ToTable("tracking_co_ap_DerivedQuestion", "temporal");

                entity.HasIndex(e => new { e.QnCodeMaster, e.QnCodeDerived, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_co_ap_DerivedQuestion")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.QnCodeMaster, e.QnCodeDerived })
                    .HasName("IX_tracking_co_ap_DerivedQuestion_rowId_endDate");

                entity.Property(e => e.QnCodeMaster)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnCodeDerived)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateQnCodeDerived)
                    .HasColumnName("startDate_QnCodeDerived")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");

                entity.Property(e => e.StartDateQnCodeMaster)
                    .HasColumnName("startDate_QnCodeMaster")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('1900-01-01')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingCoIndustryRegulation>(entity =>
            {
                entity.HasKey(e => new { e.IndCode, e.RegId, e.StartDate });

                entity.ToTable("tracking_co_Industry_Regulation", "temporal");

                entity.HasIndex(e => new { e.RegId, e.EndDate })
                    .HasName("ix_tracking_co_Industry_Regulation_RegID_endDate");

                entity.HasIndex(e => new { e.IndCode, e.RegId, e.RowId, e.EndDate })
                    .HasName("ix_tracking_co_Industry_Regulation_endDate");

                entity.HasIndex(e => new { e.IndCode, e.RegId, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_co_Industry_Regulation")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.IndCode, e.RegId })
                    .HasName("IX_tracking_co_Industry_Regulation_rowId_endDate");

                entity.Property(e => e.IndCode).HasColumnName("indCode");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingDecTree>(entity =>
            {
                entity.HasKey(e => new { e.DecTreeCode, e.StartDate });

                entity.ToTable("tracking_DecTree", "temporal");

                entity.HasIndex(e => new { e.DecTreeCode, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_DecTree")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.DecTreeCode })
                    .HasName("IX_tracking_DecTree_rowId_endDate");

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingDecTreeCodeDecTreeCode>(entity =>
            {
                entity.HasKey(e => new { e.DecTreeCodeChild, e.DecTreeCodeParent, e.StartDate });

                entity.ToTable("tracking_DecTreeCodeDecTreeCode", "temporal");

                entity.HasIndex(e => new { e.DecTreeCodeChild, e.DecTreeCodeParent, e.StartDate, e.StartDateDecTreeCodeChild })
                    .HasName("IX_tracking_DecTreeCodeDecTreeCode_DecTreeCodeChild")
                    .IsUnique();

                entity.HasIndex(e => new { e.DecTreeCodeChild, e.DecTreeCodeParent, e.StartDate, e.StartDateDecTreeCodeParent })
                    .HasName("IX_tracking_DecTreeCodeDecTreeCode_DecTreeCodeParent")
                    .IsUnique();

                entity.HasIndex(e => new { e.DecTreeCodeChild, e.DecTreeCodeParent, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_DecTreeCodeDecTreeCode")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.DecTreeCodeChild, e.DecTreeCodeParent })
                    .HasName("IX_tracking_DecTreeCodeDecTreeCode_rowId_endDate");

                entity.Property(e => e.DecTreeCodeChild).HasMaxLength(15);

                entity.Property(e => e.DecTreeCodeParent).HasMaxLength(15);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateDecTreeCodeChild)
                    .HasColumnName("startDate_DecTreeCodeChild")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateDecTreeCodeParent)
                    .HasColumnName("startDate_DecTreeCodeParent")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingDecTreeQnHeading>(entity =>
            {
                entity.HasKey(e => new { e.DecTreeCode, e.HeadingCode, e.StartDate });

                entity.ToTable("tracking_DecTreeQnHeading", "temporal");

                entity.HasIndex(e => new { e.DecTreeCode, e.HeadingCode, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_DecTreeQnHeading")
                    .IsUnique();

                entity.HasIndex(e => new { e.DecTreeCode, e.HeadingCode, e.RowId, e.UpdateTypeId, e.EndDate, e.RowStatus, e.StartDate })
                    .HasName("IX_tracking_DecTreeQnHeading_rowId_endDate");

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingDecTreeText>(entity =>
            {
                entity.HasKey(e => new { e.DecTreeCode, e.LanguageCode, e.StartDate });

                entity.ToTable("tracking_DecTreeText", "temporal");

                entity.HasIndex(e => new { e.DecTreeCode, e.LanguageCode, e.StartDate, e.LanguageCodeBase, e.StartDateBase })
                    .HasName("IX_tracking_DecTreeText_BaseLanguageVersion")
                    .IsUnique();

                entity.HasIndex(e => new { e.DecTreeCode, e.LanguageCode, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_DecTreeText")
                    .IsUnique();

                entity.HasIndex(e => new { e.LanguageCode, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.DecTreeCode })
                    .HasName("IX_tracking_DecTreeText_LanguageCode_endDate");

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.DecTreeCode, e.LanguageCode })
                    .HasName("IX_tracking_DecTreeText_rowId_endDate");

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingDefinition>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.DefNumber, e.StartDate });

                entity.ToTable("tracking_Definition", "temporal");

                entity.HasIndex(e => new { e.RegId, e.DefNumber, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_Definition")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.DefNumber, e.RegId })
                    .HasName("IX_tracking_Definition_rowId_endDate");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingDefinitionText>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.DefNumber, e.LanguageCode, e.StartDate });

                entity.ToTable("tracking_DefinitionText", "temporal");

                entity.HasIndex(e => new { e.RegId, e.DefNumber, e.LanguageCode, e.StartDate, e.LanguageCodeBase, e.StartDateBase })
                    .HasName("IX_tracking_DefinitionText_BaseLanguageVersion")
                    .IsUnique();

                entity.HasIndex(e => new { e.LanguageCode, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.DefNumber, e.RegId })
                    .HasName("IX_tracking_DefinitionText_LanguageCode_endDate");

                entity.HasIndex(e => new { e.RegId, e.DefNumber, e.LanguageCode, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_DefinitionText")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.DefNumber, e.RegId, e.LanguageCode })
                    .HasName("IX_tracking_DefinitionText_rowId_endDate");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingHeadingSetCode>(entity =>
            {
                entity.HasKey(e => new { e.SetCode, e.HeadingCode, e.StartDate });

                entity.ToTable("tracking_HeadingSetCode", "temporal");

                entity.Property(e => e.SetCode).HasMaxLength(50);

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrackingIntro>(entity =>
            {
                entity.HasKey(e => new { e.IntroId, e.StartDate });

                entity.ToTable("tracking_Intro", "temporal");

                entity.HasIndex(e => new { e.IntroId, e.RowId, e.EndDate })
                    .HasName("ix_tracking_Intro_endDate");

                entity.HasIndex(e => new { e.IntroId, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_Intro")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.IntroId })
                    .HasName("IX_tracking_Intro_rowId_endDate");

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingIntroText>(entity =>
            {
                entity.HasKey(e => new { e.IntroId, e.LanguageCode, e.StartDate });

                entity.ToTable("tracking_IntroText", "temporal");

                entity.HasIndex(e => new { e.IntroId, e.LanguageCode, e.StartDate, e.LanguageCodeBase, e.StartDateBase })
                    .HasName("IX_tracking_IntroText_BaseLanguageVersion")
                    .IsUnique();

                entity.HasIndex(e => new { e.IntroId, e.LanguageCode, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_IntroText")
                    .IsUnique();

                entity.HasIndex(e => new { e.LanguageCode, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.IntroId })
                    .HasName("IX_tracking_IntroText_LanguageCode_endDate");

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.LanguageCode, e.IntroId })
                    .HasName("IX_tracking_IntroText_rowId_endDate");

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingLgRegulationCountryRegion>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.RegionCode, e.CountryCode, e.StartDate });

                entity.ToTable("tracking_lg_RegulationCountryRegion", "temporal");

                entity.HasIndex(e => new { e.CountryCode, e.RegId, e.RegionCode, e.RowId, e.EndDate })
                    .HasName("ix_tracking_lg_RegulationCountryRegion_enddate");

                entity.HasIndex(e => new { e.RegId, e.RegionCode, e.RowId, e.CountryCode, e.EndDate })
                    .HasName("ix_tracking_lg_RegulationCountryRegion_CountryCode_endDate");

                entity.HasIndex(e => new { e.RegId, e.RowId, e.RegionCode, e.CountryCode, e.EndDate })
                    .HasName("ix_tracking_lg_RegulationCountryRegion_RegionCode_CountryCode_endDate");

                entity.HasIndex(e => new { e.RegId, e.RegionCode, e.CountryCode, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_lg_RegulationCountryRegion")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.RegionCode, e.CountryCode, e.RegId })
                    .HasName("IX_tracking_lg_RegulationCountryRegion_rowId_endDate");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingQn>(entity =>
            {
                entity.HasKey(e => new { e.QnCode, e.StartDate });

                entity.ToTable("tracking_Qn", "temporal");

                entity.HasIndex(e => new { e.NewResearchDate, e.QnCode, e.StartDate, e.UpdateTypeId })
                    .HasName("IX_tracking_Qn")
                    .IsUnique();

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AutoId)
                    .HasColumnName("autoID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingQnImage>(entity =>
            {
                entity.HasKey(e => new { e.QnCode, e.ImageLink, e.StartDate });

                entity.ToTable("tracking_QnImage", "temporal");

                entity.HasIndex(e => new { e.QnCode, e.ImageLink, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_QnImage")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.QnCode, e.ImageLink })
                    .HasName("IX_tracking_QnImage_rowId_endDate");

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ImageLink).HasMaxLength(200);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingQnItems>(entity =>
            {
                entity.HasKey(e => new { e.QnCode, e.LanguageCode, e.ItemId, e.StartDate });

                entity.ToTable("tracking_QnItems", "temporal");

                entity.HasIndex(e => new { e.QnCode, e.ItemId, e.RowId, e.StartDate, e.LanguageCode })
                    .HasName("IX_tracking_QnItems_rowId_endDate_new")
                    .IsUnique();

                entity.HasIndex(e => new { e.QnCode, e.ItemId, e.RowId, e.NewResearchDate, e.LanguageCode, e.EndDate, e.RowStatus })
                    .HasName("IX_tracking_QnItems_rowId_endDate")
                    .IsUnique();

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AutoId)
                    .HasColumnName("autoID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingQnText>(entity =>
            {
                entity.HasKey(e => new { e.QnCode, e.LanguageCode, e.StartDate });

                entity.ToTable("tracking_QnText", "temporal");

                entity.HasIndex(e => new { e.QnCode, e.LanguageCode, e.StartDate, e.LanguageCodeBase, e.StartDateBase })
                    .HasName("IX_tracking_QnText_BaseLanguageVersion")
                    .IsUnique();

                entity.HasIndex(e => new { e.LanguageCode, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.QnCode })
                    .HasName("IX_tracking_QnText_LanguageCode_endDate");

                entity.HasIndex(e => new { e.QnCode, e.LanguageCode, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_QnText")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.QnCode, e.LanguageCode })
                    .HasName("IX_tracking_QnText_rowId_endDate");

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AutoId)
                    .HasColumnName("autoID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingRegulation>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.StartDate });

                entity.ToTable("tracking_Regulation", "temporal");

                entity.HasIndex(e => new { e.RegId, e.RowId, e.EndDate })
                    .HasName("ix_tracking_Regulation_endDate");

                entity.HasIndex(e => new { e.RegId, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_Regulation")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.RegId })
                    .HasName("IX_tracking_Regulation_rowId_endDate");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingRegulationDecTreeQn>(entity =>
            {
                entity.HasKey(e => new { e.DecTreeCode, e.RegId, e.StartDate });

                entity.ToTable("tracking_RegulationDecTreeQn", "temporal");

                entity.HasIndex(e => new { e.DecTreeCode, e.RegId, e.StartDate, e.StartDateDecTreeCode })
                    .HasName("IX_tracking_RegulationDecTreeQn_DecTreeCode")
                    .IsUnique();

                entity.HasIndex(e => new { e.DecTreeCode, e.RegId, e.StartDate, e.StartDateRegId })
                    .HasName("IX_tracking_RegulationDecTreeQn_RegID")
                    .IsUnique();

                entity.HasIndex(e => new { e.RegId, e.DecTreeCode, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_RegulationDecTreeQn")
                    .IsUnique();

                entity.HasIndex(e => new { e.RegId, e.DecTreeCode, e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate })
                    .HasName("IX_tracking_RegulationDecTreeQn_rowId_endDate")
                    .IsUnique();

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateDecTreeCode)
                    .HasColumnName("startDate_DecTreeCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingRegulationHeading>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.HeadingCode, e.StartDate });

                entity.ToTable("tracking_RegulationHeading", "temporal");

                entity.HasIndex(e => new { e.RegId, e.HeadingCode, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_RegulationHeading")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.RegId, e.HeadingCode })
                    .HasName("IX_tracking_RegulationHeading_rowId_endDate");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingRegulationMonitoringReport>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.Idtopic, e.StartDate });

                entity.ToTable("tracking_RegulationMonitoringReport", "temporal");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateIdtopic)
                    .HasColumnName("startDate_IDTopic")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.RowStatusNavigation)
                    .WithMany(p => p.TrackingRegulationMonitoringReport)
                    .HasForeignKey(d => d.RowStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_RegulationMonitoringReport_WorkflowStatus_10");

                entity.HasOne(d => d.UpdateType)
                    .WithMany(p => p.TrackingRegulationMonitoringReport)
                    .HasForeignKey(d => d.UpdateTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_RegulationMonitoringReport_UpdateType_9");

                entity.HasOne(d => d.HistoryRegulationMonitoringReport)
                    .WithMany(p => p.TrackingRegulationMonitoringReport)
                    .HasForeignKey(d => new { d.RegId, d.Idtopic, d.RowId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_RegulationMonitoringReport_history_RegulationMonitoringReport");
            });

            modelBuilder.Entity<TrackingRegulationRegulation>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.ChildRegId, e.StartDate });

                entity.ToTable("tracking_RegulationRegulation", "temporal");

                entity.HasIndex(e => new { e.RegId, e.ChildRegId, e.StartDate, e.StartDateChildRegId })
                    .HasName("IX_tracking_RegulationRegulation_ChildRegID")
                    .IsUnique();

                entity.HasIndex(e => new { e.RegId, e.ChildRegId, e.StartDate, e.StartDateRegId })
                    .HasName("IX_tracking_RegulationRegulation_RegID")
                    .IsUnique();

                entity.HasIndex(e => new { e.RegId, e.ChildRegId, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_RegulationRegulation")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.RegId, e.ChildRegId })
                    .HasName("IX_tracking_RegulationRegulation_rowId_endDate");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.ChildRegId).HasColumnName("ChildRegID");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateChildRegId)
                    .HasColumnName("startDate_ChildRegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingRegulationRegulationInternational>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.ChildRegId, e.StartDate });

                entity.ToTable("tracking_RegulationRegulationInternational", "temporal");

                entity.HasIndex(e => new { e.RegId, e.ChildRegId, e.StartDate, e.StartDateChildRegId })
                    .HasName("IX_tracking_RegulationRegulationInternational_ChildRegID")
                    .IsUnique();

                entity.HasIndex(e => new { e.RegId, e.ChildRegId, e.StartDate, e.StartDateRegId })
                    .HasName("IX_tracking_RegulationRegulationInternational_RegID")
                    .IsUnique();

                entity.HasIndex(e => new { e.RegId, e.ChildRegId, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_RegulationRegulationInternational")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.RegId, e.ChildRegId })
                    .HasName("IX_tracking_RegulationRegulationInternational_rowId_endDate");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.ChildRegId).HasColumnName("ChildRegID");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateChildRegId)
                    .HasColumnName("startDate_ChildRegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateRegId)
                    .HasColumnName("startDate_RegID")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingRegulationRepeal>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.RegIdrepealed, e.StartDate });

                entity.ToTable("tracking_RegulationRepeal", "temporal");

                entity.HasIndex(e => new { e.RegId, e.RegIdrepealed, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_RegulationRepeal")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.RegId, e.RegIdrepealed })
                    .HasName("IX_tracking_RegulationRepeal_rowId_endDate");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegIdrepealed).HasColumnName("RegIDRepealed");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingRegulationText>(entity =>
            {
                entity.HasKey(e => new { e.RegId, e.LanguageCode, e.StartDate });

                entity.ToTable("tracking_RegulationText", "temporal");

                entity.HasIndex(e => new { e.RowId, e.RegId, e.LanguageCode, e.StartDate, e.EndDate, e.RowStatus, e.UpdateTypeId })
                    .HasName("IX_tracking_RegulationText_rowId_endDate")
                    .IsUnique();

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AutoId)
                    .IsRequired()
                    .HasColumnName("autoID")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingRequiredAnswer>(entity =>
            {
                entity.HasKey(e => new { e.DecTreeCode, e.QnCode, e.StartDate });

                entity.ToTable("tracking_RequiredAnswer", "temporal");

                entity.HasIndex(e => new { e.QnCode, e.DecTreeCode, e.RowId, e.RowStatus, e.StartDate, e.EndDate })
                    .HasName("IX_tracking_RequiredAnswer_rowId_endDate")
                    .IsUnique();

                entity.Property(e => e.DecTreeCode).HasMaxLength(15);

                entity.Property(e => e.QnCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateDecTreeCode)
                    .HasColumnName("startDate_DecTreeCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateQnCode)
                    .HasColumnName("startDate_QnCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingTopicHeading>(entity =>
            {
                entity.HasKey(e => new { e.Idtopic, e.HeadingCode, e.StartDate });

                entity.ToTable("tracking_TopicHeading", "temporal");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.HeadingCode).HasMaxLength(15);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.RowStatusNavigation)
                    .WithMany(p => p.TrackingTopicHeading)
                    .HasForeignKey(d => d.RowStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_TopicHeading_WorkflowStatus_6");

                entity.HasOne(d => d.UpdateType)
                    .WithMany(p => p.TrackingTopicHeading)
                    .HasForeignKey(d => d.UpdateTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_TopicHeading_UpdateType_5");

                entity.HasOne(d => d.HistoryTopicHeading)
                    .WithMany(p => p.TrackingTopicHeading)
                    .HasForeignKey(d => new { d.Idtopic, d.HeadingCode, d.RowId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_TopicHeading_history_TopicHeading");
            });

            modelBuilder.Entity<TrackingTopicKeyword>(entity =>
            {
                entity.HasKey(e => new { e.Idtopic, e.IdkeyWord, e.StartDate })
                    .HasName("PK_tracking_TOPICKEYWORD");

                entity.ToTable("tracking_TopicKeyword", "temporal");

                entity.HasIndex(e => new { e.Idtopic, e.IdkeyWord, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_TopicKeyword")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.Idtopic, e.IdkeyWord })
                    .HasName("IX_tracking_TOPICKEYWORD_rowId_endDate");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IdkeyWord).HasColumnName("IDKeyWord");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingV2CountryFactSheetBase>(entity =>
            {
                entity.HasKey(e => new { e.CfsBcountryCode, e.StartDate });

                entity.ToTable("tracking_V2_CountryFactSheet_Base", "temporal");

                entity.HasIndex(e => new { e.CfsBcountryCode, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_V2_CountryFactSheet_Base")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.CfsBcountryCode })
                    .HasName("IX_tracking_V2_CountryFactSheet_Base_rowId_endDate");

                entity.Property(e => e.CfsBcountryCode)
                    .HasColumnName("cfsBCountryCode")
                    .HasMaxLength(2);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingV2CountryFactSheetText>(entity =>
            {
                entity.HasKey(e => new { e.CfsTcountryCode, e.CfsTlanguageCode, e.StartDate });

                entity.ToTable("tracking_V2_CountryFactSheet_Text", "temporal");

                entity.HasIndex(e => new { e.CfsTcountryCode, e.CfsTlanguageCode, e.StartDate, e.MajorVersion, e.MinorVersion, e.RevisionNumber })
                    .HasName("IX_tracking_V2_CountryFactSheet_Text")
                    .IsUnique();

                entity.HasIndex(e => new { e.RowId, e.EndDate, e.RowStatus, e.UpdateTypeId, e.StartDate, e.CfsTcountryCode, e.CfsTlanguageCode })
                    .HasName("IX_tracking_V2_CountryFactSheet_Text_rowId_endDate");

                entity.Property(e => e.CfsTcountryCode)
                    .HasColumnName("cfsTCountryCode")
                    .HasMaxLength(2);

                entity.Property(e => e.CfsTlanguageCode)
                    .HasColumnName("cfsTLanguageCode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((CONVERT([varchar](2),[majorVersion],(0))+'.')+right('00'+CONVERT([varchar],[minorVersion],(0)),(2)))");
            });

            modelBuilder.Entity<TrackingV2ImplementationBase>(entity =>
            {
                entity.HasKey(e => new { e.Idimplementation, e.StartDate });

                entity.ToTable("tracking_v2_Implementation_Base", "temporal");

                entity.Property(e => e.Idimplementation).HasColumnName("IDImplementation");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.RowStatusNavigation)
                    .WithMany(p => p.TrackingV2ImplementationBase)
                    .HasForeignKey(d => d.RowStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_Implementation_Base_WorkflowStatus_8");

                entity.HasOne(d => d.UpdateType)
                    .WithMany(p => p.TrackingV2ImplementationBase)
                    .HasForeignKey(d => d.UpdateTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_Implementation_Base_UpdateType_7");

                entity.HasOne(d => d.HistoryV2ImplementationBase)
                    .WithMany(p => p.TrackingV2ImplementationBase)
                    .HasForeignKey(d => new { d.Idimplementation, d.RowId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_Implementation_Base_history_v2_Implementation_Base");
            });

            modelBuilder.Entity<TrackingV2ImplementationText>(entity =>
            {
                entity.HasKey(e => new { e.Idimplementation, e.LanguageCode, e.StartDate });

                entity.ToTable("tracking_v2_Implementation_Text", "temporal");

                entity.Property(e => e.Idimplementation).HasColumnName("IDImplementation");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.RowStatusNavigation)
                    .WithMany(p => p.TrackingV2ImplementationText)
                    .HasForeignKey(d => d.RowStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_Implementation_Text_WorkflowStatus_7");

                entity.HasOne(d => d.UpdateType)
                    .WithMany(p => p.TrackingV2ImplementationText)
                    .HasForeignKey(d => d.UpdateTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_Implementation_Text_UpdateType_6");

                entity.HasOne(d => d.HistoryV2ImplementationText)
                    .WithMany(p => p.TrackingV2ImplementationText)
                    .HasForeignKey(d => new { d.Idimplementation, d.LanguageCode, d.RowId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_Implementation_Text_history_v2_Implementation_Text");

                entity.HasOne(d => d.TrackingV2ImplementationTextNavigation)
                    .WithMany(p => p.InverseTrackingV2ImplementationTextNavigation)
                    .HasForeignKey(d => new { d.Idimplementation, d.LanguageCodeBase, d.StartDateBase })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_Implementation_Text_tracking_v2_Implementation_Text_BaseLanguageVersion");
            });

            modelBuilder.Entity<TrackingV2MrBusinessImpactBase>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.Idtopic, e.StartDate });

                entity.ToTable("tracking_v2_mr_BusinessImpact_Base", "temporal");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateIdtopic)
                    .HasColumnName("startDate_IDTopic")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.RowStatusNavigation)
                    .WithMany(p => p.TrackingV2MrBusinessImpactBase)
                    .HasForeignKey(d => d.RowStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_mr_BusinessImpact_Base_WorkflowStatus_12");

                entity.HasOne(d => d.UpdateType)
                    .WithMany(p => p.TrackingV2MrBusinessImpactBase)
                    .HasForeignKey(d => d.UpdateTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_mr_BusinessImpact_Base_UpdateType_11");

                entity.HasOne(d => d.HistoryV2MrBusinessImpactBase)
                    .WithMany(p => p.TrackingV2MrBusinessImpactBase)
                    .HasForeignKey(d => new { d.Idclient, d.Idtopic, d.RowId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_mr_BusinessImpact_Base_history_v2_mr_BusinessImpact_Base");
            });

            modelBuilder.Entity<TrackingV2MrBusinessImpactText>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.Idtopic, e.LanguageCode, e.StartDate });

                entity.ToTable("tracking_v2_mr_BusinessImpact_Text", "temporal");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.RowStatusNavigation)
                    .WithMany(p => p.TrackingV2MrBusinessImpactText)
                    .HasForeignKey(d => d.RowStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_mr_BusinessImpact_Text_WorkflowStatus_7");

                entity.HasOne(d => d.UpdateType)
                    .WithMany(p => p.TrackingV2MrBusinessImpactText)
                    .HasForeignKey(d => d.UpdateTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_mr_BusinessImpact_Text_UpdateType_6");

                entity.HasOne(d => d.HistoryV2MrBusinessImpactText)
                    .WithMany(p => p.TrackingV2MrBusinessImpactText)
                    .HasForeignKey(d => new { d.Idclient, d.Idtopic, d.LanguageCode, d.RowId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_mr_BusinessImpact_Text_history_v2_mr_BusinessImpact_Text");
            });

            modelBuilder.Entity<TrackingV2TopicBase>(entity =>
            {
                entity.HasKey(e => new { e.Idtopic, e.StartDate });

                entity.ToTable("tracking_v2_Topic_Base", "temporal");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.RowStatusNavigation)
                    .WithMany(p => p.TrackingV2TopicBase)
                    .HasForeignKey(d => d.RowStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_Topic_Base_WorkflowStatus_6");

                entity.HasOne(d => d.UpdateType)
                    .WithMany(p => p.TrackingV2TopicBase)
                    .HasForeignKey(d => d.UpdateTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_Topic_Base_UpdateType_5");

                entity.HasOne(d => d.HistoryV2TopicBase)
                    .WithMany(p => p.TrackingV2TopicBase)
                    .HasForeignKey(d => new { d.Idtopic, d.RowId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_Topic_Base_history_v2_Topic_Base");
            });

            modelBuilder.Entity<TrackingV2TopicRegion>(entity =>
            {
                entity.HasKey(e => new { e.Idtopic, e.CountryCode, e.RegionCode, e.StartDate });

                entity.ToTable("tracking_v2_TopicRegion", "temporal");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.RegionCode).HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.RowStatusNavigation)
                    .WithMany(p => p.TrackingV2TopicRegion)
                    .HasForeignKey(d => d.RowStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_TopicRegion_WorkflowStatus_6");

                entity.HasOne(d => d.UpdateType)
                    .WithMany(p => p.TrackingV2TopicRegion)
                    .HasForeignKey(d => d.UpdateTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_TopicRegion_UpdateType_5");

                entity.HasOne(d => d.HistoryV2TopicRegion)
                    .WithMany(p => p.TrackingV2TopicRegion)
                    .HasForeignKey(d => new { d.Idtopic, d.CountryCode, d.RegionCode, d.RowId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_TopicRegion_history_v2_TopicRegion");
            });

            modelBuilder.Entity<TrackingV2TopicText>(entity =>
            {
                entity.HasKey(e => new { e.Idtopic, e.LanguageCode, e.StartDate });

                entity.ToTable("tracking_v2_Topic_Text", "temporal");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('2079-06-06')");

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId)
                    .HasColumnName("UpdateTypeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.RowStatusNavigation)
                    .WithMany(p => p.TrackingV2TopicText)
                    .HasForeignKey(d => d.RowStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_Topic_Text_WorkflowStatus_7");

                entity.HasOne(d => d.UpdateType)
                    .WithMany(p => p.TrackingV2TopicText)
                    .HasForeignKey(d => d.UpdateTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_Topic_Text_UpdateType_6");

                entity.HasOne(d => d.HistoryV2TopicText)
                    .WithMany(p => p.TrackingV2TopicText)
                    .HasForeignKey(d => new { d.Idtopic, d.LanguageCode, d.RowId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_Topic_Text_history_v2_Topic_Text");

                entity.HasOne(d => d.TrackingV2TopicTextNavigation)
                    .WithMany(p => p.InverseTrackingV2TopicTextNavigation)
                    .HasForeignKey(d => new { d.Idtopic, d.LanguageCodeBase, d.StartDateBase })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tracking_v2_Topic_Text_tracking_v2_Topic_Text_BaseLanguageVersion");
            });

            modelBuilder.Entity<TranslatedQnText>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("translated_QnText", "dbo");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.Documents).HasMaxLength(50);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.ProofedBy).HasMaxLength(255);

                entity.Property(e => e.ProofedDate).HasColumnType("datetime");

                entity.Property(e => e.QcedBy)
                    .HasColumnName("QCedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.QcedDate)
                    .HasColumnName("QCedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.QnCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.QnTitle).HasMaxLength(1000);

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TranslatedV2ImplementationText>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("translated_v2_Implementation_Text", "dbo");

                entity.Property(e => e.DateLastModified).HasColumnType("smalldatetime");

                entity.Property(e => e.Idimplementation).HasColumnName("IDImplementation");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.Remarks).HasMaxLength(4000);

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");
            });

            modelBuilder.Entity<TranslatedV2MrBusinessImpactText>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("translated_v2_mr_BusinessImpact_Text", "dbo");

                entity.Property(e => e.AnalysisBusinessImpact).HasMaxLength(4000);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateLastModified).HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");
            });

            modelBuilder.Entity<TranslatedV2TopicText>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("translated_v2_Topic_Text", "dbo");

                entity.Property(e => e.AffectedOperations).HasMaxLength(150);

                entity.Property(e => e.DateLastModified).HasColumnType("smalldatetime");

                entity.Property(e => e.EnforcingAuthority).HasMaxLength(255);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IssuingAuthority).HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.Rapid).HasMaxLength(4000);

                entity.Property(e => e.RegulatoryText).HasMaxLength(255);

                entity.Property(e => e.RowStatus)
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");
            });

            modelBuilder.Entity<UpdatesContracts>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UpdatesContracts", "dbo");

                entity.Property(e => e.ClientName).HasMaxLength(255);

                entity.Property(e => e.Country).HasMaxLength(255);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.EndOfDelivery).HasColumnType("smalldatetime");

                entity.Property(e => e.HeadingSetName).HasMaxLength(255);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Region).HasMaxLength(255);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.StartOfDelivery).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<UserInterestPreferences>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserInterestPreferences", "dbo");

                entity.Property(e => e.ClientLongName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ContentLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.EnhesaFlash).HasColumnName("ENHESA_Flash");

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LastName).HasMaxLength(60);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.RoleName).HasMaxLength(100);

                entity.Property(e => e.SIndex)
                    .IsRequired()
                    .HasColumnName("sIndex")
                    .HasMaxLength(2);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.WebSite)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Webinards).HasColumnName("webinards");
            });

            modelBuilder.Entity<UserInterestsCountryRegionPreferences>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserInterestsCountryRegionPreferences", "dbo");

                entity.Property(e => e.ClientLongName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ContentLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.EnhesaFlash).HasColumnName("ENHESA_Flash");

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LastName).HasMaxLength(60);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.SIndex)
                    .IsRequired()
                    .HasColumnName("sIndex")
                    .HasMaxLength(2);

                entity.Property(e => e.WebSite)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Webinards).HasColumnName("webinards");
            });

            modelBuilder.Entity<UserInterestsHeadingData>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserInterestsHeadingData", "dbo");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");
            });

            modelBuilder.Entity<UserInterestsRoles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserInterests_Roles", "dbo");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.RoleName).HasMaxLength(100);
            });

            modelBuilder.Entity<UserInterestsdataContracts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserInterestsdata_contracts", "dbo");

                entity.Property(e => e.ClientLongName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Region).HasMaxLength(25);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UserPermission>(entity =>
            {
                entity.HasKey(e => e.UserPermission1);

                entity.ToTable("UserPermission", "dbo");

                entity.Property(e => e.UserPermission1)
                    .HasColumnName("UserPermission")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Priority)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<UserResponseModels>(entity =>
            {
                entity.HasKey(e => e.UserCount)
                    .HasName("PK_dbo.UserResponseModels");

                entity.ToTable("UserResponseModels", "dbo");
            });

            modelBuilder.Entity<V2ClientScopeBase>(entity =>
            {
                entity.HasKey(e => e.ScopeCode)
                    .HasName("aaaaav2_ClientScope_Base_PK")
                    .IsClustered(false);

                entity.ToTable("v2_ClientScope_Base", "dbo");

                entity.Property(e => e.ScopeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2ClientScopeText>(entity =>
            {
                entity.HasKey(e => new { e.ScopeCode, e.LanguageCode })
                    .HasName("aaaaav2_ClientScope_Text_PK")
                    .IsClustered(false);

                entity.ToTable("v2_ClientScope_Text", "dbo");

                entity.HasIndex(e => e.LanguageCode)
                    .HasName("LanguageCode");

                entity.HasIndex(e => e.Scope)
                    .HasName("Scope");

                entity.HasIndex(e => e.ScopeCode)
                    .HasName("ScopeCode");

                entity.Property(e => e.ScopeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Scope).HasMaxLength(10);

                entity.Property(e => e.ScopeDescription)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<V2CountryFactSheetBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V2_CountryFactSheet_Base", "dbo");

                entity.Property(e => e.CfsBaccidentsDate)
                    .HasColumnName("cfsBAccidentsDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBapproximateExchangeRateToDollar).HasColumnName("cfsBApproximateExchangeRateToDollar");

                entity.Property(e => e.CfsBaverageAnnualincome)
                    .HasColumnName("cfsBAverageAnnualincome")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBaverageIncomeDate)
                    .HasColumnName("cfsBAverageIncomeDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBcapitalDate)
                    .HasColumnName("cfsBCapitalDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBcapitalPop)
                    .HasColumnName("cfsBCapitalPop")
                    .HasMaxLength(50);

                entity.Property(e => e.CfsBcountryCode)
                    .IsRequired()
                    .HasColumnName("cfsBCountryCode")
                    .HasMaxLength(2);

                entity.Property(e => e.CfsBcurrencyDate)
                    .HasColumnName("cfsBCurrencyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBflag).HasColumnName("cfsBFlag");

                entity.Property(e => e.CfsBheadOofState)
                    .HasColumnName("cfsBHeadOofState")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBinternationalDialingCcode)
                    .HasColumnName("cfsBInternationalDialingCcode")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBlabourStructureDate)
                    .HasColumnName("cfsBLabourStructureDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBlifeExpectancyDate)
                    .HasColumnName("cfsBLifeExpectancyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBmajorCitiesDate)
                    .HasColumnName("cfsBMajorCitiesDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBmap).HasColumnName("cfsBMap");

                entity.Property(e => e.CfsBpopulation)
                    .HasColumnName("cfsBPopulation")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBpopulationDate)
                    .HasColumnName("cfsBPopulationDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBprimeMinister)
                    .HasColumnName("cfsBPrimeMinister")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBprimeMinisterDate)
                    .HasColumnName("cfsBPrimeMinisterDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBpublicHolidaysDate)
                    .HasColumnName("cfsBPublicHolidaysDate")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBtradePartnersDate)
                    .HasColumnName("cfsBTradePartnersDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsLastReviewedBy)
                    .HasColumnName("cfsLastReviewedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.CfsLastReviewedDate)
                    .HasColumnName("cfsLastReviewedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2CountryFactSheetBase1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V2_CountryFactSheet_Base", "published");

                entity.Property(e => e.CfsBaccidentsDate)
                    .HasColumnName("cfsBAccidentsDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBapproximateExchangeRateToDollar).HasColumnName("cfsBApproximateExchangeRateToDollar");

                entity.Property(e => e.CfsBaverageAnnualincome)
                    .HasColumnName("cfsBAverageAnnualincome")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBaverageIncomeDate)
                    .HasColumnName("cfsBAverageIncomeDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBcapitalDate)
                    .HasColumnName("cfsBCapitalDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBcapitalPop)
                    .HasColumnName("cfsBCapitalPop")
                    .HasMaxLength(50);

                entity.Property(e => e.CfsBcountryCode)
                    .IsRequired()
                    .HasColumnName("cfsBCountryCode")
                    .HasMaxLength(2);

                entity.Property(e => e.CfsBcurrencyDate)
                    .HasColumnName("cfsBCurrencyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBflag).HasColumnName("cfsBFlag");

                entity.Property(e => e.CfsBheadOofState)
                    .HasColumnName("cfsBHeadOofState")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBinternationalDialingCcode)
                    .HasColumnName("cfsBInternationalDialingCcode")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBlabourStructureDate)
                    .HasColumnName("cfsBLabourStructureDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBlifeExpectancyDate)
                    .HasColumnName("cfsBLifeExpectancyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBmajorCitiesDate)
                    .HasColumnName("cfsBMajorCitiesDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBmap).HasColumnName("cfsBMap");

                entity.Property(e => e.CfsBpopulation)
                    .HasColumnName("cfsBPopulation")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBpopulationDate)
                    .HasColumnName("cfsBPopulationDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBprimeMinister)
                    .HasColumnName("cfsBPrimeMinister")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBprimeMinisterDate)
                    .HasColumnName("cfsBPrimeMinisterDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBpublicHolidaysDate)
                    .HasColumnName("cfsBPublicHolidaysDate")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBtradePartnersDate)
                    .HasColumnName("cfsBTradePartnersDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsLastReviewedBy)
                    .HasColumnName("cfsLastReviewedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.CfsLastReviewedDate)
                    .HasColumnName("cfsLastReviewedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2CountryFactSheetBase2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V2_CountryFactSheet_Base", "temporal");

                entity.Property(e => e.CfsBaccidentsDate)
                    .HasColumnName("cfsBAccidentsDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBapproximateExchangeRateToDollar).HasColumnName("cfsBApproximateExchangeRateToDollar");

                entity.Property(e => e.CfsBaverageAnnualincome)
                    .HasColumnName("cfsBAverageAnnualincome")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBaverageIncomeDate)
                    .HasColumnName("cfsBAverageIncomeDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBcapitalDate)
                    .HasColumnName("cfsBCapitalDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBcapitalPop)
                    .HasColumnName("cfsBCapitalPop")
                    .HasMaxLength(50);

                entity.Property(e => e.CfsBcountryCode)
                    .IsRequired()
                    .HasColumnName("cfsBCountryCode")
                    .HasMaxLength(2);

                entity.Property(e => e.CfsBcurrencyDate)
                    .HasColumnName("cfsBCurrencyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBflag).HasColumnName("cfsBFlag");

                entity.Property(e => e.CfsBheadOofState)
                    .HasColumnName("cfsBHeadOofState")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBinternationalDialingCcode)
                    .HasColumnName("cfsBInternationalDialingCcode")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBlabourStructureDate)
                    .HasColumnName("cfsBLabourStructureDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBlifeExpectancyDate)
                    .HasColumnName("cfsBLifeExpectancyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBmajorCitiesDate)
                    .HasColumnName("cfsBMajorCitiesDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBmap).HasColumnName("cfsBMap");

                entity.Property(e => e.CfsBpopulation)
                    .HasColumnName("cfsBPopulation")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBpopulationDate)
                    .HasColumnName("cfsBPopulationDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBprimeMinister)
                    .HasColumnName("cfsBPrimeMinister")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBprimeMinisterDate)
                    .HasColumnName("cfsBPrimeMinisterDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBpublicHolidaysDate)
                    .HasColumnName("cfsBPublicHolidaysDate")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBtradePartnersDate)
                    .HasColumnName("cfsBTradePartnersDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsLastReviewedBy)
                    .HasColumnName("cfsLastReviewedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.CfsLastReviewedDate)
                    .HasColumnName("cfsLastReviewedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2CountryFactSheetBase3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V2_CountryFactSheet_Base", "workflow");

                entity.Property(e => e.CfsBaccidentsDate)
                    .HasColumnName("cfsBAccidentsDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBapproximateExchangeRateToDollar).HasColumnName("cfsBApproximateExchangeRateToDollar");

                entity.Property(e => e.CfsBaverageAnnualincome)
                    .HasColumnName("cfsBAverageAnnualincome")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBaverageIncomeDate)
                    .HasColumnName("cfsBAverageIncomeDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBcapitalDate)
                    .HasColumnName("cfsBCapitalDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBcapitalPop)
                    .HasColumnName("cfsBCapitalPop")
                    .HasMaxLength(50);

                entity.Property(e => e.CfsBcountryCode)
                    .IsRequired()
                    .HasColumnName("cfsBCountryCode")
                    .HasMaxLength(2);

                entity.Property(e => e.CfsBcurrencyDate)
                    .HasColumnName("cfsBCurrencyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBflag).HasColumnName("cfsBFlag");

                entity.Property(e => e.CfsBheadOofState)
                    .HasColumnName("cfsBHeadOofState")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBinternationalDialingCcode)
                    .HasColumnName("cfsBInternationalDialingCcode")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBlabourStructureDate)
                    .HasColumnName("cfsBLabourStructureDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBlifeExpectancyDate)
                    .HasColumnName("cfsBLifeExpectancyDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBmajorCitiesDate)
                    .HasColumnName("cfsBMajorCitiesDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBmap).HasColumnName("cfsBMap");

                entity.Property(e => e.CfsBpopulation)
                    .HasColumnName("cfsBPopulation")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBpopulationDate)
                    .HasColumnName("cfsBPopulationDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBprimeMinister)
                    .HasColumnName("cfsBPrimeMinister")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBprimeMinisterDate)
                    .HasColumnName("cfsBPrimeMinisterDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsBpublicHolidaysDate)
                    .HasColumnName("cfsBPublicHolidaysDate")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBtradePartnersDate)
                    .HasColumnName("cfsBTradePartnersDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsLastReviewedBy)
                    .HasColumnName("cfsLastReviewedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.CfsLastReviewedDate)
                    .HasColumnName("cfsLastReviewedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2CountryFactSheetText>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V2_CountryFactSheet_Text", "dbo");

                entity.Property(e => e.CfsLastModifiedBy)
                    .HasColumnName("cfsLastModifiedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.CfsLastModifiedDate)
                    .HasColumnName("cfsLastModifiedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsT3daysAbsenceAccidents)
                    .HasColumnName("cfsT3DaysAbsenceAccidents")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTareaComparative)
                    .HasColumnName("cfsTAreaComparative")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTcapital)
                    .HasColumnName("cfsTCapital")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTclimate).HasColumnName("cfsTClimate");

                entity.Property(e => e.CfsTcountryCode)
                    .IsRequired()
                    .HasColumnName("cfsTCountryCode")
                    .HasMaxLength(2);

                entity.Property(e => e.CfsTcurrentEnvironmentalIssues).HasColumnName("cfsTCurrentEnvironmentalIssues");

                entity.Property(e => e.CfsTfatalWorkAaccidents)
                    .HasColumnName("cfsTFatalWorkAaccidents")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTinternationalAirports).HasColumnName("cfsTInternationalAirports");

                entity.Property(e => e.CfsTlabourStructure)
                    .HasColumnName("cfsTLabourStructure")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTlanguageCode)
                    .IsRequired()
                    .HasColumnName("cfsTLanguageCode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CfsTlifeexpectancy)
                    .HasColumnName("cfsTLifeexpectancy")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTlocation).HasColumnName("cfsTLocation");

                entity.Property(e => e.CfsTmainExports)
                    .HasColumnName("cfsTMainExports")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTmainIndustries).HasColumnName("cfsTMainIndustries");

                entity.Property(e => e.CfsTmajorCities).HasColumnName("cfsTMajorCities");

                entity.Property(e => e.CfsTmajorLanguage)
                    .HasColumnName("cfsTMajorLanguage")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTmajorReligion)
                    .HasColumnName("cfsTMajorReligion")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTmajorTradePartners).HasColumnName("cfsTMajorTradePartners");

                entity.Property(e => e.CfsTmonetaryUnit)
                    .HasColumnName("cfsTMonetaryUnit")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTpublicHolidays).HasColumnName("cfsTPublicHolidays");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2CountryFactSheetText1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V2_CountryFactSheet_Text", "published");

                entity.Property(e => e.CfsLastModifiedBy)
                    .HasColumnName("cfsLastModifiedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.CfsLastModifiedDate)
                    .HasColumnName("cfsLastModifiedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsT3daysAbsenceAccidents)
                    .HasColumnName("cfsT3DaysAbsenceAccidents")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTareaComparative)
                    .HasColumnName("cfsTAreaComparative")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTcapital)
                    .HasColumnName("cfsTCapital")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTclimate).HasColumnName("cfsTClimate");

                entity.Property(e => e.CfsTcountryCode)
                    .IsRequired()
                    .HasColumnName("cfsTCountryCode")
                    .HasMaxLength(2);

                entity.Property(e => e.CfsTcurrentEnvironmentalIssues).HasColumnName("cfsTCurrentEnvironmentalIssues");

                entity.Property(e => e.CfsTfatalWorkAaccidents)
                    .HasColumnName("cfsTFatalWorkAaccidents")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTinternationalAirports).HasColumnName("cfsTInternationalAirports");

                entity.Property(e => e.CfsTlabourStructure)
                    .HasColumnName("cfsTLabourStructure")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTlanguageCode)
                    .IsRequired()
                    .HasColumnName("cfsTLanguageCode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CfsTlifeexpectancy)
                    .HasColumnName("cfsTLifeexpectancy")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTlocation).HasColumnName("cfsTLocation");

                entity.Property(e => e.CfsTmainExports)
                    .HasColumnName("cfsTMainExports")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTmainIndustries).HasColumnName("cfsTMainIndustries");

                entity.Property(e => e.CfsTmajorCities).HasColumnName("cfsTMajorCities");

                entity.Property(e => e.CfsTmajorLanguage)
                    .HasColumnName("cfsTMajorLanguage")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTmajorReligion)
                    .HasColumnName("cfsTMajorReligion")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTmajorTradePartners).HasColumnName("cfsTMajorTradePartners");

                entity.Property(e => e.CfsTmonetaryUnit)
                    .HasColumnName("cfsTMonetaryUnit")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTpublicHolidays).HasColumnName("cfsTPublicHolidays");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2CountryFactSheetText2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V2_CountryFactSheet_Text", "temporal");

                entity.Property(e => e.CfsLastModifiedBy)
                    .HasColumnName("cfsLastModifiedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.CfsLastModifiedDate)
                    .HasColumnName("cfsLastModifiedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsT3daysAbsenceAccidents)
                    .HasColumnName("cfsT3DaysAbsenceAccidents")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTareaComparative)
                    .HasColumnName("cfsTAreaComparative")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTcapital)
                    .HasColumnName("cfsTCapital")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTclimate).HasColumnName("cfsTClimate");

                entity.Property(e => e.CfsTcountryCode)
                    .IsRequired()
                    .HasColumnName("cfsTCountryCode")
                    .HasMaxLength(2);

                entity.Property(e => e.CfsTcurrentEnvironmentalIssues).HasColumnName("cfsTCurrentEnvironmentalIssues");

                entity.Property(e => e.CfsTfatalWorkAaccidents)
                    .HasColumnName("cfsTFatalWorkAaccidents")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTinternationalAirports).HasColumnName("cfsTInternationalAirports");

                entity.Property(e => e.CfsTlabourStructure)
                    .HasColumnName("cfsTLabourStructure")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTlanguageCode)
                    .IsRequired()
                    .HasColumnName("cfsTLanguageCode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CfsTlifeexpectancy)
                    .HasColumnName("cfsTLifeexpectancy")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTlocation).HasColumnName("cfsTLocation");

                entity.Property(e => e.CfsTmainExports)
                    .HasColumnName("cfsTMainExports")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTmainIndustries).HasColumnName("cfsTMainIndustries");

                entity.Property(e => e.CfsTmajorCities).HasColumnName("cfsTMajorCities");

                entity.Property(e => e.CfsTmajorLanguage)
                    .HasColumnName("cfsTMajorLanguage")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTmajorReligion)
                    .HasColumnName("cfsTMajorReligion")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTmajorTradePartners).HasColumnName("cfsTMajorTradePartners");

                entity.Property(e => e.CfsTmonetaryUnit)
                    .HasColumnName("cfsTMonetaryUnit")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTpublicHolidays).HasColumnName("cfsTPublicHolidays");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2CountryFactSheetText3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V2_CountryFactSheet_Text", "workflow");

                entity.Property(e => e.CfsLastModifiedBy)
                    .HasColumnName("cfsLastModifiedBy")
                    .HasMaxLength(50);

                entity.Property(e => e.CfsLastModifiedDate)
                    .HasColumnName("cfsLastModifiedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CfsT3daysAbsenceAccidents)
                    .HasColumnName("cfsT3DaysAbsenceAccidents")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTareaComparative)
                    .HasColumnName("cfsTAreaComparative")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTcapital)
                    .HasColumnName("cfsTCapital")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTclimate).HasColumnName("cfsTClimate");

                entity.Property(e => e.CfsTcountryCode)
                    .IsRequired()
                    .HasColumnName("cfsTCountryCode")
                    .HasMaxLength(2);

                entity.Property(e => e.CfsTcurrentEnvironmentalIssues).HasColumnName("cfsTCurrentEnvironmentalIssues");

                entity.Property(e => e.CfsTfatalWorkAaccidents)
                    .HasColumnName("cfsTFatalWorkAaccidents")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTinternationalAirports).HasColumnName("cfsTInternationalAirports");

                entity.Property(e => e.CfsTlabourStructure)
                    .HasColumnName("cfsTLabourStructure")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTlanguageCode)
                    .IsRequired()
                    .HasColumnName("cfsTLanguageCode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CfsTlifeexpectancy)
                    .HasColumnName("cfsTLifeexpectancy")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTlocation).HasColumnName("cfsTLocation");

                entity.Property(e => e.CfsTmainExports)
                    .HasColumnName("cfsTMainExports")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTmainIndustries).HasColumnName("cfsTMainIndustries");

                entity.Property(e => e.CfsTmajorCities).HasColumnName("cfsTMajorCities");

                entity.Property(e => e.CfsTmajorLanguage)
                    .HasColumnName("cfsTMajorLanguage")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTmajorReligion)
                    .HasColumnName("cfsTMajorReligion")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTmajorTradePartners).HasColumnName("cfsTMajorTradePartners");

                entity.Property(e => e.CfsTmonetaryUnit)
                    .HasColumnName("cfsTMonetaryUnit")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTpublicHolidays).HasColumnName("cfsTPublicHolidays");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2ImplementationBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_Implementation_Base", "dbo");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idimplementation).HasColumnName("IDImplementation");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.ImplementationDate).HasColumnType("datetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2ImplementationBase1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_Implementation_Base", "published");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idimplementation).HasColumnName("IDImplementation");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.ImplementationDate).HasColumnType("datetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2ImplementationBase2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_Implementation_Base", "temporal");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idimplementation).HasColumnName("IDImplementation");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.ImplementationDate).HasColumnType("datetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2ImplementationBase3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_Implementation_Base", "workflow");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idimplementation).HasColumnName("IDImplementation");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.ImplementationDate).HasColumnType("datetime");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2ImplementationText>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_Implementation_Text", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DateLastModified).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idimplementation).HasColumnName("IDImplementation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Remarks).HasMaxLength(4000);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2ImplementationText1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_Implementation_Text", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DateLastModified).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idimplementation).HasColumnName("IDImplementation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Remarks).HasMaxLength(4000);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2ImplementationText2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_Implementation_Text", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DateLastModified).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idimplementation).HasColumnName("IDImplementation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Remarks).HasMaxLength(4000);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2ImplementationText3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_Implementation_Text", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.DateLastModified).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idimplementation).HasColumnName("IDImplementation");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Remarks).HasMaxLength(4000);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2KeywordBase>(entity =>
            {
                entity.HasKey(e => e.Idkeyword)
                    .HasName("aaaaav2_Keyword_Base_PK");

                entity.ToTable("v2_Keyword_Base", "dbo");

                entity.Property(e => e.Idkeyword).HasColumnName("IDKeyword");
            });

            modelBuilder.Entity<V2KeywordText>(entity =>
            {
                entity.HasKey(e => new { e.LanguageCode, e.IdkeyWord })
                    .HasName("aaaaav2_Keyword_Text_PK");

                entity.ToTable("v2_Keyword_Text", "dbo");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('fr')");

                entity.Property(e => e.IdkeyWord).HasColumnName("IDKeyWord");

                entity.Property(e => e.CategoryKeyWord).HasMaxLength(200);

                entity.Property(e => e.MainKeyWord).HasMaxLength(200);

                entity.Property(e => e.SubKeyWord).HasMaxLength(200);
            });

            modelBuilder.Entity<V2LanguageLink>(entity =>
            {
                entity.HasKey(e => new { e.Link, e.ServiceCode })
                    .HasName("aaaaav2_LanguageLink_PK")
                    .IsClustered(false);

                entity.ToTable("v2_LanguageLink", "dbo");

                entity.HasIndex(e => e.ServiceCode)
                    .HasName("ServiceCode");

                entity.Property(e => e.Link)
                    .HasColumnName("link")
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode).HasMaxLength(50);
            });

            modelBuilder.Entity<V2LanguageList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_LanguageList", "dbo");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<V2LinkCategoryBase>(entity =>
            {
                entity.HasKey(e => e.CategoryCode)
                    .HasName("aaaaav2_LinkCategory_Base_PK")
                    .IsClustered(false);

                entity.ToTable("v2_LinkCategory_Base", "dbo");

                entity.HasIndex(e => e.CategoryCode)
                    .HasName("CategoryCode");

                entity.HasIndex(e => e.SortCode)
                    .HasName("SortCode");

                entity.Property(e => e.CategoryCode).HasMaxLength(1);

                entity.Property(e => e.SortCode).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<V2LinkCategoryText>(entity =>
            {
                entity.HasKey(e => new { e.CategoryCode, e.LanguageCode })
                    .HasName("aaaaav2_LinkCategory_Text_PK")
                    .IsClustered(false);

                entity.ToTable("v2_LinkCategory_Text", "dbo");

                entity.HasIndex(e => e.CategoryCode)
                    .HasName("CategoryCode");

                entity.HasIndex(e => e.CategoryName)
                    .HasName("CategoryName");

                entity.HasIndex(e => e.LanguageCode)
                    .HasName("LanguageCode");

                entity.Property(e => e.CategoryCode).HasMaxLength(1);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.CategoryName).HasMaxLength(50);
            });

            modelBuilder.Entity<V2LookupAuthors>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_lookupAuthors", "dbo");

                entity.Property(e => e.AuthorName).HasMaxLength(111);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.Idcounter)
                    .HasColumnName("IDCounter")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<V2LookupCountryFactSheets>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_lookup_CountryFactSheets", "dbo");

                entity.Property(e => e.CfsBcapitalPop)
                    .HasColumnName("cfsBCapitalPop")
                    .HasMaxLength(50);

                entity.Property(e => e.CfsBcountryCode)
                    .IsRequired()
                    .HasColumnName("cfsBCountryCode")
                    .HasMaxLength(2);

                entity.Property(e => e.CfsBinternationalDialingCcode)
                    .HasColumnName("cfsBInternationalDialingCcode")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsBpopulation)
                    .HasColumnName("cfsBPopulation")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsT3daysAbsenceAccidents)
                    .HasColumnName("cfsT3DaysAbsenceAccidents")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTcapital)
                    .HasColumnName("cfsTCapital")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTcurrentEnvironmentalIssues).HasColumnName("cfsTCurrentEnvironmentalIssues");

                entity.Property(e => e.CfsTfatalWorkAaccidents)
                    .HasColumnName("cfsTFatalWorkAaccidents")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTlabourStructure)
                    .HasColumnName("cfsTLabourStructure")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTmainIndustries).HasColumnName("cfsTMainIndustries");

                entity.Property(e => e.CfsTmajorLanguage)
                    .HasColumnName("cfsTMajorLanguage")
                    .HasMaxLength(255);

                entity.Property(e => e.CfsTmonetaryUnit)
                    .HasColumnName("cfsTMonetaryUnit")
                    .HasMaxLength(255);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<V2LookupServicesByClient>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_lookup_ServicesByClient", "dbo");

                entity.Property(e => e.ClientLongName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.EndOfDelivery).HasColumnType("date");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SetCode).HasMaxLength(50);

                entity.Property(e => e.StartOfDelivery).HasColumnType("date");
            });

            modelBuilder.Entity<V2MrBusinessImpactBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_mr_BusinessImpact_Base", "dbo");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ClientReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.Importance)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIdtopic)
                    .HasColumnName("startDate_IDTopic")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2MrBusinessImpactBase1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_mr_BusinessImpact_Base", "published");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ClientReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.Importance)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIdtopic)
                    .HasColumnName("startDate_IDTopic")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2MrBusinessImpactBase2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_mr_BusinessImpact_Base", "temporal");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ClientReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.Importance)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIdtopic)
                    .HasColumnName("startDate_IDTopic")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2MrBusinessImpactBase3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_mr_BusinessImpact_Base", "workflow");

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ClientReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.Importance)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateIdtopic)
                    .HasColumnName("startDate_IDTopic")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2MrBusinessImpactText>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_mr_BusinessImpact_Text", "dbo");

                entity.Property(e => e.AnalysisBusinessImpact).HasMaxLength(4000);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateLastModified).HasColumnType("smalldatetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2MrBusinessImpactText1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_mr_BusinessImpact_Text", "published");

                entity.Property(e => e.AnalysisBusinessImpact).HasMaxLength(4000);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateLastModified).HasColumnType("smalldatetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2MrBusinessImpactText2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_mr_BusinessImpact_Text", "temporal");

                entity.Property(e => e.AnalysisBusinessImpact).HasMaxLength(4000);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateLastModified).HasColumnType("smalldatetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2MrBusinessImpactText3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_mr_BusinessImpact_Text", "workflow");

                entity.Property(e => e.AnalysisBusinessImpact).HasMaxLength(4000);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateLastModified).HasColumnType("smalldatetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2NewOnSiteBase>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.ItemNumber })
                    .HasName("aaaaav2_NewOnSite_Base_PK")
                    .IsClustered(false);

                entity.ToTable("v2_NewOnSite_Base", "dbo");

                entity.HasIndex(e => e.Idclient)
                    .HasName("IDClient");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.DateItemAdded)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<V2NewOnSiteText>(entity =>
            {
                entity.HasKey(e => new { e.Idclient, e.ItemNumber, e.LanguageCode })
                    .HasName("aaaaav2_NewOnSite_Text_PK")
                    .IsClustered(false);

                entity.ToTable("v2_NewOnSite_Text", "dbo");

                entity.HasIndex(e => e.LanguageCode)
                    .HasName("{54398D17-3492-4A62-B808-84F9F05B4C7D}");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.ItemInformation).HasMaxLength(4000);
            });

            modelBuilder.Entity<V2PImplementationDateMin>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_p_ImplementationDate_Min", "dbo");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.MinOfImplementationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<V2QryHeadingExpanded>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_qryHeadingExpanded", "dbo");

                entity.Property(e => e.ChildHeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<V2QryHeadingsExpandedTopLevel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_qryHeadingsExpandedTopLevel", "dbo");

                entity.Property(e => e.ChildHeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<V2QryParentHeadingCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_qryParentHeadingCode", "dbo");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Level)
                    .IsRequired()
                    .HasColumnName("LEVEL")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ParentHeadingCode).HasMaxLength(15);
            });

            modelBuilder.Entity<V2Rep>(entity =>
            {
                entity.HasKey(e => new { e.RepCode, e.LanguageCode })
                    .HasName("aaaaav2_Rep_PK")
                    .IsClustered(false);

                entity.ToTable("v2_Rep", "dbo");

                entity.HasIndex(e => e.LanguageCode)
                    .HasName("LanguageCode");

                entity.HasIndex(e => e.RepCode)
                    .HasName("RepCode");

                entity.Property(e => e.LanguageCode).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(255);
            });

            modelBuilder.Entity<V2ServiceBase>(entity =>
            {
                entity.HasKey(e => e.ServiceCode)
                    .HasName("aaaaav2_Service_Base_PK")
                    .IsClustered(false);

                entity.ToTable("v2_Service_Base", "dbo");

                entity.HasIndex(e => e.ServiceCode)
                    .HasName("ServiceCode");

                entity.HasIndex(e => e.SortCode)
                    .HasName("SortCode");

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.IsExternalService)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.PublicSiteServicePath).HasMaxLength(100);

                entity.Property(e => e.ServiceLink).HasMaxLength(50);

                entity.Property(e => e.ServicePkcolumnName)
                    .HasColumnName("ServicePKColumnName")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceUrl)
                    .HasColumnName("ServiceURL")
                    .HasMaxLength(255);

                entity.Property(e => e.SortCode).HasMaxLength(50);
            });

            modelBuilder.Entity<V2ServiceText>(entity =>
            {
                entity.HasKey(e => new { e.ServiceCode, e.LanguageCode })
                    .HasName("aaaaav2_Service_Text_PK")
                    .IsClustered(false);

                entity.ToTable("v2_Service_Text", "dbo");

                entity.HasIndex(e => e.LanguageCode)
                    .HasName("LanguageCode");

                entity.HasIndex(e => e.ServiceCode)
                    .HasName("ServiceCode");

                entity.Property(e => e.ServiceCode).HasMaxLength(50);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<V2StatusBase>(entity =>
            {
                entity.HasKey(e => e.Idstatus)
                    .HasName("aaaaav2_Status_Base_PK")
                    .IsClustered(false);

                entity.ToTable("v2_Status_Base", "dbo");

                entity.Property(e => e.Idstatus)
                    .HasColumnName("IDStatus")
                    .ValueGeneratedNever();

                entity.Property(e => e.SortOrder).HasMaxLength(50);

                entity.Property(e => e.StatusGroup).HasMaxLength(12);
            });

            modelBuilder.Entity<V2StatusText>(entity =>
            {
                entity.HasKey(e => new { e.Idstatus, e.LanguageCode })
                    .HasName("aaaaav2_Status_Text_PK")
                    .IsClustered(false);

                entity.ToTable("v2_Status_Text", "dbo");

                entity.HasIndex(e => e.Idstatus)
                    .HasName("{72BEE9AC-3679-4EAD-9F85-9850F668D799}");

                entity.HasIndex(e => e.LanguageCode)
                    .HasName("{288FA6A8-A24F-4CB8-8034-41567F20A0ED}");

                entity.Property(e => e.Idstatus).HasColumnName("IDStatus");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('en')");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<V2TopicBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_Topic_Base", "dbo");

                entity.Property(e => e.AdoptionDate).HasColumnType("datetime");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ContactType)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idcontact).HasColumnName("IDContact");

                entity.Property(e => e.Idproduct)
                    .HasColumnName("IDProduct")
                    .HasMaxLength(10);

                entity.Property(e => e.Idstatus).HasColumnName("IDStatus");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.InternalCode).HasMaxLength(50);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2TopicBase1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_Topic_Base", "published");

                entity.Property(e => e.AdoptionDate).HasColumnType("datetime");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ContactType)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idcontact).HasColumnName("IDContact");

                entity.Property(e => e.Idproduct)
                    .HasColumnName("IDProduct")
                    .HasMaxLength(10);

                entity.Property(e => e.Idstatus).HasColumnName("IDStatus");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.InternalCode).HasMaxLength(50);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2TopicBase2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_Topic_Base", "temporal");

                entity.Property(e => e.AdoptionDate).HasColumnType("datetime");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ContactType)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idcontact).HasColumnName("IDContact");

                entity.Property(e => e.Idproduct)
                    .HasColumnName("IDProduct")
                    .HasMaxLength(10);

                entity.Property(e => e.Idstatus).HasColumnName("IDStatus");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.InternalCode).HasMaxLength(50);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2TopicBase3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_Topic_Base", "workflow");

                entity.Property(e => e.AdoptionDate).HasColumnType("datetime");

                entity.Property(e => e.ArchivedBy).HasMaxLength(50);

                entity.Property(e => e.BaseLanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.ContactType)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateArchived).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idcontact).HasColumnName("IDContact");

                entity.Property(e => e.Idproduct)
                    .HasColumnName("IDProduct")
                    .HasMaxLength(10);

                entity.Property(e => e.Idstatus).HasColumnName("IDStatus");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.InternalCode).HasMaxLength(50);

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2TopicRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_TopicRegion", "dbo");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2TopicRegion1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_TopicRegion", "published");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2TopicRegion2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_TopicRegion", "temporal");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2TopicRegion3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_TopicRegion", "workflow");

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowID");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2TopicText>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_Topic_Text", "dbo");

                entity.Property(e => e.AffectedOperations).HasMaxLength(150);

                entity.Property(e => e.ArchiveReference).HasMaxLength(100);

                entity.Property(e => e.AuthorId).HasColumnName("AuthorID");

                entity.Property(e => e.AuthorInformation).HasMaxLength(255);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateLastModified).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnforcingAuthority).HasMaxLength(255);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.IssuingAuthority).HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PrintedforQc).HasColumnName("PrintedforQC");

                entity.Property(e => e.PrintedforQcby)
                    .HasColumnName("PrintedforQCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.PrintedforQcdate)
                    .HasColumnName("PrintedforQCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProofReadBy).HasMaxLength(50);

                entity.Property(e => e.ProofReadDate).HasColumnType("datetime");

                entity.Property(e => e.Qc).HasColumnName("QC");

                entity.Property(e => e.Qcby)
                    .HasColumnName("QCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.Qcdate)
                    .HasColumnName("QCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rapid).HasMaxLength(4000);

                entity.Property(e => e.RapidComments).HasMaxLength(250);

                entity.Property(e => e.ReadyforPublicationBy).HasMaxLength(50);

                entity.Property(e => e.ReadyforPublicationDate).HasColumnType("datetime");

                entity.Property(e => e.ReadyforQc).HasColumnName("ReadyforQC");

                entity.Property(e => e.ReadyforQcby)
                    .HasColumnName("ReadyforQCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.ReadyforQcdate)
                    .HasColumnName("ReadyforQCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegulatoryText).HasMaxLength(255);

                entity.Property(e => e.ReviewedBy).HasMaxLength(50);

                entity.Property(e => e.ReviewedDate).HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SentBy).HasMaxLength(50);

                entity.Property(e => e.SentDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.TranslatedBy).HasMaxLength(50);

                entity.Property(e => e.TranslatedDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2TopicText1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_Topic_Text", "published");

                entity.Property(e => e.AffectedOperations).HasMaxLength(150);

                entity.Property(e => e.ArchiveReference).HasMaxLength(100);

                entity.Property(e => e.AuthorId).HasColumnName("AuthorID");

                entity.Property(e => e.AuthorInformation).HasMaxLength(255);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateLastModified).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnforcingAuthority).HasMaxLength(255);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.IssuingAuthority).HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PrintedforQc).HasColumnName("PrintedforQC");

                entity.Property(e => e.PrintedforQcby)
                    .HasColumnName("PrintedforQCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.PrintedforQcdate)
                    .HasColumnName("PrintedforQCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProofReadBy).HasMaxLength(50);

                entity.Property(e => e.ProofReadDate).HasColumnType("datetime");

                entity.Property(e => e.Qc).HasColumnName("QC");

                entity.Property(e => e.Qcby)
                    .HasColumnName("QCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.Qcdate)
                    .HasColumnName("QCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rapid).HasMaxLength(4000);

                entity.Property(e => e.RapidComments).HasMaxLength(250);

                entity.Property(e => e.ReadyforPublicationBy).HasMaxLength(50);

                entity.Property(e => e.ReadyforPublicationDate).HasColumnType("datetime");

                entity.Property(e => e.ReadyforQc).HasColumnName("ReadyforQC");

                entity.Property(e => e.ReadyforQcby)
                    .HasColumnName("ReadyforQCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.ReadyforQcdate)
                    .HasColumnName("ReadyforQCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegulatoryText).HasMaxLength(255);

                entity.Property(e => e.ReviewedBy).HasMaxLength(50);

                entity.Property(e => e.ReviewedDate).HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SentBy).HasMaxLength(50);

                entity.Property(e => e.SentDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.TranslatedBy).HasMaxLength(50);

                entity.Property(e => e.TranslatedDate).HasColumnType("datetime");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2TopicText2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_Topic_Text", "temporal");

                entity.Property(e => e.AffectedOperations).HasMaxLength(150);

                entity.Property(e => e.ArchiveReference).HasMaxLength(100);

                entity.Property(e => e.AuthorId).HasColumnName("AuthorID");

                entity.Property(e => e.AuthorInformation).HasMaxLength(255);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateLastModified).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnforcingAuthority).HasMaxLength(255);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.IssuingAuthority).HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PrintedforQc).HasColumnName("PrintedforQC");

                entity.Property(e => e.PrintedforQcby)
                    .HasColumnName("PrintedforQCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.PrintedforQcdate)
                    .HasColumnName("PrintedforQCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProofReadBy).HasMaxLength(50);

                entity.Property(e => e.ProofReadDate).HasColumnType("datetime");

                entity.Property(e => e.Qc).HasColumnName("QC");

                entity.Property(e => e.Qcby)
                    .HasColumnName("QCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.Qcdate)
                    .HasColumnName("QCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rapid).HasMaxLength(4000);

                entity.Property(e => e.RapidComments).HasMaxLength(250);

                entity.Property(e => e.ReadyforPublicationBy).HasMaxLength(50);

                entity.Property(e => e.ReadyforPublicationDate).HasColumnType("datetime");

                entity.Property(e => e.ReadyforQc).HasColumnName("ReadyforQC");

                entity.Property(e => e.ReadyforQcby)
                    .HasColumnName("ReadyforQCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.ReadyforQcdate)
                    .HasColumnName("ReadyforQCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegulatoryText).HasMaxLength(255);

                entity.Property(e => e.ReviewedBy).HasMaxLength(50);

                entity.Property(e => e.ReviewedDate).HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SentBy).HasMaxLength(50);

                entity.Property(e => e.SentDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.TranslatedBy).HasMaxLength(50);

                entity.Property(e => e.TranslatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2TopicText3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_Topic_Text", "workflow");

                entity.Property(e => e.AffectedOperations).HasMaxLength(150);

                entity.Property(e => e.ArchiveReference).HasMaxLength(100);

                entity.Property(e => e.AuthorId).HasColumnName("AuthorID");

                entity.Property(e => e.AuthorInformation).HasMaxLength(255);

                entity.Property(e => e.ChangeNotes).HasColumnName("changeNotes");

                entity.Property(e => e.ChangedBy)
                    .HasColumnName("changedBy")
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateLastModified).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("endDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnforcingAuthority).HasMaxLength(255);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IsContracted).HasColumnName("isContracted");

                entity.Property(e => e.IsOfInterest).HasColumnName("isOfInterest");

                entity.Property(e => e.IssuingAuthority).HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCodeBase)
                    .IsRequired()
                    .HasColumnName("LanguageCode_Base")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastPublishedStartDate)
                    .HasColumnName("lastPublishedStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MajorVersion).HasColumnName("majorVersion");

                entity.Property(e => e.Md5)
                    .IsRequired()
                    .HasColumnName("md5")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MinorVersion).HasColumnName("minorVersion");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.NewResearchDate)
                    .HasColumnName("newResearchDate")
                    .HasColumnType("date");

                entity.Property(e => e.NewStartDate)
                    .HasColumnName("newStartDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PrintedforQc).HasColumnName("PrintedforQC");

                entity.Property(e => e.PrintedforQcby)
                    .HasColumnName("PrintedforQCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.PrintedforQcdate)
                    .HasColumnName("PrintedforQCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProofReadBy).HasMaxLength(50);

                entity.Property(e => e.ProofReadDate).HasColumnType("datetime");

                entity.Property(e => e.Qc).HasColumnName("QC");

                entity.Property(e => e.Qcby)
                    .HasColumnName("QCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.Qcdate)
                    .HasColumnName("QCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rapid).HasMaxLength(4000);

                entity.Property(e => e.RapidComments).HasMaxLength(250);

                entity.Property(e => e.ReadyforPublicationBy).HasMaxLength(50);

                entity.Property(e => e.ReadyforPublicationDate).HasColumnType("datetime");

                entity.Property(e => e.ReadyforQc).HasColumnName("ReadyforQC");

                entity.Property(e => e.ReadyforQcby)
                    .HasColumnName("ReadyforQCBy")
                    .HasMaxLength(50);

                entity.Property(e => e.ReadyforQcdate)
                    .HasColumnName("ReadyforQCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegulatoryText).HasMaxLength(255);

                entity.Property(e => e.ReviewedBy).HasMaxLength(50);

                entity.Property(e => e.ReviewedDate).HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasColumnName("revisionNumber");

                entity.Property(e => e.RowId).HasColumnName("rowId");

                entity.Property(e => e.RowStatus)
                    .IsRequired()
                    .HasColumnName("rowStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SentBy).HasMaxLength(50);

                entity.Property(e => e.SentDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate)
                    .HasColumnName("startDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDateBase)
                    .HasColumnName("startDate_Base")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.TranslatedBy).HasMaxLength(50);

                entity.Property(e => e.TranslatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdateTypeId).HasColumnName("UpdateTypeID");

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("versionNumber")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2UrlsAllBroken>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_URLS_all_broken", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.DateLastChecked).HasColumnType("datetime");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Pk)
                    .HasColumnName("PK")
                    .HasMaxLength(15);

                entity.Property(e => e.Reason).HasMaxLength(255);

                entity.Property(e => e.RecordType)
                    .IsRequired()
                    .HasMaxLength(17)
                    .IsUnicode(false);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasColumnName("url")
                    .HasMaxLength(450);

                entity.Property(e => e.Urlcode)
                    .IsRequired()
                    .HasColumnName("urlcode")
                    .HasMaxLength(6);
            });

            modelBuilder.Entity<V2UrlsAllTotals>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_URLS_all_totals", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<V2UrlsAllTotalsConsultants>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_URLS_all_totals_Consultants", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Logon)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Urlcode)
                    .IsRequired()
                    .HasColumnName("urlcode")
                    .HasMaxLength(6);
            });

            modelBuilder.Entity<V2UrlsApUsed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_URLS_ap_used", "dbo");

                entity.Property(e => e.Pk)
                    .IsRequired()
                    .HasColumnName("PK")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Urlcode)
                    .IsRequired()
                    .HasColumnName("urlcode")
                    .HasMaxLength(6);
            });

            modelBuilder.Entity<V2UrlsCpUsed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_URLS_cp_used", "dbo");

                entity.Property(e => e.IntroId).HasColumnName("IntroID");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Urlcode)
                    .IsRequired()
                    .HasColumnName("urlcode")
                    .HasMaxLength(6);
            });

            modelBuilder.Entity<V2UrlsLgAUsed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_URLS_lg_a_used", "dbo");

                entity.Property(e => e.AmendmentCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.AmendmentRef).HasMaxLength(500);

                entity.Property(e => e.AmendmentTitle)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Hyperlink).HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Pk)
                    .IsRequired()
                    .HasColumnName("PK")
                    .HasMaxLength(15);

                entity.Property(e => e.Urlcode)
                    .IsRequired()
                    .HasColumnName("urlcode")
                    .HasMaxLength(6);
            });

            modelBuilder.Entity<V2UrlsLgUsed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_URLS_lg_used", "dbo");

                entity.Property(e => e.ConsolidatedHyperlink).HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.RegHyperlink).HasMaxLength(255);

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegSummary).HasMaxLength(4000);

                entity.Property(e => e.RegTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Urlcode)
                    .IsRequired()
                    .HasColumnName("urlcode")
                    .HasMaxLength(6);
            });

            modelBuilder.Entity<V2UrlsMrUsed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_URLS_mr_used", "dbo");

                entity.Property(e => e.AffectedOperations).HasMaxLength(150);

                entity.Property(e => e.ArchiveReference).HasMaxLength(100);

                entity.Property(e => e.AuthorId).HasColumnName("AuthorID");

                entity.Property(e => e.AuthorInformation).HasMaxLength(255);

                entity.Property(e => e.EnforcingAuthority).HasMaxLength(255);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.IssuingAuthority).HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Pk).HasColumnName("PK");

                entity.Property(e => e.Rapid).HasMaxLength(4000);

                entity.Property(e => e.RapidComments).HasMaxLength(250);

                entity.Property(e => e.RegulatoryText).HasMaxLength(255);

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Urlcode)
                    .IsRequired()
                    .HasColumnName("urlcode")
                    .HasMaxLength(6);
            });

            modelBuilder.Entity<V2ViewHeadings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_viewHeadings", "dbo");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.SortCode).HasMaxLength(10);
            });

            modelBuilder.Entity<V2ViewHeadingsAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_viewHeadings_all", "dbo");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.SortCode).HasMaxLength(10);
            });

            modelBuilder.Entity<V2ViewImplementationDates>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_viewImplementationDates", "dbo");

                entity.Property(e => e.Idimplementation).HasColumnName("IDImplementation");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.ImplementationDate).HasColumnType("datetime");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks).HasMaxLength(4000);
            });

            modelBuilder.Entity<V2ViewKeywords>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_viewKeywords", "dbo");

                entity.Property(e => e.IdkeyWord).HasColumnName("IDKeyWord");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");
            });

            modelBuilder.Entity<V2ViewLatestClientReportDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_viewLatestClientReportDate", "dbo");

                entity.Property(e => e.ClientLongName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EarliestReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.IdcontentProxy).HasColumnName("IDContentProxy");

                entity.Property(e => e.IdservicesProxy).HasColumnName("IDServicesProxy");

                entity.Property(e => e.LatestReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.MaxOfClientReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UseServerInstance)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UseSnapshotDb)
                    .HasColumnName("UseSnapshotDB")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2ViewMrBiAllTopics>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_view_mr_BI_allTopics", "dbo");

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClientReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.Importance)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<V2ViewMrBusinessImpactsClient>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_view_mr_BusinessImpacts_Client", "dbo");

                entity.Property(e => e.AnalysisBusinessImpact).HasMaxLength(4000);

                entity.Property(e => e.ClientReportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Idclient).HasColumnName("IDClient");

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.Importance)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2ViewRegions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v2_viewRegions", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Idtopic).HasColumnName("IDTopic");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<V3LegislationA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v3_Legislation_a", "dbo");

                entity.Property(e => e.A).HasColumnName("a");

                entity.Property(e => e.B)
                    .HasColumnName("b")
                    .HasColumnType("datetime");

                entity.Property(e => e.C)
                    .IsRequired()
                    .HasColumnName("c")
                    .HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.D).HasColumnName("d");

                entity.Property(e => e.E)
                    .HasColumnName("e")
                    .HasColumnType("datetime");

                entity.Property(e => e.F)
                    .IsRequired()
                    .HasColumnName("f")
                    .HasMaxLength(50);

                entity.Property(e => e.ReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<V3LegislationAbc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v3_Legislation_abc", "dbo");

                entity.Property(e => e.A).HasColumnName("a");

                entity.Property(e => e.B)
                    .HasColumnName("b")
                    .HasColumnType("datetime");

                entity.Property(e => e.C)
                    .IsRequired()
                    .HasColumnName("c")
                    .HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.D).HasColumnName("d");

                entity.Property(e => e.E)
                    .HasColumnName("e")
                    .HasColumnType("datetime");

                entity.Property(e => e.F)
                    .IsRequired()
                    .HasColumnName("f")
                    .HasMaxLength(50);

                entity.Property(e => e.ReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<V3LegislationB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v3_Legislation_b", "dbo");

                entity.Property(e => e.A).HasColumnName("a");

                entity.Property(e => e.B)
                    .HasColumnName("b")
                    .HasColumnType("datetime");

                entity.Property(e => e.C)
                    .IsRequired()
                    .HasColumnName("c")
                    .HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.D).HasColumnName("d");

                entity.Property(e => e.E)
                    .HasColumnName("e")
                    .HasColumnType("datetime");

                entity.Property(e => e.F)
                    .IsRequired()
                    .HasColumnName("f")
                    .HasMaxLength(50);

                entity.Property(e => e.ReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<V3LegislationC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v3_Legislation_c", "dbo");

                entity.Property(e => e.A).HasColumnName("a");

                entity.Property(e => e.B)
                    .HasColumnName("b")
                    .HasColumnType("datetime");

                entity.Property(e => e.C)
                    .IsRequired()
                    .HasColumnName("c")
                    .HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.D).HasColumnName("d");

                entity.Property(e => e.E)
                    .HasColumnName("e")
                    .HasColumnType("datetime");

                entity.Property(e => e.F)
                    .IsRequired()
                    .HasColumnName("f")
                    .HasMaxLength(50);

                entity.Property(e => e.ReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<V3LegislationD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v3_Legislation_d", "dbo");

                entity.Property(e => e.A).HasColumnName("a");

                entity.Property(e => e.AmendmentCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.AmendmentDate).HasColumnType("datetime");

                entity.Property(e => e.AmendmentRef).HasMaxLength(500);

                entity.Property(e => e.AmendmentTitle)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ArchiveA).HasColumnName("Archive_A");

                entity.Property(e => e.ArchiveR).HasColumnName("Archive_R");

                entity.Property(e => e.B)
                    .HasColumnName("b")
                    .HasColumnType("datetime");

                entity.Property(e => e.C)
                    .IsRequired()
                    .HasColumnName("c")
                    .HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.D).HasColumnName("d");

                entity.Property(e => e.E)
                    .HasColumnName("e")
                    .HasColumnType("datetime");

                entity.Property(e => e.F)
                    .IsRequired()
                    .HasColumnName("f")
                    .HasMaxLength(50);

                entity.Property(e => e.Hyperlink).HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenceDate).HasColumnType("datetime");

                entity.Property(e => e.RegId).HasColumnName("RegID");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegulationReference)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewAllHeadings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("viewAllHeadings", "dbo");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Main)
                    .IsRequired()
                    .HasColumnName("main")
                    .HasMaxLength(15);

                entity.Property(e => e.MainSortCode).HasMaxLength(10);

                entity.Property(e => e.Sub)
                    .IsRequired()
                    .HasColumnName("sub")
                    .HasMaxLength(15);

                entity.Property(e => e.SubSortCode).HasMaxLength(10);

                entity.Property(e => e.SubSubSortCode).HasMaxLength(10);

                entity.Property(e => e.Subsub)
                    .IsRequired()
                    .HasColumnName("subsub")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<ViewHeadingMain>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("viewHeadingMain", "dbo");

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.MainSortCode).HasMaxLength(10);
            });

            modelBuilder.Entity<ViewHeadingSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("viewHeadingSub", "dbo");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Main)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.MainSortCode).HasMaxLength(10);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.Sub)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.SubSortCode).HasMaxLength(10);
            });

            modelBuilder.Entity<ViewHeadingSubSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("viewHeadingSubSub", "dbo");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.HeadingCode)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.HeadingName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Main)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.MainSortCode).HasMaxLength(10);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.Sub)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.SubSortCode).HasMaxLength(10);

                entity.Property(e => e.SubSub)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.SubSubSortCode).HasMaxLength(10);
            });

            modelBuilder.Entity<ViewLinks>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("viewLinks", "dbo");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(50);

                entity.Property(e => e.CostDetails).HasMaxLength(255);

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastReviewed).HasColumnType("datetime");

                entity.Property(e => e.MonitoringPriority).HasMaxLength(20);

                entity.Property(e => e.SubscriptionDetails).HasMaxLength(255);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasColumnName("url")
                    .HasMaxLength(255);

                entity.Property(e => e.WebsiteComments).HasMaxLength(4000);

                entity.Property(e => e.WebsiteTitle).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewLinksTextInEnglish>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("viewLinksTextInEnglish", "dbo");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasColumnName("url")
                    .HasMaxLength(255);

                entity.Property(e => e.WebsiteTitle).HasMaxLength(255);
            });

            modelBuilder.Entity<VwCountry>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwCountry", "dbo");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Idcountry).HasColumnName("IDCountry");
            });

            modelBuilder.Entity<VwInformationSourcesReviewedCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwInformationSourcesReviewedCount", "dbo");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Idcounter).HasColumnName("IDCounter");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LastReviewed).HasColumnType("datetime");

                entity.Property(e => e.Logon)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<WalesAnswers>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WalesAnswers", "dbo");

                entity.Property(e => e.Answer).HasMaxLength(255);

                entity.Property(e => e.AnswerCreateBy).HasMaxLength(255);

                entity.Property(e => e.AnswerCreateDate).HasColumnType("datetime");

                entity.Property(e => e.AnswerLastModifiedBy).HasMaxLength(255);

                entity.Property(e => e.QnCode).HasMaxLength(255);
            });

            modelBuilder.Entity<WorkflowRole>(entity =>
            {
                entity.HasKey(e => e.WorkflowRole1);

                entity.ToTable("WorkflowRole", "dbo");

                entity.Property(e => e.WorkflowRole1)
                    .HasColumnName("WorkflowRole")
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WorkingDaysPerMonth>(entity =>
            {
                entity.HasKey(e => new { e.CountryCode, e.FirstOfTheMonth })
                    .HasName("PK_TotalHoursPerMonth");

                entity.ToTable("WorkingDaysPerMonth", "dbo");

                entity.Property(e => e.CountryCode).HasMaxLength(2);

                entity.Property(e => e.FirstOfTheMonth).HasColumnType("date");
            });

            modelBuilder.Entity<WorldAreas>(entity =>
            {
                entity.HasKey(e => e.AreaCode)
                    .HasName("aaaaaWorldAreas_PK")
                    .IsClustered(false);

                entity.ToTable("WorldAreas", "dbo");

                entity.HasIndex(e => e.AreaCode)
                    .HasName("AreaCode");

                entity.Property(e => e.AreaCode).ValueGeneratedNever();

                entity.Property(e => e.AreaHyperlink).HasMaxLength(100);

                entity.Property(e => e.AreaName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<WorldAreasText>(entity =>
            {
                entity.HasKey(e => new { e.AreaCode, e.LanguageCode });

                entity.ToTable("WorldAreas_Text", "dbo");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AreaName).HasMaxLength(200);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
